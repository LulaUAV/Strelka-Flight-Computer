
Strelka_Layout_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800de94  0800de94  0001de94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800df50  0800df50  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  0800df50  0800df50  0001df50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800df58  0800df58  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800df58  0800df58  0001df58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800df5c  0800df5c  0001df5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  0800df60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020100  2**0
                  CONTENTS
 10 .bss          00006898  20000100  20000100  00020100  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006998  20006998  00020100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002cb6a  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006048  00000000  00000000  0004cc9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025e8  00000000  00000000  00052ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002398  00000000  00000000  000552d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008ab4  00000000  00000000  00057668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002ecee  00000000  00000000  0006011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5e0c  00000000  00000000  0008ee0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00174c16  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a110  00000000  00000000  00174c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800de7c 	.word	0x0800de7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800de7c 	.word	0x0800de7c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fec8 	bl	800126c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f82c 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 fa8c 	bl	80009fc <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80004e4:	f000 f926 	bl	8000734 <MX_SDIO_SD_Init>
  MX_SPI1_Init();
 80004e8:	f000 f944 	bl	8000774 <MX_SPI1_Init>
  MX_SPI2_Init();
 80004ec:	f000 f978 	bl	80007e0 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80004f0:	f000 fa30 	bl	8000954 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80004f4:	f000 f9e0 	bl	80008b8 <MX_TIM3_Init>
  MX_FATFS_Init();
 80004f8:	f007 fdb8 	bl	800806c <MX_FATFS_Init>
  MX_I2C2_Init();
 80004fc:	f000 f8ec 	bl	80006d8 <MX_I2C2_Init>
  MX_ADC2_Init();
 8000500:	f000 f884 	bl	800060c <MX_ADC2_Init>
  MX_SPI3_Init();
 8000504:	f000 f9a2 	bl	800084c <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8000508:	f000 fa4e 	bl	80009a8 <MX_USART2_UART_Init>
  MX_CRC_Init();
 800050c:	f000 f8d0 	bl	80006b0 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000510:	f00a f802 	bl	800a518 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000514:	4a05      	ldr	r2, [pc, #20]	; (800052c <main+0x58>)
 8000516:	2100      	movs	r1, #0
 8000518:	4805      	ldr	r0, [pc, #20]	; (8000530 <main+0x5c>)
 800051a:	f00a f87e 	bl	800a61a <osThreadNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <main+0x60>)
 8000522:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000524:	f00a f83e 	bl	800a5a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000528:	e7fe      	b.n	8000528 <main+0x54>
 800052a:	bf00      	nop
 800052c:	0800df00 	.word	0x0800df00
 8000530:	08000b9d 	.word	0x08000b9d
 8000534:	2000041c 	.word	0x2000041c

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b094      	sub	sp, #80	; 0x50
 800053c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053e:	f107 0320 	add.w	r3, r7, #32
 8000542:	2230      	movs	r2, #48	; 0x30
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f00d fc90 	bl	800de6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800054c:	f107 030c 	add.w	r3, r7, #12
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
 8000554:	605a      	str	r2, [r3, #4]
 8000556:	609a      	str	r2, [r3, #8]
 8000558:	60da      	str	r2, [r3, #12]
 800055a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800055c:	2300      	movs	r3, #0
 800055e:	60bb      	str	r3, [r7, #8]
 8000560:	4b28      	ldr	r3, [pc, #160]	; (8000604 <SystemClock_Config+0xcc>)
 8000562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000564:	4a27      	ldr	r2, [pc, #156]	; (8000604 <SystemClock_Config+0xcc>)
 8000566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800056a:	6413      	str	r3, [r2, #64]	; 0x40
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <SystemClock_Config+0xcc>)
 800056e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000574:	60bb      	str	r3, [r7, #8]
 8000576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000578:	2300      	movs	r3, #0
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	4b22      	ldr	r3, [pc, #136]	; (8000608 <SystemClock_Config+0xd0>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a21      	ldr	r2, [pc, #132]	; (8000608 <SystemClock_Config+0xd0>)
 8000582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	4b1f      	ldr	r3, [pc, #124]	; (8000608 <SystemClock_Config+0xd0>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000590:	607b      	str	r3, [r7, #4]
 8000592:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000594:	2301      	movs	r3, #1
 8000596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80005a8:	230c      	movs	r3, #12
 80005aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005ac:	23a8      	movs	r3, #168	; 0xa8
 80005ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005b0:	2302      	movs	r3, #2
 80005b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b4:	2307      	movs	r3, #7
 80005b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0320 	add.w	r3, r7, #32
 80005bc:	4618      	mov	r0, r3
 80005be:	f003 f89d 	bl	80036fc <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c8:	f000 faf2 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2105      	movs	r1, #5
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fafe 	bl	8003bec <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005f6:	f000 fadb 	bl	8000bb0 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3750      	adds	r7, #80	; 0x50
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	463b      	mov	r3, r7
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800061e:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <MX_ADC2_Init+0x98>)
 8000620:	4a21      	ldr	r2, [pc, #132]	; (80006a8 <MX_ADC2_Init+0x9c>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000624:	4b1f      	ldr	r3, [pc, #124]	; (80006a4 <MX_ADC2_Init+0x98>)
 8000626:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800062a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800062c:	4b1d      	ldr	r3, [pc, #116]	; (80006a4 <MX_ADC2_Init+0x98>)
 800062e:	2200      	movs	r2, #0
 8000630:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000632:	4b1c      	ldr	r3, [pc, #112]	; (80006a4 <MX_ADC2_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000638:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <MX_ADC2_Init+0x98>)
 800063a:	2200      	movs	r2, #0
 800063c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800063e:	4b19      	ldr	r3, [pc, #100]	; (80006a4 <MX_ADC2_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b17      	ldr	r3, [pc, #92]	; (80006a4 <MX_ADC2_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800064c:	4b15      	ldr	r3, [pc, #84]	; (80006a4 <MX_ADC2_Init+0x98>)
 800064e:	4a17      	ldr	r2, [pc, #92]	; (80006ac <MX_ADC2_Init+0xa0>)
 8000650:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000652:	4b14      	ldr	r3, [pc, #80]	; (80006a4 <MX_ADC2_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_ADC2_Init+0x98>)
 800065a:	2201      	movs	r2, #1
 800065c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_ADC2_Init+0x98>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000666:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_ADC2_Init+0x98>)
 8000668:	2201      	movs	r2, #1
 800066a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800066c:	480d      	ldr	r0, [pc, #52]	; (80006a4 <MX_ADC2_Init+0x98>)
 800066e:	f000 fe93 	bl	8001398 <HAL_ADC_Init>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000678:	f000 fa9a 	bl	8000bb0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800067c:	2308      	movs	r3, #8
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000680:	2301      	movs	r3, #1
 8000682:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000688:	463b      	mov	r3, r7
 800068a:	4619      	mov	r1, r3
 800068c:	4805      	ldr	r0, [pc, #20]	; (80006a4 <MX_ADC2_Init+0x98>)
 800068e:	f000 fec7 	bl	8001420 <HAL_ADC_ConfigChannel>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000698:	f000 fa8a 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	2000011c 	.word	0x2000011c
 80006a8:	40012100 	.word	0x40012100
 80006ac:	0f000001 	.word	0x0f000001

080006b0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_CRC_Init+0x20>)
 80006b6:	4a07      	ldr	r2, [pc, #28]	; (80006d4 <MX_CRC_Init+0x24>)
 80006b8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_CRC_Init+0x20>)
 80006bc:	f001 f9df 	bl	8001a7e <HAL_CRC_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006c6:	f000 fa73 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000164 	.word	0x20000164
 80006d4:	40023000 	.word	0x40023000

080006d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C2_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_I2C2_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C2_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_I2C2_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C2_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2C2_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_I2C2_Init+0x50>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_I2C2_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2C2_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_I2C2_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2C2_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_I2C2_Init+0x50>)
 8000716:	f001 fc2f 	bl	8001f78 <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 fa46 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	2000016c 	.word	0x2000016c
 800072c:	40005800 	.word	0x40005800
 8000730:	00061a80 	.word	0x00061a80

08000734 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000738:	4b0c      	ldr	r3, [pc, #48]	; (800076c <MX_SDIO_SD_Init+0x38>)
 800073a:	4a0d      	ldr	r2, [pc, #52]	; (8000770 <MX_SDIO_SD_Init+0x3c>)
 800073c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800073e:	4b0b      	ldr	r3, [pc, #44]	; (800076c <MX_SDIO_SD_Init+0x38>)
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000744:	4b09      	ldr	r3, [pc, #36]	; (800076c <MX_SDIO_SD_Init+0x38>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800074a:	4b08      	ldr	r3, [pc, #32]	; (800076c <MX_SDIO_SD_Init+0x38>)
 800074c:	2200      	movs	r2, #0
 800074e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <MX_SDIO_SD_Init+0x38>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000756:	4b05      	ldr	r3, [pc, #20]	; (800076c <MX_SDIO_SD_Init+0x38>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <MX_SDIO_SD_Init+0x38>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	46bd      	mov	sp, r7
 8000766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076a:	4770      	bx	lr
 800076c:	200001c0 	.word	0x200001c0
 8000770:	40012c00 	.word	0x40012c00

08000774 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000778:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_SPI1_Init+0x64>)
 800077a:	4a18      	ldr	r2, [pc, #96]	; (80007dc <MX_SPI1_Init+0x68>)
 800077c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_SPI1_Init+0x64>)
 8000780:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000784:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_SPI1_Init+0x64>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_SPI1_Init+0x64>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_SPI1_Init+0x64>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_SPI1_Init+0x64>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_SPI1_Init+0x64>)
 80007a0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80007a4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_SPI1_Init+0x64>)
 80007c0:	220a      	movs	r2, #10
 80007c2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_SPI1_Init+0x64>)
 80007c6:	f004 fc8a 	bl	80050de <HAL_SPI_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007d0:	f000 f9ee 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000244 	.word	0x20000244
 80007dc:	40013000 	.word	0x40013000

080007e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_SPI2_Init+0x64>)
 80007e6:	4a18      	ldr	r2, [pc, #96]	; (8000848 <MX_SPI2_Init+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_SPI2_Init+0x64>)
 80007ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_SPI2_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_SPI2_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_SPI2_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_SPI2_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_SPI2_Init+0x64>)
 800080c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000810:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_SPI2_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_SPI2_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_SPI2_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_SPI2_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_SPI2_Init+0x64>)
 800082c:	220a      	movs	r2, #10
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_SPI2_Init+0x64>)
 8000832:	f004 fc54 	bl	80050de <HAL_SPI_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800083c:	f000 f9b8 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000029c 	.word	0x2000029c
 8000848:	40003800 	.word	0x40003800

0800084c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_SPI3_Init+0x64>)
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <MX_SPI3_Init+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_SPI3_Init+0x64>)
 8000858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800085c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_SPI3_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_SPI3_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_SPI3_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_SPI3_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_SPI3_Init+0x64>)
 8000878:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800087c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_SPI3_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_SPI3_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_SPI3_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_SPI3_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_SPI3_Init+0x64>)
 8000898:	220a      	movs	r2, #10
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_SPI3_Init+0x64>)
 800089e:	f004 fc1e 	bl	80050de <HAL_SPI_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80008a8:	f000 f982 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200002f4 	.word	0x200002f4
 80008b4:	40003c00 	.word	0x40003c00

080008b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	; (800094c <MX_TIM3_Init+0x94>)
 80008d6:	4a1e      	ldr	r2, [pc, #120]	; (8000950 <MX_TIM3_Init+0x98>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008da:	4b1c      	ldr	r3, [pc, #112]	; (800094c <MX_TIM3_Init+0x94>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b1a      	ldr	r3, [pc, #104]	; (800094c <MX_TIM3_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008e6:	4b19      	ldr	r3, [pc, #100]	; (800094c <MX_TIM3_Init+0x94>)
 80008e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ec:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ee:	4b17      	ldr	r3, [pc, #92]	; (800094c <MX_TIM3_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f4:	4b15      	ldr	r3, [pc, #84]	; (800094c <MX_TIM3_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008fa:	4814      	ldr	r0, [pc, #80]	; (800094c <MX_TIM3_Init+0x94>)
 80008fc:	f004 fc78 	bl	80051f0 <HAL_TIM_Base_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000906:	f000 f953 	bl	8000bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800090a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000910:	f107 0308 	add.w	r3, r7, #8
 8000914:	4619      	mov	r1, r3
 8000916:	480d      	ldr	r0, [pc, #52]	; (800094c <MX_TIM3_Init+0x94>)
 8000918:	f004 fcb9 	bl	800528e <HAL_TIM_ConfigClockSource>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000922:	f000 f945 	bl	8000bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800092e:	463b      	mov	r3, r7
 8000930:	4619      	mov	r1, r3
 8000932:	4806      	ldr	r0, [pc, #24]	; (800094c <MX_TIM3_Init+0x94>)
 8000934:	f004 feac 	bl	8005690 <HAL_TIMEx_MasterConfigSynchronization>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800093e:	f000 f937 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000034c 	.word	0x2000034c
 8000950:	40000400 	.word	0x40000400

08000954 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000958:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USART1_UART_Init+0x4c>)
 800095a:	4a12      	ldr	r2, [pc, #72]	; (80009a4 <MX_USART1_UART_Init+0x50>)
 800095c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800095e:	4b10      	ldr	r3, [pc, #64]	; (80009a0 <MX_USART1_UART_Init+0x4c>)
 8000960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000964:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART1_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USART1_UART_Init+0x4c>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART1_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USART1_UART_Init+0x4c>)
 800097a:	220c      	movs	r2, #12
 800097c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USART1_UART_Init+0x4c>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USART1_UART_Init+0x4c>)
 8000986:	2200      	movs	r2, #0
 8000988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USART1_UART_Init+0x4c>)
 800098c:	f004 fefc 	bl	8005788 <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000996:	f000 f90b 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000394 	.word	0x20000394
 80009a4:	40011000 	.word	0x40011000

080009a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_USART2_UART_Init+0x50>)
 80009b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009ce:	220c      	movs	r2, #12
 80009d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART2_UART_Init+0x4c>)
 80009e0:	f004 fed2 	bl	8005788 <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80009ea:	f000 f8e1 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200003d8 	.word	0x200003d8
 80009f8:	40004400 	.word	0x40004400

080009fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08a      	sub	sp, #40	; 0x28
 8000a00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a02:	f107 0314 	add.w	r3, r7, #20
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	4b5d      	ldr	r3, [pc, #372]	; (8000b8c <MX_GPIO_Init+0x190>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a5c      	ldr	r2, [pc, #368]	; (8000b8c <MX_GPIO_Init+0x190>)
 8000a1c:	f043 0304 	orr.w	r3, r3, #4
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b5a      	ldr	r3, [pc, #360]	; (8000b8c <MX_GPIO_Init+0x190>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b56      	ldr	r3, [pc, #344]	; (8000b8c <MX_GPIO_Init+0x190>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a55      	ldr	r2, [pc, #340]	; (8000b8c <MX_GPIO_Init+0x190>)
 8000a38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b53      	ldr	r3, [pc, #332]	; (8000b8c <MX_GPIO_Init+0x190>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	4b4f      	ldr	r3, [pc, #316]	; (8000b8c <MX_GPIO_Init+0x190>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a4e      	ldr	r2, [pc, #312]	; (8000b8c <MX_GPIO_Init+0x190>)
 8000a54:	f043 0301 	orr.w	r3, r3, #1
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b4c      	ldr	r3, [pc, #304]	; (8000b8c <MX_GPIO_Init+0x190>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0301 	and.w	r3, r3, #1
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	4b48      	ldr	r3, [pc, #288]	; (8000b8c <MX_GPIO_Init+0x190>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	4a47      	ldr	r2, [pc, #284]	; (8000b8c <MX_GPIO_Init+0x190>)
 8000a70:	f043 0302 	orr.w	r3, r3, #2
 8000a74:	6313      	str	r3, [r2, #48]	; 0x30
 8000a76:	4b45      	ldr	r3, [pc, #276]	; (8000b8c <MX_GPIO_Init+0x190>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
 8000a86:	4b41      	ldr	r3, [pc, #260]	; (8000b8c <MX_GPIO_Init+0x190>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8a:	4a40      	ldr	r2, [pc, #256]	; (8000b8c <MX_GPIO_Init+0x190>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	6313      	str	r3, [r2, #48]	; 0x30
 8000a92:	4b3e      	ldr	r3, [pc, #248]	; (8000b8c <MX_GPIO_Init+0x190>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CONT_TEST_EN_Pin|LED_INDICATOR_Pin, GPIO_PIN_RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f242 0102 	movw	r1, #8194	; 0x2002
 8000aa4:	483a      	ldr	r0, [pc, #232]	; (8000b90 <MX_GPIO_Init+0x194>)
 8000aa6:	f001 fa4d 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAIN_L_Pin|MAIN_H_Pin|DROGUE_H_Pin|GYRO_CS_Pin, GPIO_PIN_RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f241 1103 	movw	r1, #4355	; 0x1103
 8000ab0:	4838      	ldr	r0, [pc, #224]	; (8000b94 <MX_GPIO_Init+0x198>)
 8000ab2:	f001 fa47 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MAG_CS_Pin|DROGUE_L_Pin|BARO_CS_Pin|ACCEL_CS_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 519a 	mov.w	r1, #4928	; 0x1340
 8000abc:	4836      	ldr	r0, [pc, #216]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000abe:	f001 fa41 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CONT_TEST_EN_Pin LED_INDICATOR_Pin */
  GPIO_InitStruct.Pin = CONT_TEST_EN_Pin|LED_INDICATOR_Pin;
 8000ac2:	f242 0302 	movw	r3, #8194	; 0x2002
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4619      	mov	r1, r3
 8000ada:	482d      	ldr	r0, [pc, #180]	; (8000b90 <MX_GPIO_Init+0x194>)
 8000adc:	f001 f87e 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : MAIN_L_Pin MAIN_H_Pin DROGUE_H_Pin GYRO_CS_Pin */
  GPIO_InitStruct.Pin = MAIN_L_Pin|MAIN_H_Pin|DROGUE_H_Pin|GYRO_CS_Pin;
 8000ae0:	f241 1303 	movw	r3, #4355	; 0x1103
 8000ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4826      	ldr	r0, [pc, #152]	; (8000b94 <MX_GPIO_Init+0x198>)
 8000afa:	f001 f86f 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : ACCEL_INT_Pin GYRO_INT_Pin MAG_INT_Pin */
  GPIO_InitStruct.Pin = ACCEL_INT_Pin|GYRO_INT_Pin|MAG_INT_Pin;
 8000afe:	2370      	movs	r3, #112	; 0x70
 8000b00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b02:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	481f      	ldr	r0, [pc, #124]	; (8000b90 <MX_GPIO_Init+0x194>)
 8000b14:	f001 f862 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : MAG_CS_Pin DROGUE_L_Pin BARO_CS_Pin ACCEL_CS_Pin */
  GPIO_InitStruct.Pin = MAG_CS_Pin|DROGUE_L_Pin|BARO_CS_Pin|ACCEL_CS_Pin;
 8000b18:	f44f 539a 	mov.w	r3, #4928	; 0x1340
 8000b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b26:	2300      	movs	r3, #0
 8000b28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4819      	ldr	r0, [pc, #100]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000b32:	f001 f853 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_DET_Pin */
  GPIO_InitStruct.Pin = SD_DET_Pin;
 8000b36:	2380      	movs	r3, #128	; 0x80
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SD_DET_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	4811      	ldr	r0, [pc, #68]	; (8000b90 <MX_GPIO_Init+0x194>)
 8000b4a:	f001 f847 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : IO_RF_Pin */
  GPIO_InitStruct.Pin = IO_RF_Pin;
 8000b4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b54:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IO_RF_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	480b      	ldr	r0, [pc, #44]	; (8000b94 <MX_GPIO_Init+0x198>)
 8000b66:	f001 f839 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_PPS_Pin */
  GPIO_InitStruct.Pin = GPS_PPS_Pin;
 8000b6a:	2380      	movs	r3, #128	; 0x80
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_PPS_GPIO_Port, &GPIO_InitStruct);
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <MX_GPIO_Init+0x19c>)
 8000b80:	f001 f82c 	bl	8001bdc <HAL_GPIO_Init>

}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	; 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40020800 	.word	0x40020800
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020400 	.word	0x40020400

08000b9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000ba4:	f00c fc3a 	bl	800d41c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f009 fdc8 	bl	800a73e <osDelay>
 8000bae:	e7fb      	b.n	8000ba8 <StartDefaultTask+0xc>

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b12      	ldr	r3, [pc, #72]	; (8000c10 <HAL_MspInit+0x54>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a11      	ldr	r2, [pc, #68]	; (8000c10 <HAL_MspInit+0x54>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b0f      	ldr	r3, [pc, #60]	; (8000c10 <HAL_MspInit+0x54>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	603b      	str	r3, [r7, #0]
 8000be2:	4b0b      	ldr	r3, [pc, #44]	; (8000c10 <HAL_MspInit+0x54>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <HAL_MspInit+0x54>)
 8000be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <HAL_MspInit+0x54>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	210f      	movs	r1, #15
 8000bfe:	f06f 0001 	mvn.w	r0, #1
 8000c02:	f000 ff06 	bl	8001a12 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800

08000c14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08a      	sub	sp, #40	; 0x28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a24      	ldr	r2, [pc, #144]	; (8000cc4 <HAL_ADC_MspInit+0xb0>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d141      	bne.n	8000cba <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b23      	ldr	r3, [pc, #140]	; (8000cc8 <HAL_ADC_MspInit+0xb4>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a22      	ldr	r2, [pc, #136]	; (8000cc8 <HAL_ADC_MspInit+0xb4>)
 8000c40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b20      	ldr	r3, [pc, #128]	; (8000cc8 <HAL_ADC_MspInit+0xb4>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <HAL_ADC_MspInit+0xb4>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a1b      	ldr	r2, [pc, #108]	; (8000cc8 <HAL_ADC_MspInit+0xb4>)
 8000c5c:	f043 0304 	orr.w	r3, r3, #4
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b19      	ldr	r3, [pc, #100]	; (8000cc8 <HAL_ADC_MspInit+0xb4>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0304 	and.w	r3, r3, #4
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_ADC_MspInit+0xb4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <HAL_ADC_MspInit+0xb4>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_ADC_MspInit+0xb4>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN10
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = BATT_VOLT_READ_Pin;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(BATT_VOLT_READ_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480b      	ldr	r0, [pc, #44]	; (8000ccc <HAL_ADC_MspInit+0xb8>)
 8000c9e:	f000 ff9d 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DROGUE_CONT_Pin|MAIN_CONT_Pin;
 8000ca2:	2303      	movs	r3, #3
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <HAL_ADC_MspInit+0xbc>)
 8000cb6:	f000 ff91 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40012100 	.word	0x40012100
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020800 	.word	0x40020800
 8000cd0:	40020400 	.word	0x40020400

08000cd4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a0b      	ldr	r2, [pc, #44]	; (8000d10 <HAL_CRC_MspInit+0x3c>)
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	d10d      	bne.n	8000d02 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_CRC_MspInit+0x40>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a09      	ldr	r2, [pc, #36]	; (8000d14 <HAL_CRC_MspInit+0x40>)
 8000cf0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <HAL_CRC_MspInit+0x40>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d02:	bf00      	nop
 8000d04:	3714      	adds	r7, #20
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023000 	.word	0x40023000
 8000d14:	40023800 	.word	0x40023800

08000d18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a19      	ldr	r2, [pc, #100]	; (8000d9c <HAL_I2C_MspInit+0x84>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d12c      	bne.n	8000d94 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b18      	ldr	r3, [pc, #96]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d56:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5c:	2312      	movs	r3, #18
 8000d5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d64:	2303      	movs	r3, #3
 8000d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d6c:	f107 0314 	add.w	r3, r7, #20
 8000d70:	4619      	mov	r1, r3
 8000d72:	480c      	ldr	r0, [pc, #48]	; (8000da4 <HAL_I2C_MspInit+0x8c>)
 8000d74:	f000 ff32 	bl	8001bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4b08      	ldr	r3, [pc, #32]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	4a07      	ldr	r2, [pc, #28]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
 8000d88:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <HAL_I2C_MspInit+0x88>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d94:	bf00      	nop
 8000d96:	3728      	adds	r7, #40	; 0x28
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40005800 	.word	0x40005800
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020400 	.word	0x40020400

08000da8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08a      	sub	sp, #40	; 0x28
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a28      	ldr	r2, [pc, #160]	; (8000e68 <HAL_SD_MspInit+0xc0>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d14a      	bne.n	8000e60 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	613b      	str	r3, [r7, #16]
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <HAL_SD_MspInit+0xc4>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a26      	ldr	r2, [pc, #152]	; (8000e6c <HAL_SD_MspInit+0xc4>)
 8000dd4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <HAL_SD_MspInit+0xc4>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <HAL_SD_MspInit+0xc4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a1f      	ldr	r2, [pc, #124]	; (8000e6c <HAL_SD_MspInit+0xc4>)
 8000df0:	f043 0304 	orr.w	r3, r3, #4
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <HAL_SD_MspInit+0xc4>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0304 	and.w	r3, r3, #4
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	4b19      	ldr	r3, [pc, #100]	; (8000e6c <HAL_SD_MspInit+0xc4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a18      	ldr	r2, [pc, #96]	; (8000e6c <HAL_SD_MspInit+0xc4>)
 8000e0c:	f043 0308 	orr.w	r3, r3, #8
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <HAL_SD_MspInit+0xc4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0308 	and.w	r3, r3, #8
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e1e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e22:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e30:	230c      	movs	r3, #12
 8000e32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	480d      	ldr	r0, [pc, #52]	; (8000e70 <HAL_SD_MspInit+0xc8>)
 8000e3c:	f000 fece 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e40:	2304      	movs	r3, #4
 8000e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e50:	230c      	movs	r3, #12
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4806      	ldr	r0, [pc, #24]	; (8000e74 <HAL_SD_MspInit+0xcc>)
 8000e5c:	f000 febe 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	; 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40012c00 	.word	0x40012c00
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020800 	.word	0x40020800
 8000e74:	40020c00 	.word	0x40020c00

08000e78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b090      	sub	sp, #64	; 0x40
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a6a      	ldr	r2, [pc, #424]	; (8001040 <HAL_SPI_MspInit+0x1c8>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d12c      	bne.n	8000ef4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e9e:	4b69      	ldr	r3, [pc, #420]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a68      	ldr	r2, [pc, #416]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000ea4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b66      	ldr	r3, [pc, #408]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8000eba:	4b62      	ldr	r3, [pc, #392]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	4a61      	ldr	r2, [pc, #388]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec6:	4b5f      	ldr	r3, [pc, #380]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
 8000ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000ed2:	23f0      	movs	r3, #240	; 0xf0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ede:	2303      	movs	r3, #3
 8000ee0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eea:	4619      	mov	r1, r3
 8000eec:	4856      	ldr	r0, [pc, #344]	; (8001048 <HAL_SPI_MspInit+0x1d0>)
 8000eee:	f000 fe75 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ef2:	e0a0      	b.n	8001036 <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a54      	ldr	r2, [pc, #336]	; (800104c <HAL_SPI_MspInit+0x1d4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d14b      	bne.n	8000f96 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
 8000f02:	4b50      	ldr	r3, [pc, #320]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a4f      	ldr	r2, [pc, #316]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b4d      	ldr	r3, [pc, #308]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f16:	623b      	str	r3, [r7, #32]
 8000f18:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
 8000f1e:	4b49      	ldr	r3, [pc, #292]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a48      	ldr	r2, [pc, #288]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b46      	ldr	r3, [pc, #280]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	61fb      	str	r3, [r7, #28]
 8000f34:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	61bb      	str	r3, [r7, #24]
 8000f3a:	4b42      	ldr	r3, [pc, #264]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	4a41      	ldr	r2, [pc, #260]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000f40:	f043 0302 	orr.w	r3, r3, #2
 8000f44:	6313      	str	r3, [r2, #48]	; 0x30
 8000f46:	4b3f      	ldr	r3, [pc, #252]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	f003 0302 	and.w	r3, r3, #2
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f52:	230c      	movs	r3, #12
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f62:	2305      	movs	r3, #5
 8000f64:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4838      	ldr	r0, [pc, #224]	; (8001050 <HAL_SPI_MspInit+0x1d8>)
 8000f6e:	f000 fe35 	bl	8001bdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f84:	2305      	movs	r3, #5
 8000f86:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4831      	ldr	r0, [pc, #196]	; (8001054 <HAL_SPI_MspInit+0x1dc>)
 8000f90:	f000 fe24 	bl	8001bdc <HAL_GPIO_Init>
}
 8000f94:	e04f      	b.n	8001036 <HAL_SPI_MspInit+0x1be>
  else if(hspi->Instance==SPI3)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a2f      	ldr	r2, [pc, #188]	; (8001058 <HAL_SPI_MspInit+0x1e0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d14a      	bne.n	8001036 <HAL_SPI_MspInit+0x1be>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	4a26      	ldr	r2, [pc, #152]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fae:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb0:	4b24      	ldr	r3, [pc, #144]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
 8000fc0:	4b20      	ldr	r3, [pc, #128]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	4a1f      	ldr	r2, [pc, #124]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6313      	str	r3, [r2, #48]	; 0x30
 8000fcc:	4b1d      	ldr	r3, [pc, #116]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	4a18      	ldr	r2, [pc, #96]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000fe2:	f043 0302 	orr.w	r3, r3, #2
 8000fe6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_SPI_MspInit+0x1cc>)
 8000fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001006:	2306      	movs	r3, #6
 8001008:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800100e:	4619      	mov	r1, r3
 8001010:	480d      	ldr	r0, [pc, #52]	; (8001048 <HAL_SPI_MspInit+0x1d0>)
 8001012:	f000 fde3 	bl	8001bdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001016:	2338      	movs	r3, #56	; 0x38
 8001018:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001026:	2306      	movs	r3, #6
 8001028:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102e:	4619      	mov	r1, r3
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <HAL_SPI_MspInit+0x1dc>)
 8001032:	f000 fdd3 	bl	8001bdc <HAL_GPIO_Init>
}
 8001036:	bf00      	nop
 8001038:	3740      	adds	r7, #64	; 0x40
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40013000 	.word	0x40013000
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000
 800104c:	40003800 	.word	0x40003800
 8001050:	40020800 	.word	0x40020800
 8001054:	40020400 	.word	0x40020400
 8001058:	40003c00 	.word	0x40003c00

0800105c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <HAL_TIM_Base_MspInit+0x3c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d10d      	bne.n	800108a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b0a      	ldr	r3, [pc, #40]	; (800109c <HAL_TIM_Base_MspInit+0x40>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	4a09      	ldr	r2, [pc, #36]	; (800109c <HAL_TIM_Base_MspInit+0x40>)
 8001078:	f043 0302 	orr.w	r3, r3, #2
 800107c:	6413      	str	r3, [r2, #64]	; 0x40
 800107e:	4b07      	ldr	r3, [pc, #28]	; (800109c <HAL_TIM_Base_MspInit+0x40>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800108a:	bf00      	nop
 800108c:	3714      	adds	r7, #20
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40000400 	.word	0x40000400
 800109c:	40023800 	.word	0x40023800

080010a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	; 0x30
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	f107 031c 	add.w	r3, r7, #28
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]
 80010b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a32      	ldr	r2, [pc, #200]	; (8001188 <HAL_UART_MspInit+0xe8>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12d      	bne.n	800111e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	61bb      	str	r3, [r7, #24]
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <HAL_UART_MspInit+0xec>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a30      	ldr	r2, [pc, #192]	; (800118c <HAL_UART_MspInit+0xec>)
 80010cc:	f043 0310 	orr.w	r3, r3, #16
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b2e      	ldr	r3, [pc, #184]	; (800118c <HAL_UART_MspInit+0xec>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f003 0310 	and.w	r3, r3, #16
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <HAL_UART_MspInit+0xec>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a29      	ldr	r2, [pc, #164]	; (800118c <HAL_UART_MspInit+0xec>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
 80010ee:	4b27      	ldr	r3, [pc, #156]	; (800118c <HAL_UART_MspInit+0xec>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001108:	2303      	movs	r3, #3
 800110a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800110c:	2307      	movs	r3, #7
 800110e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001110:	f107 031c 	add.w	r3, r7, #28
 8001114:	4619      	mov	r1, r3
 8001116:	481e      	ldr	r0, [pc, #120]	; (8001190 <HAL_UART_MspInit+0xf0>)
 8001118:	f000 fd60 	bl	8001bdc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800111c:	e030      	b.n	8001180 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <HAL_UART_MspInit+0xf4>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d12b      	bne.n	8001180 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_UART_MspInit+0xec>)
 800112e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001130:	4a16      	ldr	r2, [pc, #88]	; (800118c <HAL_UART_MspInit+0xec>)
 8001132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001136:	6413      	str	r3, [r2, #64]	; 0x40
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_UART_MspInit+0xec>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_UART_MspInit+0xec>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114c:	4a0f      	ldr	r2, [pc, #60]	; (800118c <HAL_UART_MspInit+0xec>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6313      	str	r3, [r2, #48]	; 0x30
 8001154:	4b0d      	ldr	r3, [pc, #52]	; (800118c <HAL_UART_MspInit+0xec>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001160:	230c      	movs	r3, #12
 8001162:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116c:	2303      	movs	r3, #3
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001170:	2307      	movs	r3, #7
 8001172:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001174:	f107 031c 	add.w	r3, r7, #28
 8001178:	4619      	mov	r1, r3
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <HAL_UART_MspInit+0xf0>)
 800117c:	f000 fd2e 	bl	8001bdc <HAL_GPIO_Init>
}
 8001180:	bf00      	nop
 8001182:	3730      	adds	r7, #48	; 0x30
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40011000 	.word	0x40011000
 800118c:	40023800 	.word	0x40023800
 8001190:	40020000 	.word	0x40020000
 8001194:	40004400 	.word	0x40004400

08001198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800119c:	e7fe      	b.n	800119c <NMI_Handler+0x4>

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c8:	f000 f8a2 	bl	8001310 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80011cc:	f00b f8c2 	bl	800c354 <xTaskGetSchedulerState>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d001      	beq.n	80011da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80011d6:	f00b fea7 	bl	800cf28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
	...

080011e0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <OTG_HS_IRQHandler+0x10>)
 80011e6:	f001 f95b 	bl	80024a0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	2000626c 	.word	0x2000626c

080011f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011f8:	4b06      	ldr	r3, [pc, #24]	; (8001214 <SystemInit+0x20>)
 80011fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011fe:	4a05      	ldr	r2, [pc, #20]	; (8001214 <SystemInit+0x20>)
 8001200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001250 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800121c:	480d      	ldr	r0, [pc, #52]	; (8001254 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800121e:	490e      	ldr	r1, [pc, #56]	; (8001258 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001220:	4a0e      	ldr	r2, [pc, #56]	; (800125c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001224:	e002      	b.n	800122c <LoopCopyDataInit>

08001226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800122a:	3304      	adds	r3, #4

0800122c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800122c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800122e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001230:	d3f9      	bcc.n	8001226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001232:	4a0b      	ldr	r2, [pc, #44]	; (8001260 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001234:	4c0b      	ldr	r4, [pc, #44]	; (8001264 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001238:	e001      	b.n	800123e <LoopFillZerobss>

0800123a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800123a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800123c:	3204      	adds	r2, #4

0800123e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800123e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001240:	d3fb      	bcc.n	800123a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001242:	f7ff ffd7 	bl	80011f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001246:	f00c fddf 	bl	800de08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800124a:	f7ff f943 	bl	80004d4 <main>
  bx  lr    
 800124e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001258:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 800125c:	0800df60 	.word	0x0800df60
  ldr r2, =_sbss
 8001260:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001264:	20006998 	.word	0x20006998

08001268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001268:	e7fe      	b.n	8001268 <ADC_IRQHandler>
	...

0800126c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001270:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <HAL_Init+0x40>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0d      	ldr	r2, [pc, #52]	; (80012ac <HAL_Init+0x40>)
 8001276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800127a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800127c:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_Init+0x40>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0a      	ldr	r2, [pc, #40]	; (80012ac <HAL_Init+0x40>)
 8001282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <HAL_Init+0x40>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a07      	ldr	r2, [pc, #28]	; (80012ac <HAL_Init+0x40>)
 800128e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001294:	2003      	movs	r0, #3
 8001296:	f000 fbb1 	bl	80019fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800129a:	200f      	movs	r0, #15
 800129c:	f000 f808 	bl	80012b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012a0:	f7ff fc8c 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023c00 	.word	0x40023c00

080012b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_InitTick+0x54>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <HAL_InitTick+0x58>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	4619      	mov	r1, r3
 80012c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fbc9 	bl	8001a66 <HAL_SYSTICK_Config>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e00e      	b.n	80012fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2b0f      	cmp	r3, #15
 80012e2:	d80a      	bhi.n	80012fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e4:	2200      	movs	r2, #0
 80012e6:	6879      	ldr	r1, [r7, #4]
 80012e8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ec:	f000 fb91 	bl	8001a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012f0:	4a06      	ldr	r2, [pc, #24]	; (800130c <HAL_InitTick+0x5c>)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
 80012f8:	e000      	b.n	80012fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000000 	.word	0x20000000
 8001308:	20000008 	.word	0x20000008
 800130c:	20000004 	.word	0x20000004

08001310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_IncTick+0x20>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	461a      	mov	r2, r3
 800131a:	4b06      	ldr	r3, [pc, #24]	; (8001334 <HAL_IncTick+0x24>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4413      	add	r3, r2
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_IncTick+0x24>)
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	20000008 	.word	0x20000008
 8001334:	20000420 	.word	0x20000420

08001338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <HAL_GetTick+0x14>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	20000420 	.word	0x20000420

08001350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001358:	f7ff ffee 	bl	8001338 <HAL_GetTick>
 800135c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001368:	d005      	beq.n	8001376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800136a:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <HAL_Delay+0x44>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	461a      	mov	r2, r3
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4413      	add	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001376:	bf00      	nop
 8001378:	f7ff ffde 	bl	8001338 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	429a      	cmp	r2, r3
 8001386:	d8f7      	bhi.n	8001378 <HAL_Delay+0x28>
  {
  }
}
 8001388:	bf00      	nop
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000008 	.word	0x20000008

08001398 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d101      	bne.n	80013ae <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e033      	b.n	8001416 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d109      	bne.n	80013ca <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fc2c 	bl	8000c14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d118      	bne.n	8001408 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80013de:	f023 0302 	bic.w	r3, r3, #2
 80013e2:	f043 0202 	orr.w	r2, r3, #2
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 f93a 	bl	8001664 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f023 0303 	bic.w	r3, r3, #3
 80013fe:	f043 0201 	orr.w	r2, r3, #1
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	641a      	str	r2, [r3, #64]	; 0x40
 8001406:	e001      	b.n	800140c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2200      	movs	r2, #0
 8001410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001414:	7bfb      	ldrb	r3, [r7, #15]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3710      	adds	r7, #16
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
	...

08001420 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001434:	2b01      	cmp	r3, #1
 8001436:	d101      	bne.n	800143c <HAL_ADC_ConfigChannel+0x1c>
 8001438:	2302      	movs	r3, #2
 800143a:	e105      	b.n	8001648 <HAL_ADC_ConfigChannel+0x228>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2201      	movs	r2, #1
 8001440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b09      	cmp	r3, #9
 800144a:	d925      	bls.n	8001498 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68d9      	ldr	r1, [r3, #12]
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	b29b      	uxth	r3, r3
 8001458:	461a      	mov	r2, r3
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	3b1e      	subs	r3, #30
 8001462:	2207      	movs	r2, #7
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43da      	mvns	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	400a      	ands	r2, r1
 8001470:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	68d9      	ldr	r1, [r3, #12]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689a      	ldr	r2, [r3, #8]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b29b      	uxth	r3, r3
 8001482:	4618      	mov	r0, r3
 8001484:	4603      	mov	r3, r0
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	4403      	add	r3, r0
 800148a:	3b1e      	subs	r3, #30
 800148c:	409a      	lsls	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	e022      	b.n	80014de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6919      	ldr	r1, [r3, #16]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	461a      	mov	r2, r3
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	2207      	movs	r2, #7
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	400a      	ands	r2, r1
 80014ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6919      	ldr	r1, [r3, #16]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	4603      	mov	r3, r0
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	4403      	add	r3, r0
 80014d4:	409a      	lsls	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d824      	bhi.n	8001530 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	3b05      	subs	r3, #5
 80014f8:	221f      	movs	r2, #31
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	400a      	ands	r2, r1
 8001506:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	b29b      	uxth	r3, r3
 8001514:	4618      	mov	r0, r3
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	3b05      	subs	r3, #5
 8001522:	fa00 f203 	lsl.w	r2, r0, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	635a      	str	r2, [r3, #52]	; 0x34
 800152e:	e04c      	b.n	80015ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	2b0c      	cmp	r3, #12
 8001536:	d824      	bhi.n	8001582 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	4413      	add	r3, r2
 8001548:	3b23      	subs	r3, #35	; 0x23
 800154a:	221f      	movs	r2, #31
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43da      	mvns	r2, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	400a      	ands	r2, r1
 8001558:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	b29b      	uxth	r3, r3
 8001566:	4618      	mov	r0, r3
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	3b23      	subs	r3, #35	; 0x23
 8001574:	fa00 f203 	lsl.w	r2, r0, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
 8001580:	e023      	b.n	80015ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	4613      	mov	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	4413      	add	r3, r2
 8001592:	3b41      	subs	r3, #65	; 0x41
 8001594:	221f      	movs	r2, #31
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	400a      	ands	r2, r1
 80015a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	4618      	mov	r0, r3
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	4413      	add	r3, r2
 80015bc:	3b41      	subs	r3, #65	; 0x41
 80015be:	fa00 f203 	lsl.w	r2, r0, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	430a      	orrs	r2, r1
 80015c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <HAL_ADC_ConfigChannel+0x234>)
 80015cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a21      	ldr	r2, [pc, #132]	; (8001658 <HAL_ADC_ConfigChannel+0x238>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d109      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1cc>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b12      	cmp	r3, #18
 80015de:	d105      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a19      	ldr	r2, [pc, #100]	; (8001658 <HAL_ADC_ConfigChannel+0x238>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d123      	bne.n	800163e <HAL_ADC_ConfigChannel+0x21e>
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b10      	cmp	r3, #16
 80015fc:	d003      	beq.n	8001606 <HAL_ADC_ConfigChannel+0x1e6>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b11      	cmp	r3, #17
 8001604:	d11b      	bne.n	800163e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2b10      	cmp	r3, #16
 8001618:	d111      	bne.n	800163e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_ADC_ConfigChannel+0x23c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a10      	ldr	r2, [pc, #64]	; (8001660 <HAL_ADC_ConfigChannel+0x240>)
 8001620:	fba2 2303 	umull	r2, r3, r2, r3
 8001624:	0c9a      	lsrs	r2, r3, #18
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001630:	e002      	b.n	8001638 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	3b01      	subs	r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f9      	bne.n	8001632 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001646:	2300      	movs	r3, #0
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40012300 	.word	0x40012300
 8001658:	40012000 	.word	0x40012000
 800165c:	20000000 	.word	0x20000000
 8001660:	431bde83 	.word	0x431bde83

08001664 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800166c:	4b79      	ldr	r3, [pc, #484]	; (8001854 <ADC_Init+0x1f0>)
 800166e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	431a      	orrs	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6859      	ldr	r1, [r3, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	021a      	lsls	r2, r3, #8
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6899      	ldr	r1, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f6:	4a58      	ldr	r2, [pc, #352]	; (8001858 <ADC_Init+0x1f4>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d022      	beq.n	8001742 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689a      	ldr	r2, [r3, #8]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800170a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6899      	ldr	r1, [r3, #8]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800172c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6899      	ldr	r1, [r3, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	e00f      	b.n	8001762 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001760:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0202 	bic.w	r2, r2, #2
 8001770:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6899      	ldr	r1, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	7e1b      	ldrb	r3, [r3, #24]
 800177c:	005a      	lsls	r2, r3, #1
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d01b      	beq.n	80017c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800179e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6859      	ldr	r1, [r3, #4]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ba:	3b01      	subs	r3, #1
 80017bc:	035a      	lsls	r2, r3, #13
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	e007      	b.n	80017d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	3b01      	subs	r3, #1
 80017f4:	051a      	lsls	r2, r3, #20
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800180c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6899      	ldr	r1, [r3, #8]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800181a:	025a      	lsls	r2, r3, #9
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001832:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6899      	ldr	r1, [r3, #8]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	029a      	lsls	r2, r3, #10
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	609a      	str	r2, [r3, #8]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40012300 	.word	0x40012300
 8001858:	0f000001 	.word	0x0f000001

0800185c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001872:	68ba      	ldr	r2, [r7, #8]
 8001874:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001878:	4013      	ands	r3, r2
 800187a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001884:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800188c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188e:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	60d3      	str	r3, [r2, #12]
}
 8001894:	bf00      	nop
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a8:	4b04      	ldr	r3, [pc, #16]	; (80018bc <__NVIC_GetPriorityGrouping+0x18>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	0a1b      	lsrs	r3, r3, #8
 80018ae:	f003 0307 	and.w	r3, r3, #7
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	db0b      	blt.n	80018ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d2:	79fb      	ldrb	r3, [r7, #7]
 80018d4:	f003 021f 	and.w	r2, r3, #31
 80018d8:	4907      	ldr	r1, [pc, #28]	; (80018f8 <__NVIC_EnableIRQ+0x38>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	2001      	movs	r0, #1
 80018e2:	fa00 f202 	lsl.w	r2, r0, r2
 80018e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ea:	bf00      	nop
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000e100 	.word	0xe000e100

080018fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	6039      	str	r1, [r7, #0]
 8001906:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001908:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190c:	2b00      	cmp	r3, #0
 800190e:	db0a      	blt.n	8001926 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	b2da      	uxtb	r2, r3
 8001914:	490c      	ldr	r1, [pc, #48]	; (8001948 <__NVIC_SetPriority+0x4c>)
 8001916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191a:	0112      	lsls	r2, r2, #4
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	440b      	add	r3, r1
 8001920:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001924:	e00a      	b.n	800193c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	b2da      	uxtb	r2, r3
 800192a:	4908      	ldr	r1, [pc, #32]	; (800194c <__NVIC_SetPriority+0x50>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	f003 030f 	and.w	r3, r3, #15
 8001932:	3b04      	subs	r3, #4
 8001934:	0112      	lsls	r2, r2, #4
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	440b      	add	r3, r1
 800193a:	761a      	strb	r2, [r3, #24]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	e000e100 	.word	0xe000e100
 800194c:	e000ed00 	.word	0xe000ed00

08001950 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001950:	b480      	push	{r7}
 8001952:	b089      	sub	sp, #36	; 0x24
 8001954:	af00      	add	r7, sp, #0
 8001956:	60f8      	str	r0, [r7, #12]
 8001958:	60b9      	str	r1, [r7, #8]
 800195a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	f1c3 0307 	rsb	r3, r3, #7
 800196a:	2b04      	cmp	r3, #4
 800196c:	bf28      	it	cs
 800196e:	2304      	movcs	r3, #4
 8001970:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3304      	adds	r3, #4
 8001976:	2b06      	cmp	r3, #6
 8001978:	d902      	bls.n	8001980 <NVIC_EncodePriority+0x30>
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	3b03      	subs	r3, #3
 800197e:	e000      	b.n	8001982 <NVIC_EncodePriority+0x32>
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001984:	f04f 32ff 	mov.w	r2, #4294967295
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43da      	mvns	r2, r3
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	401a      	ands	r2, r3
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001998:	f04f 31ff 	mov.w	r1, #4294967295
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	fa01 f303 	lsl.w	r3, r1, r3
 80019a2:	43d9      	mvns	r1, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	4313      	orrs	r3, r2
         );
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3724      	adds	r7, #36	; 0x24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019c8:	d301      	bcc.n	80019ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ca:	2301      	movs	r3, #1
 80019cc:	e00f      	b.n	80019ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ce:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <SysTick_Config+0x40>)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019d6:	210f      	movs	r1, #15
 80019d8:	f04f 30ff 	mov.w	r0, #4294967295
 80019dc:	f7ff ff8e 	bl	80018fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <SysTick_Config+0x40>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019e6:	4b04      	ldr	r3, [pc, #16]	; (80019f8 <SysTick_Config+0x40>)
 80019e8:	2207      	movs	r2, #7
 80019ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	e000e010 	.word	0xe000e010

080019fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	f7ff ff29 	bl	800185c <__NVIC_SetPriorityGrouping>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	4603      	mov	r3, r0
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
 8001a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a24:	f7ff ff3e 	bl	80018a4 <__NVIC_GetPriorityGrouping>
 8001a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	68b9      	ldr	r1, [r7, #8]
 8001a2e:	6978      	ldr	r0, [r7, #20]
 8001a30:	f7ff ff8e 	bl	8001950 <NVIC_EncodePriority>
 8001a34:	4602      	mov	r2, r0
 8001a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff5d 	bl	80018fc <__NVIC_SetPriority>
}
 8001a42:	bf00      	nop
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	4603      	mov	r3, r0
 8001a52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff ff31 	bl	80018c0 <__NVIC_EnableIRQ>
}
 8001a5e:	bf00      	nop
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b082      	sub	sp, #8
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff ffa2 	bl	80019b8 <SysTick_Config>
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e00e      	b.n	8001aae <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	795b      	ldrb	r3, [r3, #5]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d105      	bne.n	8001aa6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff f917 	bl	8000cd4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b086      	sub	sp, #24
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	60f8      	str	r0, [r7, #12]
 8001abe:	60b9      	str	r1, [r7, #8]
 8001ac0:	607a      	str	r2, [r7, #4]
 8001ac2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001acc:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_DMA_Start_IT+0x26>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e040      	b.n	8001b5e <HAL_DMA_Start_IT+0xa8>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d12f      	bne.n	8001b50 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	68b9      	ldr	r1, [r7, #8]
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 f83a 	bl	8001b7e <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b0e:	223f      	movs	r2, #63	; 0x3f
 8001b10:	409a      	lsls	r2, r3
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f042 0216 	orr.w	r2, r2, #22
 8001b24:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d007      	beq.n	8001b3e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f042 0208 	orr.w	r2, r2, #8
 8001b3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f042 0201 	orr.w	r2, r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	e005      	b.n	8001b5c <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b58:	2302      	movs	r3, #2
 8001b5a:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b085      	sub	sp, #20
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001b9a:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b40      	cmp	r3, #64	; 0x40
 8001baa:	d108      	bne.n	8001bbe <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68ba      	ldr	r2, [r7, #8]
 8001bba:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bbc:	e007      	b.n	8001bce <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	60da      	str	r2, [r3, #12]
}
 8001bce:	bf00      	nop
 8001bd0:	3714      	adds	r7, #20
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
 8001bf6:	e16b      	b.n	8001ed0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	f040 815a 	bne.w	8001eca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d005      	beq.n	8001c2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d130      	bne.n	8001c90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	68da      	ldr	r2, [r3, #12]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c64:	2201      	movs	r2, #1
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 0201 	and.w	r2, r3, #1
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d017      	beq.n	8001ccc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	2203      	movs	r2, #3
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d123      	bne.n	8001d20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	220f      	movs	r2, #15
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	691a      	ldr	r2, [r3, #16]
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	08da      	lsrs	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	3208      	adds	r2, #8
 8001d1a:	69b9      	ldr	r1, [r7, #24]
 8001d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	2203      	movs	r2, #3
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43db      	mvns	r3, r3
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	4013      	ands	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 80b4 	beq.w	8001eca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d62:	2300      	movs	r3, #0
 8001d64:	60fb      	str	r3, [r7, #12]
 8001d66:	4b60      	ldr	r3, [pc, #384]	; (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a5f      	ldr	r2, [pc, #380]	; (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b5d      	ldr	r3, [pc, #372]	; (8001ee8 <HAL_GPIO_Init+0x30c>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d7e:	4a5b      	ldr	r2, [pc, #364]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a52      	ldr	r2, [pc, #328]	; (8001ef0 <HAL_GPIO_Init+0x314>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d02b      	beq.n	8001e02 <HAL_GPIO_Init+0x226>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a51      	ldr	r2, [pc, #324]	; (8001ef4 <HAL_GPIO_Init+0x318>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d025      	beq.n	8001dfe <HAL_GPIO_Init+0x222>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a50      	ldr	r2, [pc, #320]	; (8001ef8 <HAL_GPIO_Init+0x31c>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d01f      	beq.n	8001dfa <HAL_GPIO_Init+0x21e>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4f      	ldr	r2, [pc, #316]	; (8001efc <HAL_GPIO_Init+0x320>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d019      	beq.n	8001df6 <HAL_GPIO_Init+0x21a>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4e      	ldr	r2, [pc, #312]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d013      	beq.n	8001df2 <HAL_GPIO_Init+0x216>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4d      	ldr	r2, [pc, #308]	; (8001f04 <HAL_GPIO_Init+0x328>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d00d      	beq.n	8001dee <HAL_GPIO_Init+0x212>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4c      	ldr	r2, [pc, #304]	; (8001f08 <HAL_GPIO_Init+0x32c>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d007      	beq.n	8001dea <HAL_GPIO_Init+0x20e>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4b      	ldr	r2, [pc, #300]	; (8001f0c <HAL_GPIO_Init+0x330>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d101      	bne.n	8001de6 <HAL_GPIO_Init+0x20a>
 8001de2:	2307      	movs	r3, #7
 8001de4:	e00e      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001de6:	2308      	movs	r3, #8
 8001de8:	e00c      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001dea:	2306      	movs	r3, #6
 8001dec:	e00a      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001dee:	2305      	movs	r3, #5
 8001df0:	e008      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001df2:	2304      	movs	r3, #4
 8001df4:	e006      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001df6:	2303      	movs	r3, #3
 8001df8:	e004      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_GPIO_Init+0x228>
 8001e02:	2300      	movs	r3, #0
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	f002 0203 	and.w	r2, r2, #3
 8001e0a:	0092      	lsls	r2, r2, #2
 8001e0c:	4093      	lsls	r3, r2
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e14:	4935      	ldr	r1, [pc, #212]	; (8001eec <HAL_GPIO_Init+0x310>)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e22:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e46:	4a32      	ldr	r2, [pc, #200]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e4c:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e70:	4a27      	ldr	r2, [pc, #156]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e76:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e9a:	4a1d      	ldr	r2, [pc, #116]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea0:	4b1b      	ldr	r3, [pc, #108]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec4:	4a12      	ldr	r2, [pc, #72]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b0f      	cmp	r3, #15
 8001ed4:	f67f ae90 	bls.w	8001bf8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40013800 	.word	0x40013800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	40020c00 	.word	0x40020c00
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40021400 	.word	0x40021400
 8001f08:	40021800 	.word	0x40021800
 8001f0c:	40021c00 	.word	0x40021c00
 8001f10:	40013c00 	.word	0x40013c00

08001f14 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	887b      	ldrh	r3, [r7, #2]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	73fb      	strb	r3, [r7, #15]
 8001f30:	e001      	b.n	8001f36 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f32:	2300      	movs	r3, #0
 8001f34:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
 8001f50:	4613      	mov	r3, r2
 8001f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f54:	787b      	ldrb	r3, [r7, #1]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f60:	e003      	b.n	8001f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f62:	887b      	ldrh	r3, [r7, #2]
 8001f64:	041a      	lsls	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	619a      	str	r2, [r3, #24]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e12b      	b.n	80021e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d106      	bne.n	8001fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7fe feba 	bl	8000d18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2224      	movs	r2, #36	; 0x24
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fdc:	f001 ffbe 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 8001fe0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4a81      	ldr	r2, [pc, #516]	; (80021ec <HAL_I2C_Init+0x274>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d807      	bhi.n	8001ffc <HAL_I2C_Init+0x84>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a80      	ldr	r2, [pc, #512]	; (80021f0 <HAL_I2C_Init+0x278>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	bf94      	ite	ls
 8001ff4:	2301      	movls	r3, #1
 8001ff6:	2300      	movhi	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	e006      	b.n	800200a <HAL_I2C_Init+0x92>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4a7d      	ldr	r2, [pc, #500]	; (80021f4 <HAL_I2C_Init+0x27c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	bf94      	ite	ls
 8002004:	2301      	movls	r3, #1
 8002006:	2300      	movhi	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0e7      	b.n	80021e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4a78      	ldr	r2, [pc, #480]	; (80021f8 <HAL_I2C_Init+0x280>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	0c9b      	lsrs	r3, r3, #18
 800201c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	430a      	orrs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4a6a      	ldr	r2, [pc, #424]	; (80021ec <HAL_I2C_Init+0x274>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d802      	bhi.n	800204c <HAL_I2C_Init+0xd4>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	3301      	adds	r3, #1
 800204a:	e009      	b.n	8002060 <HAL_I2C_Init+0xe8>
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	4a69      	ldr	r2, [pc, #420]	; (80021fc <HAL_I2C_Init+0x284>)
 8002058:	fba2 2303 	umull	r2, r3, r2, r3
 800205c:	099b      	lsrs	r3, r3, #6
 800205e:	3301      	adds	r3, #1
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	430b      	orrs	r3, r1
 8002066:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002072:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	495c      	ldr	r1, [pc, #368]	; (80021ec <HAL_I2C_Init+0x274>)
 800207c:	428b      	cmp	r3, r1
 800207e:	d819      	bhi.n	80020b4 <HAL_I2C_Init+0x13c>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1e59      	subs	r1, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fbb1 f3f3 	udiv	r3, r1, r3
 800208e:	1c59      	adds	r1, r3, #1
 8002090:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002094:	400b      	ands	r3, r1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_I2C_Init+0x138>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1e59      	subs	r1, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a8:	3301      	adds	r3, #1
 80020aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ae:	e051      	b.n	8002154 <HAL_I2C_Init+0x1dc>
 80020b0:	2304      	movs	r3, #4
 80020b2:	e04f      	b.n	8002154 <HAL_I2C_Init+0x1dc>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d111      	bne.n	80020e0 <HAL_I2C_Init+0x168>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1e58      	subs	r0, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	440b      	add	r3, r1
 80020ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	e012      	b.n	8002106 <HAL_I2C_Init+0x18e>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1e58      	subs	r0, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	0099      	lsls	r1, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_Init+0x196>
 800210a:	2301      	movs	r3, #1
 800210c:	e022      	b.n	8002154 <HAL_I2C_Init+0x1dc>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10e      	bne.n	8002134 <HAL_I2C_Init+0x1bc>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1e58      	subs	r0, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6859      	ldr	r1, [r3, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	440b      	add	r3, r1
 8002124:	fbb0 f3f3 	udiv	r3, r0, r3
 8002128:	3301      	adds	r3, #1
 800212a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002132:	e00f      	b.n	8002154 <HAL_I2C_Init+0x1dc>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1e58      	subs	r0, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	0099      	lsls	r1, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	fbb0 f3f3 	udiv	r3, r0, r3
 800214a:	3301      	adds	r3, #1
 800214c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002150:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	6809      	ldr	r1, [r1, #0]
 8002158:	4313      	orrs	r3, r2
 800215a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002182:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6911      	ldr	r1, [r2, #16]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68d2      	ldr	r2, [r2, #12]
 800218e:	4311      	orrs	r1, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	430b      	orrs	r3, r1
 8002196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	000186a0 	.word	0x000186a0
 80021f0:	001e847f 	.word	0x001e847f
 80021f4:	003d08ff 	.word	0x003d08ff
 80021f8:	431bde83 	.word	0x431bde83
 80021fc:	10624dd3 	.word	0x10624dd3

08002200 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002202:	b08f      	sub	sp, #60	; 0x3c
 8002204:	af0a      	add	r7, sp, #40	; 0x28
 8002206:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e10f      	b.n	8002432 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	d106      	bne.n	8002232 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f00b fad5 	bl	800d7dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2203      	movs	r2, #3
 8002236:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f004 fbd2 	bl	80069fa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	687e      	ldr	r6, [r7, #4]
 800225e:	466d      	mov	r5, sp
 8002260:	f106 0410 	add.w	r4, r6, #16
 8002264:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002266:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002268:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800226a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800226c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002270:	e885 0003 	stmia.w	r5, {r0, r1}
 8002274:	1d33      	adds	r3, r6, #4
 8002276:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002278:	6838      	ldr	r0, [r7, #0]
 800227a:	f004 faa9 	bl	80067d0 <USB_CoreInit>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2202      	movs	r2, #2
 8002288:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0d0      	b.n	8002432 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2100      	movs	r1, #0
 8002296:	4618      	mov	r0, r3
 8002298:	f004 fbc0 	bl	8006a1c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e04a      	b.n	8002338 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	333d      	adds	r3, #61	; 0x3d
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	333c      	adds	r3, #60	; 0x3c
 80022c6:	7bfa      	ldrb	r2, [r7, #15]
 80022c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	7bfb      	ldrb	r3, [r7, #15]
 80022ce:	b298      	uxth	r0, r3
 80022d0:	6879      	ldr	r1, [r7, #4]
 80022d2:	4613      	mov	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	3344      	adds	r3, #68	; 0x44
 80022de:	4602      	mov	r2, r0
 80022e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022e2:	7bfa      	ldrb	r2, [r7, #15]
 80022e4:	6879      	ldr	r1, [r7, #4]
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	3340      	adds	r3, #64	; 0x40
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	3348      	adds	r3, #72	; 0x48
 8002306:	2200      	movs	r2, #0
 8002308:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	6879      	ldr	r1, [r7, #4]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	440b      	add	r3, r1
 8002318:	334c      	adds	r3, #76	; 0x4c
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800231e:	7bfa      	ldrb	r2, [r7, #15]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	3354      	adds	r3, #84	; 0x54
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002332:	7bfb      	ldrb	r3, [r7, #15]
 8002334:	3301      	adds	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	d3af      	bcc.n	80022a2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002342:	2300      	movs	r3, #0
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e044      	b.n	80023d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	6879      	ldr	r1, [r7, #4]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	4413      	add	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800235a:	2200      	movs	r2, #0
 800235c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800235e:	7bfa      	ldrb	r2, [r7, #15]
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002370:	7bfa      	ldrb	r2, [r7, #15]
 8002372:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4413      	add	r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800238a:	7bfa      	ldrb	r2, [r7, #15]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023a0:	7bfa      	ldrb	r2, [r7, #15]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	4413      	add	r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023b2:	2200      	movs	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023b6:	7bfa      	ldrb	r2, [r7, #15]
 80023b8:	6879      	ldr	r1, [r7, #4]
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023cc:	7bfb      	ldrb	r3, [r7, #15]
 80023ce:	3301      	adds	r3, #1
 80023d0:	73fb      	strb	r3, [r7, #15]
 80023d2:	7bfa      	ldrb	r2, [r7, #15]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d3b5      	bcc.n	8002348 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	603b      	str	r3, [r7, #0]
 80023e2:	687e      	ldr	r6, [r7, #4]
 80023e4:	466d      	mov	r5, sp
 80023e6:	f106 0410 	add.w	r4, r6, #16
 80023ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80023f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80023fa:	1d33      	adds	r3, r6, #4
 80023fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023fe:	6838      	ldr	r0, [r7, #0]
 8002400:	f004 fb58 	bl	8006ab4 <USB_DevInit>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d005      	beq.n	8002416 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2202      	movs	r2, #2
 800240e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e00d      	b.n	8002432 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2201      	movs	r2, #1
 8002422:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f005 fca7 	bl	8007d7e <USB_DevDisconnect>

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800243a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b084      	sub	sp, #16
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_PCD_Start+0x1c>
 8002452:	2302      	movs	r3, #2
 8002454:	e020      	b.n	8002498 <HAL_PCD_Start+0x5e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	2b01      	cmp	r3, #1
 8002464:	d109      	bne.n	800247a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800246a:	2b01      	cmp	r3, #1
 800246c:	d005      	beq.n	800247a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002472:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f004 faaa 	bl	80069d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f005 fc57 	bl	8007d3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b08d      	sub	sp, #52	; 0x34
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f005 fd15 	bl	8007ee6 <USB_GetMode>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f040 848a 	bne.w	8002dd8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f005 fc79 	bl	8007dc0 <USB_ReadInterrupts>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 8480 	beq.w	8002dd6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	0a1b      	lsrs	r3, r3, #8
 80024e0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f005 fc66 	bl	8007dc0 <USB_ReadInterrupts>
 80024f4:	4603      	mov	r3, r0
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d107      	bne.n	800250e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	695a      	ldr	r2, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f002 0202 	and.w	r2, r2, #2
 800250c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f005 fc54 	bl	8007dc0 <USB_ReadInterrupts>
 8002518:	4603      	mov	r3, r0
 800251a:	f003 0310 	and.w	r3, r3, #16
 800251e:	2b10      	cmp	r3, #16
 8002520:	d161      	bne.n	80025e6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f022 0210 	bic.w	r2, r2, #16
 8002530:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	f003 020f 	and.w	r2, r3, #15
 800253e:	4613      	mov	r3, r2
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	4413      	add	r3, r2
 800254e:	3304      	adds	r3, #4
 8002550:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	0c5b      	lsrs	r3, r3, #17
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	2b02      	cmp	r3, #2
 800255c:	d124      	bne.n	80025a8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002564:	4013      	ands	r3, r2
 8002566:	2b00      	cmp	r3, #0
 8002568:	d035      	beq.n	80025d6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002574:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002578:	b29b      	uxth	r3, r3
 800257a:	461a      	mov	r2, r3
 800257c:	6a38      	ldr	r0, [r7, #32]
 800257e:	f005 fa8b 	bl	8007a98 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	691a      	ldr	r2, [r3, #16]
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800258e:	441a      	add	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	6a1a      	ldr	r2, [r3, #32]
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	091b      	lsrs	r3, r3, #4
 800259c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025a0:	441a      	add	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	621a      	str	r2, [r3, #32]
 80025a6:	e016      	b.n	80025d6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	0c5b      	lsrs	r3, r3, #17
 80025ac:	f003 030f 	and.w	r3, r3, #15
 80025b0:	2b06      	cmp	r3, #6
 80025b2:	d110      	bne.n	80025d6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025ba:	2208      	movs	r2, #8
 80025bc:	4619      	mov	r1, r3
 80025be:	6a38      	ldr	r0, [r7, #32]
 80025c0:	f005 fa6a 	bl	8007a98 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	6a1a      	ldr	r2, [r3, #32]
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025d0:	441a      	add	r2, r3
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	699a      	ldr	r2, [r3, #24]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0210 	orr.w	r2, r2, #16
 80025e4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f005 fbe8 	bl	8007dc0 <USB_ReadInterrupts>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80025fa:	f040 80a7 	bne.w	800274c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f005 fbed 	bl	8007de6 <USB_ReadDevAllOutEpInterrupt>
 800260c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800260e:	e099      	b.n	8002744 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 808e 	beq.w	8002738 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f005 fc11 	bl	8007e4e <USB_ReadDevOutEPInterrupt>
 800262c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00c      	beq.n	8002652 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	4413      	add	r3, r2
 8002640:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002644:	461a      	mov	r2, r3
 8002646:	2301      	movs	r3, #1
 8002648:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800264a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 fec3 	bl	80033d8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00c      	beq.n	8002676 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	015a      	lsls	r2, r3, #5
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4413      	add	r3, r2
 8002664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002668:	461a      	mov	r2, r3
 800266a:	2308      	movs	r3, #8
 800266c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800266e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 ff99 	bl	80035a8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	d008      	beq.n	8002692 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	015a      	lsls	r2, r3, #5
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800268c:	461a      	mov	r2, r3
 800268e:	2310      	movs	r3, #16
 8002690:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d030      	beq.n	80026fe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d109      	bne.n	80026bc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	69fa      	ldr	r2, [r7, #28]
 80026b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ba:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026be:	4613      	mov	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	3304      	adds	r3, #4
 80026d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	78db      	ldrb	r3, [r3, #3]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d108      	bne.n	80026ec <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2200      	movs	r2, #0
 80026de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	4619      	mov	r1, r3
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f00b f97a 	bl	800d9e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026f8:	461a      	mov	r2, r3
 80026fa:	2302      	movs	r3, #2
 80026fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	015a      	lsls	r2, r3, #5
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	4413      	add	r3, r2
 8002710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002714:	461a      	mov	r2, r3
 8002716:	2320      	movs	r3, #32
 8002718:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d009      	beq.n	8002738 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	4413      	add	r3, r2
 800272c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002730:	461a      	mov	r2, r3
 8002732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002736:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	3301      	adds	r3, #1
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800273e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002740:	085b      	lsrs	r3, r3, #1
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002746:	2b00      	cmp	r3, #0
 8002748:	f47f af62 	bne.w	8002610 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4618      	mov	r0, r3
 8002752:	f005 fb35 	bl	8007dc0 <USB_ReadInterrupts>
 8002756:	4603      	mov	r3, r0
 8002758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800275c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002760:	f040 80db 	bne.w	800291a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f005 fb56 	bl	8007e1a <USB_ReadDevAllInEpInterrupt>
 800276e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002770:	2300      	movs	r3, #0
 8002772:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002774:	e0cd      	b.n	8002912 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80c2 	beq.w	8002906 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002788:	b2d2      	uxtb	r2, r2
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f005 fb7c 	bl	8007e8a <USB_ReadDevInEPInterrupt>
 8002792:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d057      	beq.n	800284e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	f003 030f 	and.w	r3, r3, #15
 80027a4:	2201      	movs	r2, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69f9      	ldr	r1, [r7, #28]
 80027ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027be:	4013      	ands	r3, r2
 80027c0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027ce:	461a      	mov	r2, r3
 80027d0:	2301      	movs	r3, #1
 80027d2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d132      	bne.n	8002842 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027dc:	6879      	ldr	r1, [r7, #4]
 80027de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	334c      	adds	r3, #76	; 0x4c
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4403      	add	r3, r0
 80027fc:	3348      	adds	r3, #72	; 0x48
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4419      	add	r1, r3
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002806:	4613      	mov	r3, r2
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	4413      	add	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4403      	add	r3, r0
 8002810:	334c      	adds	r3, #76	; 0x4c
 8002812:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	2b00      	cmp	r3, #0
 8002818:	d113      	bne.n	8002842 <HAL_PCD_IRQHandler+0x3a2>
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	4613      	mov	r3, r2
 8002820:	00db      	lsls	r3, r3, #3
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3354      	adds	r3, #84	; 0x54
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d108      	bne.n	8002842 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800283a:	461a      	mov	r2, r3
 800283c:	2101      	movs	r1, #1
 800283e:	f005 fb83 	bl	8007f48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	b2db      	uxtb	r3, r3
 8002846:	4619      	mov	r1, r3
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f00b f844 	bl	800d8d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f003 0308 	and.w	r3, r3, #8
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002864:	461a      	mov	r2, r3
 8002866:	2308      	movs	r3, #8
 8002868:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f003 0310 	and.w	r3, r3, #16
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	4413      	add	r3, r2
 800287c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002880:	461a      	mov	r2, r3
 8002882:	2310      	movs	r3, #16
 8002884:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800288c:	2b00      	cmp	r3, #0
 800288e:	d008      	beq.n	80028a2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	015a      	lsls	r2, r3, #5
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	4413      	add	r3, r2
 8002898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800289c:	461a      	mov	r2, r3
 800289e:	2340      	movs	r3, #64	; 0x40
 80028a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d023      	beq.n	80028f4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ae:	6a38      	ldr	r0, [r7, #32]
 80028b0:	f004 fa64 	bl	8006d7c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b6:	4613      	mov	r3, r2
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	4413      	add	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	3338      	adds	r3, #56	; 0x38
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	4413      	add	r3, r2
 80028c4:	3304      	adds	r3, #4
 80028c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	78db      	ldrb	r3, [r3, #3]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d108      	bne.n	80028e2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	2200      	movs	r2, #0
 80028d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	4619      	mov	r1, r3
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f00b f891 	bl	800da04 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	015a      	lsls	r2, r3, #5
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	4413      	add	r3, r2
 80028ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028ee:	461a      	mov	r2, r3
 80028f0:	2302      	movs	r3, #2
 80028f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fcdb 	bl	80032bc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	3301      	adds	r3, #1
 800290a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290e:	085b      	lsrs	r3, r3, #1
 8002910:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	2b00      	cmp	r3, #0
 8002916:	f47f af2e 	bne.w	8002776 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f005 fa4e 	bl	8007dc0 <USB_ReadInterrupts>
 8002924:	4603      	mov	r3, r0
 8002926:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800292a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800292e:	d122      	bne.n	8002976 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	69fa      	ldr	r2, [r7, #28]
 800293a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800293e:	f023 0301 	bic.w	r3, r3, #1
 8002942:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800294a:	2b01      	cmp	r3, #1
 800294c:	d108      	bne.n	8002960 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002956:	2100      	movs	r1, #0
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fec3 	bl	80036e4 <HAL_PCDEx_LPM_Callback>
 800295e:	e002      	b.n	8002966 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f00b f82f 	bl	800d9c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695a      	ldr	r2, [r3, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002974:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f005 fa20 	bl	8007dc0 <USB_ReadInterrupts>
 8002980:	4603      	mov	r3, r0
 8002982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800298a:	d112      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	2b01      	cmp	r3, #1
 800299a:	d102      	bne.n	80029a2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f00a ffeb 	bl	800d978 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695a      	ldr	r2, [r3, #20]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029b0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f005 fa02 	bl	8007dc0 <USB_ReadInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c6:	f040 80b7 	bne.w	8002b38 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2110      	movs	r1, #16
 80029e4:	4618      	mov	r0, r3
 80029e6:	f004 f9c9 	bl	8006d7c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029ea:	2300      	movs	r3, #0
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ee:	e046      	b.n	8002a7e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fc:	461a      	mov	r2, r3
 80029fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a02:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a14:	0151      	lsls	r1, r2, #5
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	440a      	add	r2, r1
 8002a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a30:	461a      	mov	r2, r3
 8002a32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a36:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a48:	0151      	lsls	r1, r2, #5
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	440a      	add	r2, r1
 8002a4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a56:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a5a:	015a      	lsls	r2, r3, #5
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	4413      	add	r3, r2
 8002a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a68:	0151      	lsls	r1, r2, #5
 8002a6a:	69fa      	ldr	r2, [r7, #28]
 8002a6c:	440a      	add	r2, r1
 8002a6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a76:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d3b3      	bcc.n	80029f0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	69fa      	ldr	r2, [r7, #28]
 8002a92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a96:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002a9a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d016      	beq.n	8002ad2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ab4:	f043 030b 	orr.w	r3, r3, #11
 8002ab8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aca:	f043 030b 	orr.w	r3, r3, #11
 8002ace:	6453      	str	r3, [r2, #68]	; 0x44
 8002ad0:	e015      	b.n	8002afe <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ae4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002ae8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af8:	f043 030b 	orr.w	r3, r3, #11
 8002afc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b0c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b10:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6818      	ldr	r0, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b22:	461a      	mov	r2, r3
 8002b24:	f005 fa10 	bl	8007f48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	695a      	ldr	r2, [r3, #20]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f005 f93f 	bl	8007dc0 <USB_ReadInterrupts>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4c:	d124      	bne.n	8002b98 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f005 f9d5 	bl	8007f02 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 f98a 	bl	8006e76 <USB_GetDevSpeed>
 8002b62:	4603      	mov	r3, r0
 8002b64:	461a      	mov	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681c      	ldr	r4, [r3, #0]
 8002b6e:	f001 f9e9 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8002b72:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	4620      	mov	r0, r4
 8002b7e:	f003 fe89 	bl	8006894 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f00a fecf 	bl	800d926 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	695a      	ldr	r2, [r3, #20]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002b96:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f005 f90f 	bl	8007dc0 <USB_ReadInterrupts>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	f003 0308 	and.w	r3, r3, #8
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d10a      	bne.n	8002bc2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f00a feac 	bl	800d90a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695a      	ldr	r2, [r3, #20]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f002 0208 	and.w	r2, r2, #8
 8002bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f005 f8fa 	bl	8007dc0 <USB_ReadInterrupts>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd2:	2b80      	cmp	r3, #128	; 0x80
 8002bd4:	d122      	bne.n	8002c1c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bde:	6a3b      	ldr	r3, [r7, #32]
 8002be0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002be2:	2301      	movs	r3, #1
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24
 8002be6:	e014      	b.n	8002c12 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d105      	bne.n	8002c0c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	4619      	mov	r1, r3
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fb27 	bl	800325a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	3301      	adds	r3, #1
 8002c10:	627b      	str	r3, [r7, #36]	; 0x24
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d3e5      	bcc.n	8002be8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f005 f8cd 	bl	8007dc0 <USB_ReadInterrupts>
 8002c26:	4603      	mov	r3, r0
 8002c28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c30:	d13b      	bne.n	8002caa <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c32:	2301      	movs	r3, #1
 8002c34:	627b      	str	r3, [r7, #36]	; 0x24
 8002c36:	e02b      	b.n	8002c90 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3a:	015a      	lsls	r2, r3, #5
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	4413      	add	r3, r2
 8002c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	4413      	add	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	440b      	add	r3, r1
 8002c56:	3340      	adds	r3, #64	; 0x40
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d115      	bne.n	8002c8a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c5e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	da12      	bge.n	8002c8a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	333f      	adds	r3, #63	; 0x3f
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	4619      	mov	r1, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 fae8 	bl	800325a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d3ce      	bcc.n	8002c38 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695a      	ldr	r2, [r3, #20]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002ca8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f005 f886 	bl	8007dc0 <USB_ReadInterrupts>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cbe:	d155      	bne.n	8002d6c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc4:	e045      	b.n	8002d52 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc8:	015a      	lsls	r2, r3, #5
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	4413      	add	r3, r2
 8002cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d12e      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	da2b      	bge.n	8002d4c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d00:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d121      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d08:	6879      	ldr	r1, [r7, #4]
 8002d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	440b      	add	r3, r1
 8002d16:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d1e:	6a3b      	ldr	r3, [r7, #32]
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d26:	6a3b      	ldr	r3, [r7, #32]
 8002d28:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d2a:	6a3b      	ldr	r3, [r7, #32]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	69fa      	ldr	r2, [r7, #28]
 8002d40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d48:	6053      	str	r3, [r2, #4]
            break;
 8002d4a:	e007      	b.n	8002d5c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	3301      	adds	r3, #1
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d3b4      	bcc.n	8002cc6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f005 f825 	bl	8007dc0 <USB_ReadInterrupts>
 8002d76:	4603      	mov	r3, r0
 8002d78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d80:	d10a      	bne.n	8002d98 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f00a fe50 	bl	800da28 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695a      	ldr	r2, [r3, #20]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f005 f80f 	bl	8007dc0 <USB_ReadInterrupts>
 8002da2:	4603      	mov	r3, r0
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d115      	bne.n	8002dd8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f00a fe40 	bl	800da44 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6859      	ldr	r1, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	69ba      	ldr	r2, [r7, #24]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	e000      	b.n	8002dd8 <HAL_PCD_IRQHandler+0x938>
      return;
 8002dd6:	bf00      	nop
    }
  }
}
 8002dd8:	3734      	adds	r7, #52	; 0x34
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd90      	pop	{r4, r7, pc}

08002dde <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	460b      	mov	r3, r1
 8002de8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d101      	bne.n	8002df8 <HAL_PCD_SetAddress+0x1a>
 8002df4:	2302      	movs	r3, #2
 8002df6:	e013      	b.n	8002e20 <HAL_PCD_SetAddress+0x42>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	78fa      	ldrb	r2, [r7, #3]
 8002e04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	4611      	mov	r1, r2
 8002e10:	4618      	mov	r0, r3
 8002e12:	f004 ff6d 	bl	8007cf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	4608      	mov	r0, r1
 8002e32:	4611      	mov	r1, r2
 8002e34:	461a      	mov	r2, r3
 8002e36:	4603      	mov	r3, r0
 8002e38:	70fb      	strb	r3, [r7, #3]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	803b      	strh	r3, [r7, #0]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e42:	2300      	movs	r3, #0
 8002e44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	da0f      	bge.n	8002e6e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	f003 020f 	and.w	r2, r3, #15
 8002e54:	4613      	mov	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	3338      	adds	r3, #56	; 0x38
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	4413      	add	r3, r2
 8002e62:	3304      	adds	r3, #4
 8002e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	705a      	strb	r2, [r3, #1]
 8002e6c:	e00f      	b.n	8002e8e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	f003 020f 	and.w	r2, r3, #15
 8002e74:	4613      	mov	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4413      	add	r3, r2
 8002e84:	3304      	adds	r3, #4
 8002e86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e8e:	78fb      	ldrb	r3, [r7, #3]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	b2da      	uxtb	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002e9a:	883a      	ldrh	r2, [r7, #0]
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	78ba      	ldrb	r2, [r7, #2]
 8002ea4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	785b      	ldrb	r3, [r3, #1]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d004      	beq.n	8002eb8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002eb8:	78bb      	ldrb	r3, [r7, #2]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d102      	bne.n	8002ec4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_PCD_EP_Open+0xaa>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e00e      	b.n	8002ef0 <HAL_PCD_EP_Open+0xc8>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68f9      	ldr	r1, [r7, #12]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f003 ffed 	bl	8006ec0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002eee:	7afb      	ldrb	r3, [r7, #11]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	da0f      	bge.n	8002f2c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f0c:	78fb      	ldrb	r3, [r7, #3]
 8002f0e:	f003 020f 	and.w	r2, r3, #15
 8002f12:	4613      	mov	r3, r2
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	3338      	adds	r3, #56	; 0x38
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	4413      	add	r3, r2
 8002f20:	3304      	adds	r3, #4
 8002f22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2201      	movs	r2, #1
 8002f28:	705a      	strb	r2, [r3, #1]
 8002f2a:	e00f      	b.n	8002f4c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f2c:	78fb      	ldrb	r3, [r7, #3]
 8002f2e:	f003 020f 	and.w	r2, r3, #15
 8002f32:	4613      	mov	r3, r2
 8002f34:	00db      	lsls	r3, r3, #3
 8002f36:	4413      	add	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	3304      	adds	r3, #4
 8002f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f4c:	78fb      	ldrb	r3, [r7, #3]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d101      	bne.n	8002f66 <HAL_PCD_EP_Close+0x6e>
 8002f62:	2302      	movs	r3, #2
 8002f64:	e00e      	b.n	8002f84 <HAL_PCD_EP_Close+0x8c>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68f9      	ldr	r1, [r7, #12]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f004 f82b 	bl	8006fd0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f9c:	7afb      	ldrb	r3, [r7, #11]
 8002f9e:	f003 020f 	and.w	r2, r3, #15
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	4413      	add	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fae:	68fa      	ldr	r2, [r7, #12]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3304      	adds	r3, #4
 8002fb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fce:	7afb      	ldrb	r3, [r7, #11]
 8002fd0:	f003 030f 	and.w	r3, r3, #15
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d102      	bne.n	8002fe8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fe8:	7afb      	ldrb	r3, [r7, #11]
 8002fea:	f003 030f 	and.w	r3, r3, #15
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6818      	ldr	r0, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	6979      	ldr	r1, [r7, #20]
 8003000:	f004 fb0a 	bl	8007618 <USB_EP0StartXfer>
 8003004:	e008      	b.n	8003018 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6818      	ldr	r0, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	691b      	ldr	r3, [r3, #16]
 800300e:	b2db      	uxtb	r3, r3
 8003010:	461a      	mov	r2, r3
 8003012:	6979      	ldr	r1, [r7, #20]
 8003014:	f004 f8b8 	bl	8007188 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003022:	b480      	push	{r7}
 8003024:	b083      	sub	sp, #12
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	460b      	mov	r3, r1
 800302c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	f003 020f 	and.w	r2, r3, #15
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	00db      	lsls	r3, r3, #3
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003044:	681b      	ldr	r3, [r3, #0]
}
 8003046:	4618      	mov	r0, r3
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr

08003052 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b086      	sub	sp, #24
 8003056:	af00      	add	r7, sp, #0
 8003058:	60f8      	str	r0, [r7, #12]
 800305a:	607a      	str	r2, [r7, #4]
 800305c:	603b      	str	r3, [r7, #0]
 800305e:	460b      	mov	r3, r1
 8003060:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003062:	7afb      	ldrb	r3, [r7, #11]
 8003064:	f003 020f 	and.w	r2, r3, #15
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	3338      	adds	r3, #56	; 0x38
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4413      	add	r3, r2
 8003076:	3304      	adds	r3, #4
 8003078:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2200      	movs	r2, #0
 800308a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	2201      	movs	r2, #1
 8003090:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003092:	7afb      	ldrb	r3, [r7, #11]
 8003094:	f003 030f 	and.w	r3, r3, #15
 8003098:	b2da      	uxtb	r2, r3
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d102      	bne.n	80030ac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030ac:	7afb      	ldrb	r3, [r7, #11]
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	461a      	mov	r2, r3
 80030c2:	6979      	ldr	r1, [r7, #20]
 80030c4:	f004 faa8 	bl	8007618 <USB_EP0StartXfer>
 80030c8:	e008      	b.n	80030dc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	461a      	mov	r2, r3
 80030d6:	6979      	ldr	r1, [r7, #20]
 80030d8:	f004 f856 	bl	8007188 <USB_EPStartXfer>
  }

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 020f 	and.w	r2, r3, #15
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d901      	bls.n	8003104 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e050      	b.n	80031a6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003108:	2b00      	cmp	r3, #0
 800310a:	da0f      	bge.n	800312c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800310c:	78fb      	ldrb	r3, [r7, #3]
 800310e:	f003 020f 	and.w	r2, r3, #15
 8003112:	4613      	mov	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	4413      	add	r3, r2
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	3338      	adds	r3, #56	; 0x38
 800311c:	687a      	ldr	r2, [r7, #4]
 800311e:	4413      	add	r3, r2
 8003120:	3304      	adds	r3, #4
 8003122:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2201      	movs	r2, #1
 8003128:	705a      	strb	r2, [r3, #1]
 800312a:	e00d      	b.n	8003148 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	4613      	mov	r3, r2
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4413      	add	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	3304      	adds	r3, #4
 8003140:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2201      	movs	r2, #1
 800314c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	b2da      	uxtb	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003160:	2b01      	cmp	r3, #1
 8003162:	d101      	bne.n	8003168 <HAL_PCD_EP_SetStall+0x82>
 8003164:	2302      	movs	r3, #2
 8003166:	e01e      	b.n	80031a6 <HAL_PCD_EP_SetStall+0xc0>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68f9      	ldr	r1, [r7, #12]
 8003176:	4618      	mov	r0, r3
 8003178:	f004 fce6 	bl	8007b48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	f003 030f 	and.w	r3, r3, #15
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10a      	bne.n	800319c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	b2d9      	uxtb	r1, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003196:	461a      	mov	r2, r3
 8003198:	f004 fed6 	bl	8007f48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031a4:	2300      	movs	r3, #0
}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3710      	adds	r7, #16
 80031aa:	46bd      	mov	sp, r7
 80031ac:	bd80      	pop	{r7, pc}

080031ae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031ae:	b580      	push	{r7, lr}
 80031b0:	b084      	sub	sp, #16
 80031b2:	af00      	add	r7, sp, #0
 80031b4:	6078      	str	r0, [r7, #4]
 80031b6:	460b      	mov	r3, r1
 80031b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	f003 020f 	and.w	r2, r3, #15
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d901      	bls.n	80031cc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e042      	b.n	8003252 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	da0f      	bge.n	80031f4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	f003 020f 	and.w	r2, r3, #15
 80031da:	4613      	mov	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	4413      	add	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	3338      	adds	r3, #56	; 0x38
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	3304      	adds	r3, #4
 80031ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2201      	movs	r2, #1
 80031f0:	705a      	strb	r2, [r3, #1]
 80031f2:	e00f      	b.n	8003214 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	f003 020f 	and.w	r2, r3, #15
 80031fa:	4613      	mov	r3, r2
 80031fc:	00db      	lsls	r3, r3, #3
 80031fe:	4413      	add	r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4413      	add	r3, r2
 800320a:	3304      	adds	r3, #4
 800320c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	b2da      	uxtb	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_PCD_EP_ClrStall+0x86>
 8003230:	2302      	movs	r3, #2
 8003232:	e00e      	b.n	8003252 <HAL_PCD_EP_ClrStall+0xa4>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68f9      	ldr	r1, [r7, #12]
 8003242:	4618      	mov	r0, r3
 8003244:	f004 fcee 	bl	8007c24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2200      	movs	r2, #0
 800324c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}

0800325a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800325a:	b580      	push	{r7, lr}
 800325c:	b084      	sub	sp, #16
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
 8003262:	460b      	mov	r3, r1
 8003264:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800326a:	2b00      	cmp	r3, #0
 800326c:	da0c      	bge.n	8003288 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	f003 020f 	and.w	r2, r3, #15
 8003274:	4613      	mov	r3, r2
 8003276:	00db      	lsls	r3, r3, #3
 8003278:	4413      	add	r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	3338      	adds	r3, #56	; 0x38
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	4413      	add	r3, r2
 8003282:	3304      	adds	r3, #4
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	e00c      	b.n	80032a2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	f003 020f 	and.w	r2, r3, #15
 800328e:	4613      	mov	r3, r2
 8003290:	00db      	lsls	r3, r3, #3
 8003292:	4413      	add	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	3304      	adds	r3, #4
 80032a0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68f9      	ldr	r1, [r7, #12]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f004 fb0d 	bl	80078c8 <USB_EPStopXfer>
 80032ae:	4603      	mov	r3, r0
 80032b0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032b2:	7afb      	ldrb	r3, [r7, #11]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3710      	adds	r7, #16
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08a      	sub	sp, #40	; 0x28
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	3338      	adds	r3, #56	; 0x38
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4413      	add	r3, r2
 80032e0:	3304      	adds	r3, #4
 80032e2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a1a      	ldr	r2, [r3, #32]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d901      	bls.n	80032f4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	e06c      	b.n	80033ce <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6a1b      	ldr	r3, [r3, #32]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	429a      	cmp	r2, r3
 8003308:	d902      	bls.n	8003310 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	3303      	adds	r3, #3
 8003314:	089b      	lsrs	r3, r3, #2
 8003316:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003318:	e02b      	b.n	8003372 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a1b      	ldr	r3, [r3, #32]
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	429a      	cmp	r2, r3
 800332e:	d902      	bls.n	8003336 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	3303      	adds	r3, #3
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6919      	ldr	r1, [r3, #16]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	b2da      	uxtb	r2, r3
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800334e:	b2db      	uxtb	r3, r3
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	4603      	mov	r3, r0
 8003354:	6978      	ldr	r0, [r7, #20]
 8003356:	f004 fb61 	bl	8007a1c <USB_WritePacket>

    ep->xfer_buff  += len;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	691a      	ldr	r2, [r3, #16]
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	441a      	add	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6a1a      	ldr	r2, [r3, #32]
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	441a      	add	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	015a      	lsls	r2, r3, #5
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	4413      	add	r3, r2
 800337a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	b29b      	uxth	r3, r3
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	429a      	cmp	r2, r3
 8003386:	d809      	bhi.n	800339c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a1a      	ldr	r2, [r3, #32]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003390:	429a      	cmp	r2, r3
 8003392:	d203      	bcs.n	800339c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1be      	bne.n	800331a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	699a      	ldr	r2, [r3, #24]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d811      	bhi.n	80033cc <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	f003 030f 	and.w	r3, r3, #15
 80033ae:	2201      	movs	r2, #1
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	6939      	ldr	r1, [r7, #16]
 80033c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033c8:	4013      	ands	r3, r2
 80033ca:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3720      	adds	r7, #32
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b088      	sub	sp, #32
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	333c      	adds	r3, #60	; 0x3c
 80033f0:	3304      	adds	r3, #4
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	69bb      	ldr	r3, [r7, #24]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d17b      	bne.n	8003506 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	f003 0308 	and.w	r3, r3, #8
 8003414:	2b00      	cmp	r3, #0
 8003416:	d015      	beq.n	8003444 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	4a61      	ldr	r2, [pc, #388]	; (80035a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800341c:	4293      	cmp	r3, r2
 800341e:	f240 80b9 	bls.w	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80b3 	beq.w	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343a:	461a      	mov	r2, r3
 800343c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003440:	6093      	str	r3, [r2, #8]
 8003442:	e0a7      	b.n	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f003 0320 	and.w	r3, r3, #32
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345a:	461a      	mov	r2, r3
 800345c:	2320      	movs	r3, #32
 800345e:	6093      	str	r3, [r2, #8]
 8003460:	e098      	b.n	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003468:	2b00      	cmp	r3, #0
 800346a:	f040 8093 	bne.w	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	4a4b      	ldr	r2, [pc, #300]	; (80035a0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d90f      	bls.n	8003496 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00a      	beq.n	8003496 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348c:	461a      	mov	r2, r3
 800348e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003492:	6093      	str	r3, [r2, #8]
 8003494:	e07e      	b.n	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003496:	683a      	ldr	r2, [r7, #0]
 8003498:	4613      	mov	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4413      	add	r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	4413      	add	r3, r2
 80034a8:	3304      	adds	r3, #4
 80034aa:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	0159      	lsls	r1, r3, #5
 80034b4:	69bb      	ldr	r3, [r7, #24]
 80034b6:	440b      	add	r3, r1
 80034b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c2:	1ad2      	subs	r2, r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d114      	bne.n	80034f8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034e0:	461a      	mov	r2, r3
 80034e2:	2101      	movs	r1, #1
 80034e4:	f004 fd30 	bl	8007f48 <USB_EP0_OutStart>
 80034e8:	e006      	b.n	80034f8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	691a      	ldr	r2, [r3, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	441a      	add	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	4619      	mov	r1, r3
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f00a f9ce 	bl	800d8a0 <HAL_PCD_DataOutStageCallback>
 8003504:	e046      	b.n	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	4a26      	ldr	r2, [pc, #152]	; (80035a4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d124      	bne.n	8003558 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00a      	beq.n	800352e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003524:	461a      	mov	r2, r3
 8003526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800352a:	6093      	str	r3, [r2, #8]
 800352c:	e032      	b.n	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	015a      	lsls	r2, r3, #5
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	4413      	add	r3, r2
 8003540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003544:	461a      	mov	r2, r3
 8003546:	2320      	movs	r3, #32
 8003548:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	b2db      	uxtb	r3, r3
 800354e:	4619      	mov	r1, r3
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f00a f9a5 	bl	800d8a0 <HAL_PCD_DataOutStageCallback>
 8003556:	e01d      	b.n	8003594 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d114      	bne.n	8003588 <PCD_EP_OutXfrComplete_int+0x1b0>
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	683a      	ldr	r2, [r7, #0]
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	440b      	add	r3, r1
 800356c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d108      	bne.n	8003588 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003580:	461a      	mov	r2, r3
 8003582:	2100      	movs	r1, #0
 8003584:	f004 fce0 	bl	8007f48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	4619      	mov	r1, r3
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f00a f986 	bl	800d8a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	4f54300a 	.word	0x4f54300a
 80035a4:	4f54310a 	.word	0x4f54310a

080035a8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	333c      	adds	r3, #60	; 0x3c
 80035c0:	3304      	adds	r3, #4
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a15      	ldr	r2, [pc, #84]	; (8003630 <PCD_EP_OutSetupPacket_int+0x88>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d90e      	bls.n	80035fc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d009      	beq.n	80035fc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f4:	461a      	mov	r2, r3
 80035f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035fa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f00a f93d 	bl	800d87c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a0a      	ldr	r2, [pc, #40]	; (8003630 <PCD_EP_OutSetupPacket_int+0x88>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d90c      	bls.n	8003624 <PCD_EP_OutSetupPacket_int+0x7c>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b01      	cmp	r3, #1
 8003610:	d108      	bne.n	8003624 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6818      	ldr	r0, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800361c:	461a      	mov	r2, r3
 800361e:	2101      	movs	r1, #1
 8003620:	f004 fc92 	bl	8007f48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	4f54300a 	.word	0x4f54300a

08003634 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	70fb      	strb	r3, [r7, #3]
 8003640:	4613      	mov	r3, r2
 8003642:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800364c:	78fb      	ldrb	r3, [r7, #3]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d107      	bne.n	8003662 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003652:	883b      	ldrh	r3, [r7, #0]
 8003654:	0419      	lsls	r1, r3, #16
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	430a      	orrs	r2, r1
 800365e:	629a      	str	r2, [r3, #40]	; 0x28
 8003660:	e028      	b.n	80036b4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003668:	0c1b      	lsrs	r3, r3, #16
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	4413      	add	r3, r2
 800366e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003670:	2300      	movs	r3, #0
 8003672:	73fb      	strb	r3, [r7, #15]
 8003674:	e00d      	b.n	8003692 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	7bfb      	ldrb	r3, [r7, #15]
 800367c:	3340      	adds	r3, #64	; 0x40
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	0c1b      	lsrs	r3, r3, #16
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	4413      	add	r3, r2
 800368a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800368c:	7bfb      	ldrb	r3, [r7, #15]
 800368e:	3301      	adds	r3, #1
 8003690:	73fb      	strb	r3, [r7, #15]
 8003692:	7bfa      	ldrb	r2, [r7, #15]
 8003694:	78fb      	ldrb	r3, [r7, #3]
 8003696:	3b01      	subs	r3, #1
 8003698:	429a      	cmp	r2, r3
 800369a:	d3ec      	bcc.n	8003676 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800369c:	883b      	ldrh	r3, [r7, #0]
 800369e:	0418      	lsls	r0, r3, #16
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6819      	ldr	r1, [r3, #0]
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	4302      	orrs	r2, r0
 80036ac:	3340      	adds	r3, #64	; 0x40
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3714      	adds	r7, #20
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036c2:	b480      	push	{r7}
 80036c4:	b083      	sub	sp, #12
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	887a      	ldrh	r2, [r7, #2]
 80036d4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	460b      	mov	r3, r1
 80036ee:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e267      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d075      	beq.n	8003806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800371a:	4b88      	ldr	r3, [pc, #544]	; (800393c <HAL_RCC_OscConfig+0x240>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b04      	cmp	r3, #4
 8003724:	d00c      	beq.n	8003740 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003726:	4b85      	ldr	r3, [pc, #532]	; (800393c <HAL_RCC_OscConfig+0x240>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800372e:	2b08      	cmp	r3, #8
 8003730:	d112      	bne.n	8003758 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003732:	4b82      	ldr	r3, [pc, #520]	; (800393c <HAL_RCC_OscConfig+0x240>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800373e:	d10b      	bne.n	8003758 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	4b7e      	ldr	r3, [pc, #504]	; (800393c <HAL_RCC_OscConfig+0x240>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d05b      	beq.n	8003804 <HAL_RCC_OscConfig+0x108>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d157      	bne.n	8003804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e242      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003760:	d106      	bne.n	8003770 <HAL_RCC_OscConfig+0x74>
 8003762:	4b76      	ldr	r3, [pc, #472]	; (800393c <HAL_RCC_OscConfig+0x240>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a75      	ldr	r2, [pc, #468]	; (800393c <HAL_RCC_OscConfig+0x240>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e01d      	b.n	80037ac <HAL_RCC_OscConfig+0xb0>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0x98>
 800377a:	4b70      	ldr	r3, [pc, #448]	; (800393c <HAL_RCC_OscConfig+0x240>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a6f      	ldr	r2, [pc, #444]	; (800393c <HAL_RCC_OscConfig+0x240>)
 8003780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b6d      	ldr	r3, [pc, #436]	; (800393c <HAL_RCC_OscConfig+0x240>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a6c      	ldr	r2, [pc, #432]	; (800393c <HAL_RCC_OscConfig+0x240>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e00b      	b.n	80037ac <HAL_RCC_OscConfig+0xb0>
 8003794:	4b69      	ldr	r3, [pc, #420]	; (800393c <HAL_RCC_OscConfig+0x240>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a68      	ldr	r2, [pc, #416]	; (800393c <HAL_RCC_OscConfig+0x240>)
 800379a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b66      	ldr	r3, [pc, #408]	; (800393c <HAL_RCC_OscConfig+0x240>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a65      	ldr	r2, [pc, #404]	; (800393c <HAL_RCC_OscConfig+0x240>)
 80037a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fd fdc0 	bl	8001338 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037bc:	f7fd fdbc 	bl	8001338 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	; 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e207      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	4b5b      	ldr	r3, [pc, #364]	; (800393c <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0xc0>
 80037da:	e014      	b.n	8003806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fd fdac 	bl	8001338 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e4:	f7fd fda8 	bl	8001338 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	; 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e1f3      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f6:	4b51      	ldr	r3, [pc, #324]	; (800393c <HAL_RCC_OscConfig+0x240>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0xe8>
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d063      	beq.n	80038da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003812:	4b4a      	ldr	r3, [pc, #296]	; (800393c <HAL_RCC_OscConfig+0x240>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800381e:	4b47      	ldr	r3, [pc, #284]	; (800393c <HAL_RCC_OscConfig+0x240>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003826:	2b08      	cmp	r3, #8
 8003828:	d11c      	bne.n	8003864 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382a:	4b44      	ldr	r3, [pc, #272]	; (800393c <HAL_RCC_OscConfig+0x240>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d116      	bne.n	8003864 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003836:	4b41      	ldr	r3, [pc, #260]	; (800393c <HAL_RCC_OscConfig+0x240>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_RCC_OscConfig+0x152>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d001      	beq.n	800384e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e1c7      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384e:	4b3b      	ldr	r3, [pc, #236]	; (800393c <HAL_RCC_OscConfig+0x240>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4937      	ldr	r1, [pc, #220]	; (800393c <HAL_RCC_OscConfig+0x240>)
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003862:	e03a      	b.n	80038da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d020      	beq.n	80038ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800386c:	4b34      	ldr	r3, [pc, #208]	; (8003940 <HAL_RCC_OscConfig+0x244>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fd fd61 	bl	8001338 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800387a:	f7fd fd5d 	bl	8001338 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e1a8      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388c:	4b2b      	ldr	r3, [pc, #172]	; (800393c <HAL_RCC_OscConfig+0x240>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003898:	4b28      	ldr	r3, [pc, #160]	; (800393c <HAL_RCC_OscConfig+0x240>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4925      	ldr	r1, [pc, #148]	; (800393c <HAL_RCC_OscConfig+0x240>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	600b      	str	r3, [r1, #0]
 80038ac:	e015      	b.n	80038da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ae:	4b24      	ldr	r3, [pc, #144]	; (8003940 <HAL_RCC_OscConfig+0x244>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fd fd40 	bl	8001338 <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038bc:	f7fd fd3c 	bl	8001338 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e187      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ce:	4b1b      	ldr	r3, [pc, #108]	; (800393c <HAL_RCC_OscConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d036      	beq.n	8003954 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ee:	4b15      	ldr	r3, [pc, #84]	; (8003944 <HAL_RCC_OscConfig+0x248>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7fd fd20 	bl	8001338 <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038fc:	f7fd fd1c 	bl	8001338 <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e167      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <HAL_RCC_OscConfig+0x240>)
 8003910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x200>
 800391a:	e01b      	b.n	8003954 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_RCC_OscConfig+0x248>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003922:	f7fd fd09 	bl	8001338 <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003928:	e00e      	b.n	8003948 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392a:	f7fd fd05 	bl	8001338 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d907      	bls.n	8003948 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e150      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
 800393c:	40023800 	.word	0x40023800
 8003940:	42470000 	.word	0x42470000
 8003944:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003948:	4b88      	ldr	r3, [pc, #544]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 800394a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1ea      	bne.n	800392a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 8097 	beq.w	8003a90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003962:	2300      	movs	r3, #0
 8003964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003966:	4b81      	ldr	r3, [pc, #516]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003972:	2300      	movs	r3, #0
 8003974:	60bb      	str	r3, [r7, #8]
 8003976:	4b7d      	ldr	r3, [pc, #500]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	4a7c      	ldr	r2, [pc, #496]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 800397c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003980:	6413      	str	r3, [r2, #64]	; 0x40
 8003982:	4b7a      	ldr	r3, [pc, #488]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800398a:	60bb      	str	r3, [r7, #8]
 800398c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800398e:	2301      	movs	r3, #1
 8003990:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003992:	4b77      	ldr	r3, [pc, #476]	; (8003b70 <HAL_RCC_OscConfig+0x474>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399a:	2b00      	cmp	r3, #0
 800399c:	d118      	bne.n	80039d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800399e:	4b74      	ldr	r3, [pc, #464]	; (8003b70 <HAL_RCC_OscConfig+0x474>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a73      	ldr	r2, [pc, #460]	; (8003b70 <HAL_RCC_OscConfig+0x474>)
 80039a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039aa:	f7fd fcc5 	bl	8001338 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b2:	f7fd fcc1 	bl	8001338 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e10c      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c4:	4b6a      	ldr	r3, [pc, #424]	; (8003b70 <HAL_RCC_OscConfig+0x474>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d106      	bne.n	80039e6 <HAL_RCC_OscConfig+0x2ea>
 80039d8:	4b64      	ldr	r3, [pc, #400]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 80039da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039dc:	4a63      	ldr	r2, [pc, #396]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 80039de:	f043 0301 	orr.w	r3, r3, #1
 80039e2:	6713      	str	r3, [r2, #112]	; 0x70
 80039e4:	e01c      	b.n	8003a20 <HAL_RCC_OscConfig+0x324>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b05      	cmp	r3, #5
 80039ec:	d10c      	bne.n	8003a08 <HAL_RCC_OscConfig+0x30c>
 80039ee:	4b5f      	ldr	r3, [pc, #380]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f2:	4a5e      	ldr	r2, [pc, #376]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 80039f4:	f043 0304 	orr.w	r3, r3, #4
 80039f8:	6713      	str	r3, [r2, #112]	; 0x70
 80039fa:	4b5c      	ldr	r3, [pc, #368]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 80039fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fe:	4a5b      	ldr	r2, [pc, #364]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	6713      	str	r3, [r2, #112]	; 0x70
 8003a06:	e00b      	b.n	8003a20 <HAL_RCC_OscConfig+0x324>
 8003a08:	4b58      	ldr	r3, [pc, #352]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0c:	4a57      	ldr	r2, [pc, #348]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a0e:	f023 0301 	bic.w	r3, r3, #1
 8003a12:	6713      	str	r3, [r2, #112]	; 0x70
 8003a14:	4b55      	ldr	r3, [pc, #340]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a18:	4a54      	ldr	r2, [pc, #336]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a1a:	f023 0304 	bic.w	r3, r3, #4
 8003a1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d015      	beq.n	8003a54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a28:	f7fd fc86 	bl	8001338 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a2e:	e00a      	b.n	8003a46 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a30:	f7fd fc82 	bl	8001338 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e0cb      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a46:	4b49      	ldr	r3, [pc, #292]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0ee      	beq.n	8003a30 <HAL_RCC_OscConfig+0x334>
 8003a52:	e014      	b.n	8003a7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a54:	f7fd fc70 	bl	8001338 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fd fc6c 	bl	8001338 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e0b5      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a72:	4b3e      	ldr	r3, [pc, #248]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1ee      	bne.n	8003a5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a7e:	7dfb      	ldrb	r3, [r7, #23]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d105      	bne.n	8003a90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a84:	4b39      	ldr	r3, [pc, #228]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	4a38      	ldr	r2, [pc, #224]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 80a1 	beq.w	8003bdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a9a:	4b34      	ldr	r3, [pc, #208]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d05c      	beq.n	8003b60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d141      	bne.n	8003b32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aae:	4b31      	ldr	r3, [pc, #196]	; (8003b74 <HAL_RCC_OscConfig+0x478>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fd fc40 	bl	8001338 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003abc:	f7fd fc3c 	bl	8001338 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e087      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ace:	4b27      	ldr	r3, [pc, #156]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69da      	ldr	r2, [r3, #28]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	019b      	lsls	r3, r3, #6
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	085b      	lsrs	r3, r3, #1
 8003af2:	3b01      	subs	r3, #1
 8003af4:	041b      	lsls	r3, r3, #16
 8003af6:	431a      	orrs	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	061b      	lsls	r3, r3, #24
 8003afe:	491b      	ldr	r1, [pc, #108]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b04:	4b1b      	ldr	r3, [pc, #108]	; (8003b74 <HAL_RCC_OscConfig+0x478>)
 8003b06:	2201      	movs	r2, #1
 8003b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0a:	f7fd fc15 	bl	8001338 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b12:	f7fd fc11 	bl	8001338 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e05c      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b24:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0f0      	beq.n	8003b12 <HAL_RCC_OscConfig+0x416>
 8003b30:	e054      	b.n	8003bdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b32:	4b10      	ldr	r3, [pc, #64]	; (8003b74 <HAL_RCC_OscConfig+0x478>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7fd fbfe 	bl	8001338 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b40:	f7fd fbfa 	bl	8001338 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e045      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b52:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <HAL_RCC_OscConfig+0x470>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1f0      	bne.n	8003b40 <HAL_RCC_OscConfig+0x444>
 8003b5e:	e03d      	b.n	8003bdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d107      	bne.n	8003b78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e038      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	40007000 	.word	0x40007000
 8003b74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b78:	4b1b      	ldr	r3, [pc, #108]	; (8003be8 <HAL_RCC_OscConfig+0x4ec>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d028      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d121      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d11a      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ba2:	68fa      	ldr	r2, [r7, #12]
 8003ba4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003ba8:	4013      	ands	r3, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d111      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbe:	085b      	lsrs	r3, r3, #1
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d107      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40023800 	.word	0x40023800

08003bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bec:	b580      	push	{r7, lr}
 8003bee:	b084      	sub	sp, #16
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0cc      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c00:	4b68      	ldr	r3, [pc, #416]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d90c      	bls.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b65      	ldr	r3, [pc, #404]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b63      	ldr	r3, [pc, #396]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e0b8      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d020      	beq.n	8003c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d005      	beq.n	8003c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c40:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	4a58      	ldr	r2, [pc, #352]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0308 	and.w	r3, r3, #8
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c58:	4b53      	ldr	r3, [pc, #332]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	4a52      	ldr	r2, [pc, #328]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c64:	4b50      	ldr	r3, [pc, #320]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	494d      	ldr	r1, [pc, #308]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c72:	4313      	orrs	r3, r2
 8003c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0301 	and.w	r3, r3, #1
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d044      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d107      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c8a:	4b47      	ldr	r3, [pc, #284]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d119      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e07f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d003      	beq.n	8003caa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d107      	bne.n	8003cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003caa:	4b3f      	ldr	r3, [pc, #252]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e06f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cba:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e067      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cca:	4b37      	ldr	r3, [pc, #220]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f023 0203 	bic.w	r2, r3, #3
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	4934      	ldr	r1, [pc, #208]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cdc:	f7fd fb2c 	bl	8001338 <HAL_GetTick>
 8003ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce2:	e00a      	b.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce4:	f7fd fb28 	bl	8001338 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e04f      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cfa:	4b2b      	ldr	r3, [pc, #172]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 020c 	and.w	r2, r3, #12
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d1eb      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d0c:	4b25      	ldr	r3, [pc, #148]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	683a      	ldr	r2, [r7, #0]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d20c      	bcs.n	8003d34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d1a:	4b22      	ldr	r3, [pc, #136]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	b2d2      	uxtb	r2, r2
 8003d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d22:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0307 	and.w	r3, r3, #7
 8003d2a:	683a      	ldr	r2, [r7, #0]
 8003d2c:	429a      	cmp	r2, r3
 8003d2e:	d001      	beq.n	8003d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e032      	b.n	8003d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d40:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4916      	ldr	r1, [pc, #88]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	00db      	lsls	r3, r3, #3
 8003d6c:	490e      	ldr	r1, [pc, #56]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d72:	f000 f821 	bl	8003db8 <HAL_RCC_GetSysClockFreq>
 8003d76:	4602      	mov	r2, r0
 8003d78:	4b0b      	ldr	r3, [pc, #44]	; (8003da8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	091b      	lsrs	r3, r3, #4
 8003d7e:	f003 030f 	and.w	r3, r3, #15
 8003d82:	490a      	ldr	r1, [pc, #40]	; (8003dac <HAL_RCC_ClockConfig+0x1c0>)
 8003d84:	5ccb      	ldrb	r3, [r1, r3]
 8003d86:	fa22 f303 	lsr.w	r3, r2, r3
 8003d8a:	4a09      	ldr	r2, [pc, #36]	; (8003db0 <HAL_RCC_ClockConfig+0x1c4>)
 8003d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCC_ClockConfig+0x1c8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fd fa8c 	bl	80012b0 <HAL_InitTick>

  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023c00 	.word	0x40023c00
 8003da8:	40023800 	.word	0x40023800
 8003dac:	0800df24 	.word	0x0800df24
 8003db0:	20000000 	.word	0x20000000
 8003db4:	20000004 	.word	0x20000004

08003db8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dbc:	b090      	sub	sp, #64	; 0x40
 8003dbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc8:	2300      	movs	r3, #0
 8003dca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd0:	4b59      	ldr	r3, [pc, #356]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d00d      	beq.n	8003df8 <HAL_RCC_GetSysClockFreq+0x40>
 8003ddc:	2b08      	cmp	r3, #8
 8003dde:	f200 80a1 	bhi.w	8003f24 <HAL_RCC_GetSysClockFreq+0x16c>
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <HAL_RCC_GetSysClockFreq+0x34>
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d003      	beq.n	8003df2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003dea:	e09b      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dec:	4b53      	ldr	r3, [pc, #332]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x184>)
 8003dee:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003df0:	e09b      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003df2:	4b53      	ldr	r3, [pc, #332]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x188>)
 8003df4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003df6:	e098      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003df8:	4b4f      	ldr	r3, [pc, #316]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e00:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e02:	4b4d      	ldr	r3, [pc, #308]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d028      	beq.n	8003e60 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e0e:	4b4a      	ldr	r3, [pc, #296]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	099b      	lsrs	r3, r3, #6
 8003e14:	2200      	movs	r2, #0
 8003e16:	623b      	str	r3, [r7, #32]
 8003e18:	627a      	str	r2, [r7, #36]	; 0x24
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e20:	2100      	movs	r1, #0
 8003e22:	4b47      	ldr	r3, [pc, #284]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e24:	fb03 f201 	mul.w	r2, r3, r1
 8003e28:	2300      	movs	r3, #0
 8003e2a:	fb00 f303 	mul.w	r3, r0, r3
 8003e2e:	4413      	add	r3, r2
 8003e30:	4a43      	ldr	r2, [pc, #268]	; (8003f40 <HAL_RCC_GetSysClockFreq+0x188>)
 8003e32:	fba0 1202 	umull	r1, r2, r0, r2
 8003e36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e38:	460a      	mov	r2, r1
 8003e3a:	62ba      	str	r2, [r7, #40]	; 0x28
 8003e3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e3e:	4413      	add	r3, r2
 8003e40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e44:	2200      	movs	r2, #0
 8003e46:	61bb      	str	r3, [r7, #24]
 8003e48:	61fa      	str	r2, [r7, #28]
 8003e4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003e52:	f7fc f9bd 	bl	80001d0 <__aeabi_uldivmod>
 8003e56:	4602      	mov	r2, r0
 8003e58:	460b      	mov	r3, r1
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5e:	e053      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e60:	4b35      	ldr	r3, [pc, #212]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	099b      	lsrs	r3, r3, #6
 8003e66:	2200      	movs	r2, #0
 8003e68:	613b      	str	r3, [r7, #16]
 8003e6a:	617a      	str	r2, [r7, #20]
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003e72:	f04f 0b00 	mov.w	fp, #0
 8003e76:	4652      	mov	r2, sl
 8003e78:	465b      	mov	r3, fp
 8003e7a:	f04f 0000 	mov.w	r0, #0
 8003e7e:	f04f 0100 	mov.w	r1, #0
 8003e82:	0159      	lsls	r1, r3, #5
 8003e84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e88:	0150      	lsls	r0, r2, #5
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	ebb2 080a 	subs.w	r8, r2, sl
 8003e92:	eb63 090b 	sbc.w	r9, r3, fp
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003ea2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003ea6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003eaa:	ebb2 0408 	subs.w	r4, r2, r8
 8003eae:	eb63 0509 	sbc.w	r5, r3, r9
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	00eb      	lsls	r3, r5, #3
 8003ebc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ec0:	00e2      	lsls	r2, r4, #3
 8003ec2:	4614      	mov	r4, r2
 8003ec4:	461d      	mov	r5, r3
 8003ec6:	eb14 030a 	adds.w	r3, r4, sl
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	eb45 030b 	adc.w	r3, r5, fp
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ede:	4629      	mov	r1, r5
 8003ee0:	028b      	lsls	r3, r1, #10
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ee8:	4621      	mov	r1, r4
 8003eea:	028a      	lsls	r2, r1, #10
 8003eec:	4610      	mov	r0, r2
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	60fa      	str	r2, [r7, #12]
 8003ef8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003efc:	f7fc f968 	bl	80001d0 <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4613      	mov	r3, r2
 8003f06:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f08:	4b0b      	ldr	r3, [pc, #44]	; (8003f38 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	3301      	adds	r3, #1
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003f18:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f22:	e002      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <HAL_RCC_GetSysClockFreq+0x184>)
 8003f26:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3740      	adds	r7, #64	; 0x40
 8003f30:	46bd      	mov	sp, r7
 8003f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	00f42400 	.word	0x00f42400
 8003f40:	016e3600 	.word	0x016e3600

08003f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f48:	4b03      	ldr	r3, [pc, #12]	; (8003f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000000 	.word	0x20000000

08003f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f60:	f7ff fff0 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	0a9b      	lsrs	r3, r3, #10
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	4903      	ldr	r1, [pc, #12]	; (8003f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f72:	5ccb      	ldrb	r3, [r1, r3]
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	0800df34 	.word	0x0800df34

08003f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f88:	f7ff ffdc 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0b5b      	lsrs	r3, r3, #13
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4903      	ldr	r1, [pc, #12]	; (8003fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	0800df34 	.word	0x0800df34

08003fac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e022      	b.n	8004004 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fc4:	b2db      	uxtb	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d105      	bne.n	8003fd6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7fc fee9 	bl	8000da8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2203      	movs	r2, #3
 8003fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f814 	bl	800400c <HAL_SD_InitCard>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d001      	beq.n	8003fee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e00a      	b.n	8004004 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800400c:	b5b0      	push	{r4, r5, r7, lr}
 800400e:	b08e      	sub	sp, #56	; 0x38
 8004010:	af04      	add	r7, sp, #16
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004014:	2300      	movs	r3, #0
 8004016:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800401c:	2300      	movs	r3, #0
 800401e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004020:	2300      	movs	r3, #0
 8004022:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004024:	2300      	movs	r3, #0
 8004026:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004028:	2376      	movs	r3, #118	; 0x76
 800402a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681d      	ldr	r5, [r3, #0]
 8004030:	466c      	mov	r4, sp
 8004032:	f107 0314 	add.w	r3, r7, #20
 8004036:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800403a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800403e:	f107 0308 	add.w	r3, r7, #8
 8004042:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004044:	4628      	mov	r0, r5
 8004046:	f001 fe61 	bl	8005d0c <SDIO_Init>
 800404a:	4603      	mov	r3, r0
 800404c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8004050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e04f      	b.n	80040fc <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800405c:	4b29      	ldr	r3, [pc, #164]	; (8004104 <HAL_SD_InitCard+0xf8>)
 800405e:	2200      	movs	r2, #0
 8004060:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4618      	mov	r0, r3
 8004068:	f001 fe88 	bl	8005d7c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800406c:	4b25      	ldr	r3, [pc, #148]	; (8004104 <HAL_SD_InitCard+0xf8>)
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004072:	2002      	movs	r0, #2
 8004074:	f7fd f96c 	bl	8001350 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fe11 	bl	8004ca0 <SD_PowerON>
 800407e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004080:	6a3b      	ldr	r3, [r7, #32]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00b      	beq.n	800409e <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2201      	movs	r2, #1
 800408a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e02e      	b.n	80040fc <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 fd30 	bl	8004b04 <SD_InitCard>
 80040a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00b      	beq.n	80040c4 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e01b      	b.n	80040fc <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040cc:	4618      	mov	r0, r3
 80040ce:	f001 fee7 	bl	8005ea0 <SDMMC_CmdBlockLength>
 80040d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00f      	beq.n	80040fa <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a0a      	ldr	r2, [pc, #40]	; (8004108 <HAL_SD_InitCard+0xfc>)
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3728      	adds	r7, #40	; 0x28
 8004100:	46bd      	mov	sp, r7
 8004102:	bdb0      	pop	{r4, r5, r7, pc}
 8004104:	422580a0 	.word	0x422580a0
 8004108:	004005ff 	.word	0x004005ff

0800410c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08c      	sub	sp, #48	; 0x30
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
 8004118:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d107      	bne.n	8004134 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e0c0      	b.n	80042b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800413a:	b2db      	uxtb	r3, r3
 800413c:	2b01      	cmp	r3, #1
 800413e:	f040 80b9 	bne.w	80042b4 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2200      	movs	r2, #0
 8004146:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004148:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	441a      	add	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004152:	429a      	cmp	r2, r3
 8004154:	d907      	bls.n	8004166 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e0a7      	b.n	80042b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2203      	movs	r2, #3
 800416a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2200      	movs	r2, #0
 8004174:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	6812      	ldr	r2, [r2, #0]
 8004180:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8004184:	f043 0302 	orr.w	r3, r3, #2
 8004188:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	4a4c      	ldr	r2, [pc, #304]	; (80042c0 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	4a4b      	ldr	r2, [pc, #300]	; (80042c4 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004198:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	2200      	movs	r2, #0
 80041a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	2200      	movs	r2, #0
 80041a8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3380      	adds	r3, #128	; 0x80
 80041d0:	4619      	mov	r1, r3
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	025b      	lsls	r3, r3, #9
 80041d8:	089b      	lsrs	r3, r3, #2
 80041da:	f7fd fc6c 	bl	8001ab6 <HAL_DMA_Start_IT>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d017      	beq.n	8004214 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80041f2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a33      	ldr	r2, [pc, #204]	; (80042c8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80041fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e050      	b.n	80042b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004214:	4b2d      	ldr	r3, [pc, #180]	; (80042cc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	2b01      	cmp	r3, #1
 8004220:	d002      	beq.n	8004228 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8004222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004224:	025b      	lsls	r3, r3, #9
 8004226:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004228:	f04f 33ff 	mov.w	r3, #4294967295
 800422c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	025b      	lsls	r3, r3, #9
 8004232:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004234:	2390      	movs	r3, #144	; 0x90
 8004236:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004238:	2302      	movs	r3, #2
 800423a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800423c:	2300      	movs	r3, #0
 800423e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004240:	2301      	movs	r3, #1
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f107 0210 	add.w	r2, r7, #16
 800424c:	4611      	mov	r1, r2
 800424e:	4618      	mov	r0, r3
 8004250:	f001 fdfa 	bl	8005e48 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d90a      	bls.n	8004270 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2282      	movs	r2, #130	; 0x82
 800425e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004266:	4618      	mov	r0, r3
 8004268:	f001 fe5e 	bl	8005f28 <SDMMC_CmdReadMultiBlock>
 800426c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800426e:	e009      	b.n	8004284 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2281      	movs	r2, #129	; 0x81
 8004274:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800427c:	4618      	mov	r0, r3
 800427e:	f001 fe31 	bl	8005ee4 <SDMMC_CmdReadSingleBlock>
 8004282:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d012      	beq.n	80042b0 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a0e      	ldr	r2, [pc, #56]	; (80042c8 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004290:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004298:	431a      	orrs	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e002      	b.n	80042b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80042b0:	2300      	movs	r3, #0
 80042b2:	e000      	b.n	80042b6 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
  }
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3730      	adds	r7, #48	; 0x30
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	080049ef 	.word	0x080049ef
 80042c4:	08004a61 	.word	0x08004a61
 80042c8:	004005ff 	.word	0x004005ff
 80042cc:	4225858c 	.word	0x4225858c

080042d0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b08c      	sub	sp, #48	; 0x30
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d107      	bne.n	80042f8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e0c5      	b.n	8004484 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	f040 80be 	bne.w	8004482 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800430c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	441a      	add	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004316:	429a      	cmp	r2, r3
 8004318:	d907      	bls.n	800432a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e0ac      	b.n	8004484 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2203      	movs	r2, #3
 800432e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2200      	movs	r2, #0
 8004338:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8004348:	f043 0302 	orr.w	r3, r3, #2
 800434c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004352:	4a4e      	ldr	r2, [pc, #312]	; (800448c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004354:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	4a4d      	ldr	r2, [pc, #308]	; (8004490 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800435c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004362:	2200      	movs	r2, #0
 8004364:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436a:	2b01      	cmp	r3, #1
 800436c:	d002      	beq.n	8004374 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	025b      	lsls	r3, r3, #9
 8004372:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d90a      	bls.n	8004390 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	22a0      	movs	r2, #160	; 0xa0
 800437e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004386:	4618      	mov	r0, r3
 8004388:	f001 fe12 	bl	8005fb0 <SDMMC_CmdWriteMultiBlock>
 800438c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800438e:	e009      	b.n	80043a4 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2290      	movs	r2, #144	; 0x90
 8004394:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800439c:	4618      	mov	r0, r3
 800439e:	f001 fde5 	bl	8005f6c <SDMMC_CmdWriteSingleBlock>
 80043a2:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d012      	beq.n	80043d0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a39      	ldr	r2, [pc, #228]	; (8004494 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80043b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043b8:	431a      	orrs	r2, r3
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e059      	b.n	8004484 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80043d0:	4b31      	ldr	r3, [pc, #196]	; (8004498 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80043d2:	2201      	movs	r2, #1
 80043d4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	2240      	movs	r2, #64	; 0x40
 80043dc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ee:	689a      	ldr	r2, [r3, #8]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	430a      	orrs	r2, r1
 80043f8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3380      	adds	r3, #128	; 0x80
 8004406:	461a      	mov	r2, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	025b      	lsls	r3, r3, #9
 800440c:	089b      	lsrs	r3, r3, #2
 800440e:	f7fd fb52 	bl	8001ab6 <HAL_DMA_Start_IT>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01c      	beq.n	8004452 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8004426:	f023 0302 	bic.w	r3, r3, #2
 800442a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a18      	ldr	r2, [pc, #96]	; (8004494 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004432:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e018      	b.n	8004484 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295
 8004456:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	025b      	lsls	r3, r3, #9
 800445c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800445e:	2390      	movs	r3, #144	; 0x90
 8004460:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004462:	2300      	movs	r3, #0
 8004464:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004466:	2300      	movs	r3, #0
 8004468:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800446a:	2301      	movs	r3, #1
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f107 0210 	add.w	r2, r7, #16
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f001 fce5 	bl	8005e48 <SDIO_ConfigData>

      return HAL_OK;
 800447e:	2300      	movs	r3, #0
 8004480:	e000      	b.n	8004484 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004482:	2302      	movs	r3, #2
  }
}
 8004484:	4618      	mov	r0, r3
 8004486:	3730      	adds	r7, #48	; 0x30
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	080049c5 	.word	0x080049c5
 8004490:	08004a61 	.word	0x08004a61
 8004494:	004005ff 	.word	0x004005ff
 8004498:	4225858c 	.word	0x4225858c

0800449c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044be:	0f9b      	lsrs	r3, r3, #30
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ca:	0e9b      	lsrs	r3, r3, #26
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044dc:	0e1b      	lsrs	r3, r3, #24
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f003 0303 	and.w	r3, r3, #3
 80044e4:	b2da      	uxtb	r2, r3
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044ee:	0c1b      	lsrs	r3, r3, #16
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004506:	b2da      	uxtb	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004510:	0d1b      	lsrs	r3, r3, #20
 8004512:	b29a      	uxth	r2, r3
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800451c:	0c1b      	lsrs	r3, r3, #16
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f003 030f 	and.w	r3, r3, #15
 8004524:	b2da      	uxtb	r2, r3
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800452e:	0bdb      	lsrs	r3, r3, #15
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	b2da      	uxtb	r2, r3
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004540:	0b9b      	lsrs	r3, r3, #14
 8004542:	b2db      	uxtb	r3, r3
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	b2da      	uxtb	r2, r3
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004552:	0b5b      	lsrs	r3, r3, #13
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	b2da      	uxtb	r2, r3
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004564:	0b1b      	lsrs	r3, r3, #12
 8004566:	b2db      	uxtb	r3, r3
 8004568:	f003 0301 	and.w	r3, r3, #1
 800456c:	b2da      	uxtb	r2, r3
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2200      	movs	r2, #0
 8004576:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457c:	2b00      	cmp	r3, #0
 800457e:	d163      	bne.n	8004648 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004584:	009a      	lsls	r2, r3, #2
 8004586:	f640 73fc 	movw	r3, #4092	; 0xffc
 800458a:	4013      	ands	r3, r2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004590:	0f92      	lsrs	r2, r2, #30
 8004592:	431a      	orrs	r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800459c:	0edb      	lsrs	r3, r3, #27
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	f003 0307 	and.w	r3, r3, #7
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ae:	0e1b      	lsrs	r3, r3, #24
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c0:	0d5b      	lsrs	r3, r3, #21
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045d2:	0c9b      	lsrs	r3, r3, #18
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	b2da      	uxtb	r2, r3
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e4:	0bdb      	lsrs	r3, r3, #15
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	7e1b      	ldrb	r3, [r3, #24]
 8004600:	b2db      	uxtb	r3, r3
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	3302      	adds	r3, #2
 8004608:	2201      	movs	r2, #1
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004612:	fb03 f202 	mul.w	r2, r3, r2
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	7a1b      	ldrb	r3, [r3, #8]
 800461e:	b2db      	uxtb	r3, r3
 8004620:	f003 030f 	and.w	r3, r3, #15
 8004624:	2201      	movs	r2, #1
 8004626:	409a      	lsls	r2, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004634:	0a52      	lsrs	r2, r2, #9
 8004636:	fb03 f202 	mul.w	r2, r3, r2
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004644:	661a      	str	r2, [r3, #96]	; 0x60
 8004646:	e031      	b.n	80046ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464c:	2b01      	cmp	r3, #1
 800464e:	d11d      	bne.n	800468c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004654:	041b      	lsls	r3, r3, #16
 8004656:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800465e:	0c1b      	lsrs	r3, r3, #16
 8004660:	431a      	orrs	r2, r3
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	3301      	adds	r3, #1
 800466c:	029a      	lsls	r2, r3, #10
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004680:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	661a      	str	r2, [r3, #96]	; 0x60
 800468a:	e00f      	b.n	80046ac <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a58      	ldr	r2, [pc, #352]	; (80047f4 <HAL_SD_GetCardCSD+0x344>)
 8004692:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e09d      	b.n	80047e8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046b0:	0b9b      	lsrs	r3, r3, #14
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046c2:	09db      	lsrs	r3, r3, #7
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046ca:	b2da      	uxtb	r2, r3
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e4:	0fdb      	lsrs	r3, r3, #31
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f0:	0f5b      	lsrs	r3, r3, #29
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004702:	0e9b      	lsrs	r3, r3, #26
 8004704:	b2db      	uxtb	r3, r3
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	b2da      	uxtb	r2, r3
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004714:	0d9b      	lsrs	r3, r3, #22
 8004716:	b2db      	uxtb	r3, r3
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	b2da      	uxtb	r2, r3
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004726:	0d5b      	lsrs	r3, r3, #21
 8004728:	b2db      	uxtb	r3, r3
 800472a:	f003 0301 	and.w	r3, r3, #1
 800472e:	b2da      	uxtb	r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	0c1b      	lsrs	r3, r3, #16
 8004744:	b2db      	uxtb	r3, r3
 8004746:	f003 0301 	and.w	r3, r3, #1
 800474a:	b2da      	uxtb	r2, r3
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004756:	0bdb      	lsrs	r3, r3, #15
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	b2da      	uxtb	r2, r3
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476a:	0b9b      	lsrs	r3, r3, #14
 800476c:	b2db      	uxtb	r3, r3
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	b2da      	uxtb	r2, r3
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800477e:	0b5b      	lsrs	r3, r3, #13
 8004780:	b2db      	uxtb	r3, r3
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	b2da      	uxtb	r2, r3
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004792:	0b1b      	lsrs	r3, r3, #12
 8004794:	b2db      	uxtb	r3, r3
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	b2da      	uxtb	r2, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a6:	0a9b      	lsrs	r3, r3, #10
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2201      	movs	r2, #1
 80047e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	004005ff 	.word	0x004005ff

080047f8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	370c      	adds	r7, #12
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004850:	b5b0      	push	{r4, r5, r7, lr}
 8004852:	b08e      	sub	sp, #56	; 0x38
 8004854:	af04      	add	r7, sp, #16
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800485a:	2300      	movs	r3, #0
 800485c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2203      	movs	r2, #3
 8004864:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486c:	2b03      	cmp	r3, #3
 800486e:	d02e      	beq.n	80048ce <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004876:	d106      	bne.n	8004886 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800487c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	639a      	str	r2, [r3, #56]	; 0x38
 8004884:	e029      	b.n	80048da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488c:	d10a      	bne.n	80048a4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fabc 	bl	8004e0c <SD_WideBus_Enable>
 8004894:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	639a      	str	r2, [r3, #56]	; 0x38
 80048a2:	e01a      	b.n	80048da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d10a      	bne.n	80048c0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 faf9 	bl	8004ea2 <SD_WideBus_Disable>
 80048b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b6:	6a3b      	ldr	r3, [r7, #32]
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	639a      	str	r2, [r3, #56]	; 0x38
 80048be:	e00c      	b.n	80048da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	639a      	str	r2, [r3, #56]	; 0x38
 80048cc:	e005      	b.n	80048da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00b      	beq.n	80048fa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a26      	ldr	r2, [pc, #152]	; (8004980 <HAL_SD_ConfigWideBusOperation+0x130>)
 80048e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80048f8:	e01f      	b.n	800493a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681d      	ldr	r5, [r3, #0]
 8004920:	466c      	mov	r4, sp
 8004922:	f107 0314 	add.w	r3, r7, #20
 8004926:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800492a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800492e:	f107 0308 	add.w	r3, r7, #8
 8004932:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004934:	4628      	mov	r0, r5
 8004936:	f001 f9e9 	bl	8005d0c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004942:	4618      	mov	r0, r3
 8004944:	f001 faac 	bl	8005ea0 <SDMMC_CmdBlockLength>
 8004948:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00c      	beq.n	800496a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a0a      	ldr	r2, [pc, #40]	; (8004980 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004956:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004972:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004976:	4618      	mov	r0, r3
 8004978:	3728      	adds	r7, #40	; 0x28
 800497a:	46bd      	mov	sp, r7
 800497c:	bdb0      	pop	{r4, r5, r7, pc}
 800497e:	bf00      	nop
 8004980:	004005ff 	.word	0x004005ff

08004984 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800498c:	2300      	movs	r3, #0
 800498e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004990:	f107 030c 	add.w	r3, r7, #12
 8004994:	4619      	mov	r1, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa10 	bl	8004dbc <SD_SendStatus>
 800499c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	0a5b      	lsrs	r3, r3, #9
 80049b4:	f003 030f 	and.w	r3, r3, #15
 80049b8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80049ba:	693b      	ldr	r3, [r7, #16]
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80049e2:	bf00      	nop
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b084      	sub	sp, #16
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a00:	2b82      	cmp	r3, #130	; 0x82
 8004a02:	d111      	bne.n	8004a28 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f001 faf3 	bl	8005ff4 <SDMMC_CmdStopTransfer>
 8004a0e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d008      	beq.n	8004a28 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f7ff fd3a 	bl	800449c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0208 	bic.w	r2, r2, #8
 8004a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004a40:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f003 fb95 	bl	8008180 <HAL_SD_RxCpltCallback>
#endif
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
	...

08004a60 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7fd f879 	bl	8001b66 <HAL_DMA_GetError>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d03e      	beq.n	8004af8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a80:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a88:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d002      	beq.n	8004a96 <SD_DMAError+0x36>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d12d      	bne.n	8004af2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a19      	ldr	r2, [pc, #100]	; (8004b00 <SD_DMAError+0xa0>)
 8004a9c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8004aac:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004aba:	6978      	ldr	r0, [r7, #20]
 8004abc:	f7ff ff62 	bl	8004984 <HAL_SD_GetCardState>
 8004ac0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b06      	cmp	r3, #6
 8004ac6:	d002      	beq.n	8004ace <SD_DMAError+0x6e>
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b05      	cmp	r3, #5
 8004acc:	d10a      	bne.n	8004ae4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f001 fa8e 	bl	8005ff4 <SDMMC_CmdStopTransfer>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	2200      	movs	r2, #0
 8004af0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004af2:	6978      	ldr	r0, [r7, #20]
 8004af4:	f7ff fcd2 	bl	800449c <HAL_SD_ErrorCallback>
#endif
  }
}
 8004af8:	bf00      	nop
 8004afa:	3718      	adds	r7, #24
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	004005ff 	.word	0x004005ff

08004b04 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004b04:	b5b0      	push	{r4, r5, r7, lr}
 8004b06:	b094      	sub	sp, #80	; 0x50
 8004b08:	af04      	add	r7, sp, #16
 8004b0a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f001 f93f 	bl	8005d98 <SDIO_GetPowerState>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d102      	bne.n	8004b26 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b20:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004b24:	e0b8      	b.n	8004c98 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d02f      	beq.n	8004b8e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f001 fb68 	bl	8006208 <SDMMC_CmdSendCID>
 8004b38:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <SD_InitCard+0x40>
    {
      return errorstate;
 8004b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b42:	e0a9      	b.n	8004c98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2100      	movs	r1, #0
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f001 f969 	bl	8005e22 <SDIO_GetResponse>
 8004b50:	4602      	mov	r2, r0
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2104      	movs	r1, #4
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f001 f960 	bl	8005e22 <SDIO_GetResponse>
 8004b62:	4602      	mov	r2, r0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2108      	movs	r1, #8
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f001 f957 	bl	8005e22 <SDIO_GetResponse>
 8004b74:	4602      	mov	r2, r0
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	210c      	movs	r1, #12
 8004b80:	4618      	mov	r0, r3
 8004b82:	f001 f94e 	bl	8005e22 <SDIO_GetResponse>
 8004b86:	4602      	mov	r2, r0
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b92:	2b03      	cmp	r3, #3
 8004b94:	d00d      	beq.n	8004bb2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f107 020e 	add.w	r2, r7, #14
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 fb6e 	bl	8006282 <SDMMC_CmdSetRelAdd>
 8004ba6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <SD_InitCard+0xae>
    {
      return errorstate;
 8004bae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bb0:	e072      	b.n	8004c98 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d036      	beq.n	8004c28 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004bba:	89fb      	ldrh	r3, [r7, #14]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bca:	041b      	lsls	r3, r3, #16
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	f001 fb38 	bl	8006244 <SDMMC_CmdSendCSD>
 8004bd4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bde:	e05b      	b.n	8004c98 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2100      	movs	r1, #0
 8004be6:	4618      	mov	r0, r3
 8004be8:	f001 f91b 	bl	8005e22 <SDIO_GetResponse>
 8004bec:	4602      	mov	r2, r0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2104      	movs	r1, #4
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f001 f912 	bl	8005e22 <SDIO_GetResponse>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2108      	movs	r1, #8
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f001 f909 	bl	8005e22 <SDIO_GetResponse>
 8004c10:	4602      	mov	r2, r0
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	210c      	movs	r1, #12
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f001 f900 	bl	8005e22 <SDIO_GetResponse>
 8004c22:	4602      	mov	r2, r0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2104      	movs	r1, #4
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f001 f8f7 	bl	8005e22 <SDIO_GetResponse>
 8004c34:	4603      	mov	r3, r0
 8004c36:	0d1a      	lsrs	r2, r3, #20
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004c3c:	f107 0310 	add.w	r3, r7, #16
 8004c40:	4619      	mov	r1, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff fc34 	bl	80044b0 <HAL_SD_GetCardCSD>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004c4e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004c52:	e021      	b.n	8004c98 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6819      	ldr	r1, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5c:	041b      	lsls	r3, r3, #16
 8004c5e:	2200      	movs	r2, #0
 8004c60:	461c      	mov	r4, r3
 8004c62:	4615      	mov	r5, r2
 8004c64:	4622      	mov	r2, r4
 8004c66:	462b      	mov	r3, r5
 8004c68:	4608      	mov	r0, r1
 8004c6a:	f001 f9e5 	bl	8006038 <SDMMC_CmdSelDesel>
 8004c6e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <SD_InitCard+0x176>
  {
    return errorstate;
 8004c76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c78:	e00e      	b.n	8004c98 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681d      	ldr	r5, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	466c      	mov	r4, sp
 8004c82:	f103 0210 	add.w	r2, r3, #16
 8004c86:	ca07      	ldmia	r2, {r0, r1, r2}
 8004c88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c90:	4628      	mov	r0, r5
 8004c92:	f001 f83b 	bl	8005d0c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3740      	adds	r7, #64	; 0x40
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bdb0      	pop	{r4, r5, r7, pc}

08004ca0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	617b      	str	r3, [r7, #20]
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f001 f9e0 	bl	800607e <SDMMC_CmdGoIdleState>
 8004cbe:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <SD_PowerON+0x2a>
  {
    return errorstate;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	e072      	b.n	8004db0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f001 f9f3 	bl	80060ba <SDMMC_CmdOperCond>
 8004cd4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00d      	beq.n	8004cf8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f001 f9c9 	bl	800607e <SDMMC_CmdGoIdleState>
 8004cec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d004      	beq.n	8004cfe <SD_PowerON+0x5e>
    {
      return errorstate;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	e05b      	b.n	8004db0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d137      	bne.n	8004d76 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f001 f9f3 	bl	80060f8 <SDMMC_CmdAppCommand>
 8004d12:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d02d      	beq.n	8004d76 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004d1e:	e047      	b.n	8004db0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2100      	movs	r1, #0
 8004d26:	4618      	mov	r0, r3
 8004d28:	f001 f9e6 	bl	80060f8 <SDMMC_CmdAppCommand>
 8004d2c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <SD_PowerON+0x98>
    {
      return errorstate;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	e03b      	b.n	8004db0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	491e      	ldr	r1, [pc, #120]	; (8004db8 <SD_PowerON+0x118>)
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f001 f9fc 	bl	800613c <SDMMC_CmdAppOperCommand>
 8004d44:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004d4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004d50:	e02e      	b.n	8004db0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2100      	movs	r1, #0
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f001 f862 	bl	8005e22 <SDIO_GetResponse>
 8004d5e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	0fdb      	lsrs	r3, r3, #31
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d101      	bne.n	8004d6c <SD_PowerON+0xcc>
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e000      	b.n	8004d6e <SD_PowerON+0xce>
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	613b      	str	r3, [r7, #16]

    count++;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	3301      	adds	r3, #1
 8004d74:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d802      	bhi.n	8004d86 <SD_PowerON+0xe6>
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d0cc      	beq.n	8004d20 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d902      	bls.n	8004d96 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004d90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004d94:	e00c      	b.n	8004db0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d003      	beq.n	8004da8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	645a      	str	r2, [r3, #68]	; 0x44
 8004da6:	e002      	b.n	8004dae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	c1100000 	.word	0xc1100000

08004dbc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d102      	bne.n	8004dd2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004dcc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dd0:	e018      	b.n	8004e04 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dda:	041b      	lsls	r3, r3, #16
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f001 fa70 	bl	80062c4 <SDMMC_CmdSendStatus>
 8004de4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d001      	beq.n	8004df0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	e009      	b.n	8004e04 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2100      	movs	r1, #0
 8004df6:	4618      	mov	r0, r3
 8004df8:	f001 f813 	bl	8005e22 <SDIO_GetResponse>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004e14:	2300      	movs	r3, #0
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	2300      	movs	r3, #0
 8004e1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2100      	movs	r1, #0
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fffd 	bl	8005e22 <SDIO_GetResponse>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e32:	d102      	bne.n	8004e3a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004e34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004e38:	e02f      	b.n	8004e9a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004e3a:	f107 030c 	add.w	r3, r7, #12
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f879 	bl	8004f38 <SD_FindSCR>
 8004e46:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	e023      	b.n	8004e9a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01c      	beq.n	8004e96 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e64:	041b      	lsls	r3, r3, #16
 8004e66:	4619      	mov	r1, r3
 8004e68:	4610      	mov	r0, r2
 8004e6a:	f001 f945 	bl	80060f8 <SDMMC_CmdAppCommand>
 8004e6e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d001      	beq.n	8004e7a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	e00f      	b.n	8004e9a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	2102      	movs	r1, #2
 8004e80:	4618      	mov	r0, r3
 8004e82:	f001 f97e 	bl	8006182 <SDMMC_CmdBusWidth>
 8004e86:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	e003      	b.n	8004e9a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004e92:	2300      	movs	r3, #0
 8004e94:	e001      	b.n	8004e9a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004e96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b086      	sub	sp, #24
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2100      	movs	r1, #0
 8004eb8:	4618      	mov	r0, r3
 8004eba:	f000 ffb2 	bl	8005e22 <SDIO_GetResponse>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ec8:	d102      	bne.n	8004ed0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004eca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ece:	e02f      	b.n	8004f30 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004ed0:	f107 030c 	add.w	r3, r7, #12
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f82e 	bl	8004f38 <SD_FindSCR>
 8004edc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d001      	beq.n	8004ee8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	e023      	b.n	8004f30 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d01c      	beq.n	8004f2c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efa:	041b      	lsls	r3, r3, #16
 8004efc:	4619      	mov	r1, r3
 8004efe:	4610      	mov	r0, r2
 8004f00:	f001 f8fa 	bl	80060f8 <SDMMC_CmdAppCommand>
 8004f04:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d001      	beq.n	8004f10 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	e00f      	b.n	8004f30 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2100      	movs	r1, #0
 8004f16:	4618      	mov	r0, r3
 8004f18:	f001 f933 	bl	8006182 <SDMMC_CmdBusWidth>
 8004f1c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	e003      	b.n	8004f30 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e001      	b.n	8004f30 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004f2c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3718      	adds	r7, #24
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004f38:	b590      	push	{r4, r7, lr}
 8004f3a:	b08f      	sub	sp, #60	; 0x3c
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004f42:	f7fc f9f9 	bl	8001338 <HAL_GetTick>
 8004f46:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004f48:	2300      	movs	r3, #0
 8004f4a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60bb      	str	r3, [r7, #8]
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2108      	movs	r1, #8
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 ff9e 	bl	8005ea0 <SDMMC_CmdBlockLength>
 8004f64:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6e:	e0b2      	b.n	80050d6 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f78:	041b      	lsls	r3, r3, #16
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4610      	mov	r0, r2
 8004f7e:	f001 f8bb 	bl	80060f8 <SDMMC_CmdAppCommand>
 8004f82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <SD_FindSCR+0x56>
  {
    return errorstate;
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	e0a3      	b.n	80050d6 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f92:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004f94:	2308      	movs	r3, #8
 8004f96:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004f98:	2330      	movs	r3, #48	; 0x30
 8004f9a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f107 0210 	add.w	r2, r7, #16
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 ff48 	bl	8005e48 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 f902 	bl	80061c6 <SDMMC_CmdSendSCR>
 8004fc2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d02a      	beq.n	8005020 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	e083      	b.n	80050d6 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00f      	beq.n	8004ffc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6819      	ldr	r1, [r3, #0]
 8004fe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	f107 0208 	add.w	r2, r7, #8
 8004fe8:	18d4      	adds	r4, r2, r3
 8004fea:	4608      	mov	r0, r1
 8004fec:	f000 feb9 	bl	8005d62 <SDIO_ReadFIFO>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	6023      	str	r3, [r4, #0]
      index++;
 8004ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8004ffa:	e006      	b.n	800500a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d012      	beq.n	8005030 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800500a:	f7fc f995 	bl	8001338 <HAL_GetTick>
 800500e:	4602      	mov	r2, r0
 8005010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005012:	1ad3      	subs	r3, r2, r3
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005018:	d102      	bne.n	8005020 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800501a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800501e:	e05a      	b.n	80050d6 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800502a:	2b00      	cmp	r3, #0
 800502c:	d0cf      	beq.n	8004fce <SD_FindSCR+0x96>
 800502e:	e000      	b.n	8005032 <SD_FindSCR+0xfa>
      break;
 8005030:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005038:	f003 0308 	and.w	r3, r3, #8
 800503c:	2b00      	cmp	r3, #0
 800503e:	d005      	beq.n	800504c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	2208      	movs	r2, #8
 8005046:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8005048:	2308      	movs	r3, #8
 800504a:	e044      	b.n	80050d6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005052:	f003 0302 	and.w	r3, r3, #2
 8005056:	2b00      	cmp	r3, #0
 8005058:	d005      	beq.n	8005066 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2202      	movs	r2, #2
 8005060:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8005062:	2302      	movs	r3, #2
 8005064:	e037      	b.n	80050d6 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800506c:	f003 0320 	and.w	r3, r3, #32
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2220      	movs	r2, #32
 800507a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800507c:	2320      	movs	r3, #32
 800507e:	e02a      	b.n	80050d6 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f240 523a 	movw	r2, #1338	; 0x53a
 8005088:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	061a      	lsls	r2, r3, #24
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	021b      	lsls	r3, r3, #8
 8005092:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005096:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	0a1b      	lsrs	r3, r3, #8
 800509c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80050a0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	0e1b      	lsrs	r3, r3, #24
 80050a6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80050a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050aa:	601a      	str	r2, [r3, #0]
    scr++;
 80050ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ae:	3304      	adds	r3, #4
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	061a      	lsls	r2, r3, #24
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	021b      	lsls	r3, r3, #8
 80050ba:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80050be:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	0a1b      	lsrs	r3, r3, #8
 80050c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80050c8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	0e1b      	lsrs	r3, r3, #24
 80050ce:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	373c      	adds	r7, #60	; 0x3c
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd90      	pop	{r4, r7, pc}

080050de <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e07b      	b.n	80051e8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d108      	bne.n	800510a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005100:	d009      	beq.n	8005116 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	61da      	str	r2, [r3, #28]
 8005108:	e005      	b.n	8005116 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b00      	cmp	r3, #0
 8005126:	d106      	bne.n	8005136 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2200      	movs	r2, #0
 800512c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7fb fea1 	bl	8000e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2202      	movs	r2, #2
 800513a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800514c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005168:	431a      	orrs	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	431a      	orrs	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f003 0301 	and.w	r3, r3, #1
 800517c:	431a      	orrs	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005186:	431a      	orrs	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005190:	431a      	orrs	r2, r3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519a:	ea42 0103 	orr.w	r1, r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	0c1b      	lsrs	r3, r3, #16
 80051b4:	f003 0104 	and.w	r1, r3, #4
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	f003 0210 	and.w	r2, r3, #16
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69da      	ldr	r2, [r3, #28]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2201      	movs	r2, #1
 80051e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80051e6:	2300      	movs	r3, #0
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e041      	b.n	8005286 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d106      	bne.n	800521c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7fb ff20 	bl	800105c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3304      	adds	r3, #4
 800522c:	4619      	mov	r1, r3
 800522e:	4610      	mov	r0, r2
 8005230:	f000 f8f4 	bl	800541c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b084      	sub	sp, #16
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005298:	2300      	movs	r3, #0
 800529a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_TIM_ConfigClockSource+0x1c>
 80052a6:	2302      	movs	r3, #2
 80052a8:	e0b4      	b.n	8005414 <HAL_TIM_ConfigClockSource+0x186>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2202      	movs	r2, #2
 80052b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052c8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052d0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e2:	d03e      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0xd4>
 80052e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052e8:	f200 8087 	bhi.w	80053fa <HAL_TIM_ConfigClockSource+0x16c>
 80052ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f0:	f000 8086 	beq.w	8005400 <HAL_TIM_ConfigClockSource+0x172>
 80052f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f8:	d87f      	bhi.n	80053fa <HAL_TIM_ConfigClockSource+0x16c>
 80052fa:	2b70      	cmp	r3, #112	; 0x70
 80052fc:	d01a      	beq.n	8005334 <HAL_TIM_ConfigClockSource+0xa6>
 80052fe:	2b70      	cmp	r3, #112	; 0x70
 8005300:	d87b      	bhi.n	80053fa <HAL_TIM_ConfigClockSource+0x16c>
 8005302:	2b60      	cmp	r3, #96	; 0x60
 8005304:	d050      	beq.n	80053a8 <HAL_TIM_ConfigClockSource+0x11a>
 8005306:	2b60      	cmp	r3, #96	; 0x60
 8005308:	d877      	bhi.n	80053fa <HAL_TIM_ConfigClockSource+0x16c>
 800530a:	2b50      	cmp	r3, #80	; 0x50
 800530c:	d03c      	beq.n	8005388 <HAL_TIM_ConfigClockSource+0xfa>
 800530e:	2b50      	cmp	r3, #80	; 0x50
 8005310:	d873      	bhi.n	80053fa <HAL_TIM_ConfigClockSource+0x16c>
 8005312:	2b40      	cmp	r3, #64	; 0x40
 8005314:	d058      	beq.n	80053c8 <HAL_TIM_ConfigClockSource+0x13a>
 8005316:	2b40      	cmp	r3, #64	; 0x40
 8005318:	d86f      	bhi.n	80053fa <HAL_TIM_ConfigClockSource+0x16c>
 800531a:	2b30      	cmp	r3, #48	; 0x30
 800531c:	d064      	beq.n	80053e8 <HAL_TIM_ConfigClockSource+0x15a>
 800531e:	2b30      	cmp	r3, #48	; 0x30
 8005320:	d86b      	bhi.n	80053fa <HAL_TIM_ConfigClockSource+0x16c>
 8005322:	2b20      	cmp	r3, #32
 8005324:	d060      	beq.n	80053e8 <HAL_TIM_ConfigClockSource+0x15a>
 8005326:	2b20      	cmp	r3, #32
 8005328:	d867      	bhi.n	80053fa <HAL_TIM_ConfigClockSource+0x16c>
 800532a:	2b00      	cmp	r3, #0
 800532c:	d05c      	beq.n	80053e8 <HAL_TIM_ConfigClockSource+0x15a>
 800532e:	2b10      	cmp	r3, #16
 8005330:	d05a      	beq.n	80053e8 <HAL_TIM_ConfigClockSource+0x15a>
 8005332:	e062      	b.n	80053fa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	6899      	ldr	r1, [r3, #8]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	685a      	ldr	r2, [r3, #4]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f000 f984 	bl	8005650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005356:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	609a      	str	r2, [r3, #8]
      break;
 8005360:	e04f      	b.n	8005402 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6899      	ldr	r1, [r3, #8]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	68db      	ldr	r3, [r3, #12]
 8005372:	f000 f96d 	bl	8005650 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689a      	ldr	r2, [r3, #8]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005384:	609a      	str	r2, [r3, #8]
      break;
 8005386:	e03c      	b.n	8005402 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6818      	ldr	r0, [r3, #0]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	6859      	ldr	r1, [r3, #4]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	461a      	mov	r2, r3
 8005396:	f000 f8e1 	bl	800555c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2150      	movs	r1, #80	; 0x50
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 f93a 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 80053a6:	e02c      	b.n	8005402 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6818      	ldr	r0, [r3, #0]
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	6859      	ldr	r1, [r3, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	461a      	mov	r2, r3
 80053b6:	f000 f900 	bl	80055ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2160      	movs	r1, #96	; 0x60
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f92a 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 80053c6:	e01c      	b.n	8005402 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	6859      	ldr	r1, [r3, #4]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	461a      	mov	r2, r3
 80053d6:	f000 f8c1 	bl	800555c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2140      	movs	r1, #64	; 0x40
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f91a 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 80053e6:	e00c      	b.n	8005402 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f000 f911 	bl	800561a <TIM_ITRx_SetConfig>
      break;
 80053f8:	e003      	b.n	8005402 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	73fb      	strb	r3, [r7, #15]
      break;
 80053fe:	e000      	b.n	8005402 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005400:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005412:	7bfb      	ldrb	r3, [r7, #15]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}

0800541c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a40      	ldr	r2, [pc, #256]	; (8005530 <TIM_Base_SetConfig+0x114>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d013      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800543a:	d00f      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a3d      	ldr	r2, [pc, #244]	; (8005534 <TIM_Base_SetConfig+0x118>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d00b      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a3c      	ldr	r2, [pc, #240]	; (8005538 <TIM_Base_SetConfig+0x11c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d007      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a3b      	ldr	r2, [pc, #236]	; (800553c <TIM_Base_SetConfig+0x120>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d003      	beq.n	800545c <TIM_Base_SetConfig+0x40>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a3a      	ldr	r2, [pc, #232]	; (8005540 <TIM_Base_SetConfig+0x124>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d108      	bne.n	800546e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a2f      	ldr	r2, [pc, #188]	; (8005530 <TIM_Base_SetConfig+0x114>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d02b      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800547c:	d027      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a2c      	ldr	r2, [pc, #176]	; (8005534 <TIM_Base_SetConfig+0x118>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d023      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a2b      	ldr	r2, [pc, #172]	; (8005538 <TIM_Base_SetConfig+0x11c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d01f      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a2a      	ldr	r2, [pc, #168]	; (800553c <TIM_Base_SetConfig+0x120>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d01b      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a29      	ldr	r2, [pc, #164]	; (8005540 <TIM_Base_SetConfig+0x124>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d017      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a28      	ldr	r2, [pc, #160]	; (8005544 <TIM_Base_SetConfig+0x128>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d013      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a27      	ldr	r2, [pc, #156]	; (8005548 <TIM_Base_SetConfig+0x12c>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d00f      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a26      	ldr	r2, [pc, #152]	; (800554c <TIM_Base_SetConfig+0x130>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00b      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a25      	ldr	r2, [pc, #148]	; (8005550 <TIM_Base_SetConfig+0x134>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d007      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a24      	ldr	r2, [pc, #144]	; (8005554 <TIM_Base_SetConfig+0x138>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d003      	beq.n	80054ce <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a23      	ldr	r2, [pc, #140]	; (8005558 <TIM_Base_SetConfig+0x13c>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d108      	bne.n	80054e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4313      	orrs	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a0a      	ldr	r2, [pc, #40]	; (8005530 <TIM_Base_SetConfig+0x114>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d003      	beq.n	8005514 <TIM_Base_SetConfig+0xf8>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a0c      	ldr	r2, [pc, #48]	; (8005540 <TIM_Base_SetConfig+0x124>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d103      	bne.n	800551c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	615a      	str	r2, [r3, #20]
}
 8005522:	bf00      	nop
 8005524:	3714      	adds	r7, #20
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40000400 	.word	0x40000400
 8005538:	40000800 	.word	0x40000800
 800553c:	40000c00 	.word	0x40000c00
 8005540:	40010400 	.word	0x40010400
 8005544:	40014000 	.word	0x40014000
 8005548:	40014400 	.word	0x40014400
 800554c:	40014800 	.word	0x40014800
 8005550:	40001800 	.word	0x40001800
 8005554:	40001c00 	.word	0x40001c00
 8005558:	40002000 	.word	0x40002000

0800555c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	f023 0201 	bic.w	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	699b      	ldr	r3, [r3, #24]
 800557e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	693a      	ldr	r2, [r7, #16]
 800558e:	4313      	orrs	r3, r2
 8005590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f023 030a 	bic.w	r3, r3, #10
 8005598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	697a      	ldr	r2, [r7, #20]
 80055ac:	621a      	str	r2, [r3, #32]
}
 80055ae:	bf00      	nop
 80055b0:	371c      	adds	r7, #28
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b087      	sub	sp, #28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	f023 0210 	bic.w	r2, r3, #16
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	031b      	lsls	r3, r3, #12
 80055ea:	697a      	ldr	r2, [r7, #20]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	4313      	orrs	r3, r2
 8005600:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	693a      	ldr	r2, [r7, #16]
 800560c:	621a      	str	r2, [r3, #32]
}
 800560e:	bf00      	nop
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800561a:	b480      	push	{r7}
 800561c:	b085      	sub	sp, #20
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
 8005622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005632:	683a      	ldr	r2, [r7, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	4313      	orrs	r3, r2
 8005638:	f043 0307 	orr.w	r3, r3, #7
 800563c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	609a      	str	r2, [r3, #8]
}
 8005644:	bf00      	nop
 8005646:	3714      	adds	r7, #20
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005650:	b480      	push	{r7}
 8005652:	b087      	sub	sp, #28
 8005654:	af00      	add	r7, sp, #0
 8005656:	60f8      	str	r0, [r7, #12]
 8005658:	60b9      	str	r1, [r7, #8]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800566a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	021a      	lsls	r2, r3, #8
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	431a      	orrs	r2, r3
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4313      	orrs	r3, r2
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	697a      	ldr	r2, [r7, #20]
 8005682:	609a      	str	r2, [r3, #8]
}
 8005684:	bf00      	nop
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005690:	b480      	push	{r7}
 8005692:	b085      	sub	sp, #20
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e05a      	b.n	800575e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a21      	ldr	r2, [pc, #132]	; (800576c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d022      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056f4:	d01d      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a1d      	ldr	r2, [pc, #116]	; (8005770 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d018      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a1b      	ldr	r2, [pc, #108]	; (8005774 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d013      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a1a      	ldr	r2, [pc, #104]	; (8005778 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d00e      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a18      	ldr	r2, [pc, #96]	; (800577c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d009      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a17      	ldr	r2, [pc, #92]	; (8005780 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d004      	beq.n	8005732 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a15      	ldr	r2, [pc, #84]	; (8005784 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d10c      	bne.n	800574c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005738:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	4313      	orrs	r3, r2
 8005742:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68ba      	ldr	r2, [r7, #8]
 800574a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	40010000 	.word	0x40010000
 8005770:	40000400 	.word	0x40000400
 8005774:	40000800 	.word	0x40000800
 8005778:	40000c00 	.word	0x40000c00
 800577c:	40010400 	.word	0x40010400
 8005780:	40014000 	.word	0x40014000
 8005784:	40001800 	.word	0x40001800

08005788 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d101      	bne.n	800579a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	e03f      	b.n	800581a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d106      	bne.n	80057b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7fb fc76 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2224      	movs	r2, #36	; 0x24
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68da      	ldr	r2, [r3, #12]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f829 	bl	8005824 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	691a      	ldr	r2, [r3, #16]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	695a      	ldr	r2, [r3, #20]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68da      	ldr	r2, [r3, #12]
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005800:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005818:	2300      	movs	r3, #0
}
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005828:	b0c0      	sub	sp, #256	; 0x100
 800582a:	af00      	add	r7, sp, #0
 800582c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	691b      	ldr	r3, [r3, #16]
 8005838:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800583c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005840:	68d9      	ldr	r1, [r3, #12]
 8005842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	ea40 0301 	orr.w	r3, r0, r1
 800584c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800584e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005852:	689a      	ldr	r2, [r3, #8]
 8005854:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	431a      	orrs	r2, r3
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005860:	695b      	ldr	r3, [r3, #20]
 8005862:	431a      	orrs	r2, r3
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800587c:	f021 010c 	bic.w	r1, r1, #12
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800588a:	430b      	orrs	r3, r1
 800588c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800588e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800589a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800589e:	6999      	ldr	r1, [r3, #24]
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	ea40 0301 	orr.w	r3, r0, r1
 80058aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	4b8f      	ldr	r3, [pc, #572]	; (8005af0 <UART_SetConfig+0x2cc>)
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d005      	beq.n	80058c4 <UART_SetConfig+0xa0>
 80058b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058bc:	681a      	ldr	r2, [r3, #0]
 80058be:	4b8d      	ldr	r3, [pc, #564]	; (8005af4 <UART_SetConfig+0x2d0>)
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d104      	bne.n	80058ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058c4:	f7fe fb5e 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 80058c8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058cc:	e003      	b.n	80058d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058ce:	f7fe fb45 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 80058d2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058e0:	f040 810c 	bne.w	8005afc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e8:	2200      	movs	r2, #0
 80058ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058ee:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058f6:	4622      	mov	r2, r4
 80058f8:	462b      	mov	r3, r5
 80058fa:	1891      	adds	r1, r2, r2
 80058fc:	65b9      	str	r1, [r7, #88]	; 0x58
 80058fe:	415b      	adcs	r3, r3
 8005900:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005902:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005906:	4621      	mov	r1, r4
 8005908:	eb12 0801 	adds.w	r8, r2, r1
 800590c:	4629      	mov	r1, r5
 800590e:	eb43 0901 	adc.w	r9, r3, r1
 8005912:	f04f 0200 	mov.w	r2, #0
 8005916:	f04f 0300 	mov.w	r3, #0
 800591a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800591e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005922:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005926:	4690      	mov	r8, r2
 8005928:	4699      	mov	r9, r3
 800592a:	4623      	mov	r3, r4
 800592c:	eb18 0303 	adds.w	r3, r8, r3
 8005930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005934:	462b      	mov	r3, r5
 8005936:	eb49 0303 	adc.w	r3, r9, r3
 800593a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800593e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800594a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800594e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005952:	460b      	mov	r3, r1
 8005954:	18db      	adds	r3, r3, r3
 8005956:	653b      	str	r3, [r7, #80]	; 0x50
 8005958:	4613      	mov	r3, r2
 800595a:	eb42 0303 	adc.w	r3, r2, r3
 800595e:	657b      	str	r3, [r7, #84]	; 0x54
 8005960:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005964:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005968:	f7fa fc32 	bl	80001d0 <__aeabi_uldivmod>
 800596c:	4602      	mov	r2, r0
 800596e:	460b      	mov	r3, r1
 8005970:	4b61      	ldr	r3, [pc, #388]	; (8005af8 <UART_SetConfig+0x2d4>)
 8005972:	fba3 2302 	umull	r2, r3, r3, r2
 8005976:	095b      	lsrs	r3, r3, #5
 8005978:	011c      	lsls	r4, r3, #4
 800597a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800597e:	2200      	movs	r2, #0
 8005980:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005984:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005988:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800598c:	4642      	mov	r2, r8
 800598e:	464b      	mov	r3, r9
 8005990:	1891      	adds	r1, r2, r2
 8005992:	64b9      	str	r1, [r7, #72]	; 0x48
 8005994:	415b      	adcs	r3, r3
 8005996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005998:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800599c:	4641      	mov	r1, r8
 800599e:	eb12 0a01 	adds.w	sl, r2, r1
 80059a2:	4649      	mov	r1, r9
 80059a4:	eb43 0b01 	adc.w	fp, r3, r1
 80059a8:	f04f 0200 	mov.w	r2, #0
 80059ac:	f04f 0300 	mov.w	r3, #0
 80059b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059bc:	4692      	mov	sl, r2
 80059be:	469b      	mov	fp, r3
 80059c0:	4643      	mov	r3, r8
 80059c2:	eb1a 0303 	adds.w	r3, sl, r3
 80059c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059ca:	464b      	mov	r3, r9
 80059cc:	eb4b 0303 	adc.w	r3, fp, r3
 80059d0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059e0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059e8:	460b      	mov	r3, r1
 80059ea:	18db      	adds	r3, r3, r3
 80059ec:	643b      	str	r3, [r7, #64]	; 0x40
 80059ee:	4613      	mov	r3, r2
 80059f0:	eb42 0303 	adc.w	r3, r2, r3
 80059f4:	647b      	str	r3, [r7, #68]	; 0x44
 80059f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059fe:	f7fa fbe7 	bl	80001d0 <__aeabi_uldivmod>
 8005a02:	4602      	mov	r2, r0
 8005a04:	460b      	mov	r3, r1
 8005a06:	4611      	mov	r1, r2
 8005a08:	4b3b      	ldr	r3, [pc, #236]	; (8005af8 <UART_SetConfig+0x2d4>)
 8005a0a:	fba3 2301 	umull	r2, r3, r3, r1
 8005a0e:	095b      	lsrs	r3, r3, #5
 8005a10:	2264      	movs	r2, #100	; 0x64
 8005a12:	fb02 f303 	mul.w	r3, r2, r3
 8005a16:	1acb      	subs	r3, r1, r3
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a1e:	4b36      	ldr	r3, [pc, #216]	; (8005af8 <UART_SetConfig+0x2d4>)
 8005a20:	fba3 2302 	umull	r2, r3, r3, r2
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a2c:	441c      	add	r4, r3
 8005a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a38:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a40:	4642      	mov	r2, r8
 8005a42:	464b      	mov	r3, r9
 8005a44:	1891      	adds	r1, r2, r2
 8005a46:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a48:	415b      	adcs	r3, r3
 8005a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a50:	4641      	mov	r1, r8
 8005a52:	1851      	adds	r1, r2, r1
 8005a54:	6339      	str	r1, [r7, #48]	; 0x30
 8005a56:	4649      	mov	r1, r9
 8005a58:	414b      	adcs	r3, r1
 8005a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	f04f 0300 	mov.w	r3, #0
 8005a64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a68:	4659      	mov	r1, fp
 8005a6a:	00cb      	lsls	r3, r1, #3
 8005a6c:	4651      	mov	r1, sl
 8005a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a72:	4651      	mov	r1, sl
 8005a74:	00ca      	lsls	r2, r1, #3
 8005a76:	4610      	mov	r0, r2
 8005a78:	4619      	mov	r1, r3
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	4642      	mov	r2, r8
 8005a7e:	189b      	adds	r3, r3, r2
 8005a80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a84:	464b      	mov	r3, r9
 8005a86:	460a      	mov	r2, r1
 8005a88:	eb42 0303 	adc.w	r3, r2, r3
 8005a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a9c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005aa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	18db      	adds	r3, r3, r3
 8005aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aaa:	4613      	mov	r3, r2
 8005aac:	eb42 0303 	adc.w	r3, r2, r3
 8005ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ab2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ab6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005aba:	f7fa fb89 	bl	80001d0 <__aeabi_uldivmod>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <UART_SetConfig+0x2d4>)
 8005ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	2164      	movs	r1, #100	; 0x64
 8005acc:	fb01 f303 	mul.w	r3, r1, r3
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	00db      	lsls	r3, r3, #3
 8005ad4:	3332      	adds	r3, #50	; 0x32
 8005ad6:	4a08      	ldr	r2, [pc, #32]	; (8005af8 <UART_SetConfig+0x2d4>)
 8005ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8005adc:	095b      	lsrs	r3, r3, #5
 8005ade:	f003 0207 	and.w	r2, r3, #7
 8005ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4422      	add	r2, r4
 8005aea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005aec:	e105      	b.n	8005cfa <UART_SetConfig+0x4d6>
 8005aee:	bf00      	nop
 8005af0:	40011000 	.word	0x40011000
 8005af4:	40011400 	.word	0x40011400
 8005af8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b00:	2200      	movs	r2, #0
 8005b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005b06:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005b0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b0e:	4642      	mov	r2, r8
 8005b10:	464b      	mov	r3, r9
 8005b12:	1891      	adds	r1, r2, r2
 8005b14:	6239      	str	r1, [r7, #32]
 8005b16:	415b      	adcs	r3, r3
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
 8005b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b1e:	4641      	mov	r1, r8
 8005b20:	1854      	adds	r4, r2, r1
 8005b22:	4649      	mov	r1, r9
 8005b24:	eb43 0501 	adc.w	r5, r3, r1
 8005b28:	f04f 0200 	mov.w	r2, #0
 8005b2c:	f04f 0300 	mov.w	r3, #0
 8005b30:	00eb      	lsls	r3, r5, #3
 8005b32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b36:	00e2      	lsls	r2, r4, #3
 8005b38:	4614      	mov	r4, r2
 8005b3a:	461d      	mov	r5, r3
 8005b3c:	4643      	mov	r3, r8
 8005b3e:	18e3      	adds	r3, r4, r3
 8005b40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b44:	464b      	mov	r3, r9
 8005b46:	eb45 0303 	adc.w	r3, r5, r3
 8005b4a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b5e:	f04f 0200 	mov.w	r2, #0
 8005b62:	f04f 0300 	mov.w	r3, #0
 8005b66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	008b      	lsls	r3, r1, #2
 8005b6e:	4621      	mov	r1, r4
 8005b70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b74:	4621      	mov	r1, r4
 8005b76:	008a      	lsls	r2, r1, #2
 8005b78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b7c:	f7fa fb28 	bl	80001d0 <__aeabi_uldivmod>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4b60      	ldr	r3, [pc, #384]	; (8005d08 <UART_SetConfig+0x4e4>)
 8005b86:	fba3 2302 	umull	r2, r3, r3, r2
 8005b8a:	095b      	lsrs	r3, r3, #5
 8005b8c:	011c      	lsls	r4, r3, #4
 8005b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b92:	2200      	movs	r2, #0
 8005b94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b98:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005ba0:	4642      	mov	r2, r8
 8005ba2:	464b      	mov	r3, r9
 8005ba4:	1891      	adds	r1, r2, r2
 8005ba6:	61b9      	str	r1, [r7, #24]
 8005ba8:	415b      	adcs	r3, r3
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bb0:	4641      	mov	r1, r8
 8005bb2:	1851      	adds	r1, r2, r1
 8005bb4:	6139      	str	r1, [r7, #16]
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	414b      	adcs	r3, r1
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bc8:	4659      	mov	r1, fp
 8005bca:	00cb      	lsls	r3, r1, #3
 8005bcc:	4651      	mov	r1, sl
 8005bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bd2:	4651      	mov	r1, sl
 8005bd4:	00ca      	lsls	r2, r1, #3
 8005bd6:	4610      	mov	r0, r2
 8005bd8:	4619      	mov	r1, r3
 8005bda:	4603      	mov	r3, r0
 8005bdc:	4642      	mov	r2, r8
 8005bde:	189b      	adds	r3, r3, r2
 8005be0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005be4:	464b      	mov	r3, r9
 8005be6:	460a      	mov	r2, r1
 8005be8:	eb42 0303 	adc.w	r3, r2, r3
 8005bec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bfa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005bfc:	f04f 0200 	mov.w	r2, #0
 8005c00:	f04f 0300 	mov.w	r3, #0
 8005c04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005c08:	4649      	mov	r1, r9
 8005c0a:	008b      	lsls	r3, r1, #2
 8005c0c:	4641      	mov	r1, r8
 8005c0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c12:	4641      	mov	r1, r8
 8005c14:	008a      	lsls	r2, r1, #2
 8005c16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c1a:	f7fa fad9 	bl	80001d0 <__aeabi_uldivmod>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	460b      	mov	r3, r1
 8005c22:	4b39      	ldr	r3, [pc, #228]	; (8005d08 <UART_SetConfig+0x4e4>)
 8005c24:	fba3 1302 	umull	r1, r3, r3, r2
 8005c28:	095b      	lsrs	r3, r3, #5
 8005c2a:	2164      	movs	r1, #100	; 0x64
 8005c2c:	fb01 f303 	mul.w	r3, r1, r3
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	3332      	adds	r3, #50	; 0x32
 8005c36:	4a34      	ldr	r2, [pc, #208]	; (8005d08 <UART_SetConfig+0x4e4>)
 8005c38:	fba2 2303 	umull	r2, r3, r2, r3
 8005c3c:	095b      	lsrs	r3, r3, #5
 8005c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c42:	441c      	add	r4, r3
 8005c44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c48:	2200      	movs	r2, #0
 8005c4a:	673b      	str	r3, [r7, #112]	; 0x70
 8005c4c:	677a      	str	r2, [r7, #116]	; 0x74
 8005c4e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c52:	4642      	mov	r2, r8
 8005c54:	464b      	mov	r3, r9
 8005c56:	1891      	adds	r1, r2, r2
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	415b      	adcs	r3, r3
 8005c5c:	60fb      	str	r3, [r7, #12]
 8005c5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c62:	4641      	mov	r1, r8
 8005c64:	1851      	adds	r1, r2, r1
 8005c66:	6039      	str	r1, [r7, #0]
 8005c68:	4649      	mov	r1, r9
 8005c6a:	414b      	adcs	r3, r1
 8005c6c:	607b      	str	r3, [r7, #4]
 8005c6e:	f04f 0200 	mov.w	r2, #0
 8005c72:	f04f 0300 	mov.w	r3, #0
 8005c76:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c7a:	4659      	mov	r1, fp
 8005c7c:	00cb      	lsls	r3, r1, #3
 8005c7e:	4651      	mov	r1, sl
 8005c80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c84:	4651      	mov	r1, sl
 8005c86:	00ca      	lsls	r2, r1, #3
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	4642      	mov	r2, r8
 8005c90:	189b      	adds	r3, r3, r2
 8005c92:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c94:	464b      	mov	r3, r9
 8005c96:	460a      	mov	r2, r1
 8005c98:	eb42 0303 	adc.w	r3, r2, r3
 8005c9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	663b      	str	r3, [r7, #96]	; 0x60
 8005ca8:	667a      	str	r2, [r7, #100]	; 0x64
 8005caa:	f04f 0200 	mov.w	r2, #0
 8005cae:	f04f 0300 	mov.w	r3, #0
 8005cb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	008b      	lsls	r3, r1, #2
 8005cba:	4641      	mov	r1, r8
 8005cbc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cc0:	4641      	mov	r1, r8
 8005cc2:	008a      	lsls	r2, r1, #2
 8005cc4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cc8:	f7fa fa82 	bl	80001d0 <__aeabi_uldivmod>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4b0d      	ldr	r3, [pc, #52]	; (8005d08 <UART_SetConfig+0x4e4>)
 8005cd2:	fba3 1302 	umull	r1, r3, r3, r2
 8005cd6:	095b      	lsrs	r3, r3, #5
 8005cd8:	2164      	movs	r1, #100	; 0x64
 8005cda:	fb01 f303 	mul.w	r3, r1, r3
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	3332      	adds	r3, #50	; 0x32
 8005ce4:	4a08      	ldr	r2, [pc, #32]	; (8005d08 <UART_SetConfig+0x4e4>)
 8005ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cea:	095b      	lsrs	r3, r3, #5
 8005cec:	f003 020f 	and.w	r2, r3, #15
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4422      	add	r2, r4
 8005cf8:	609a      	str	r2, [r3, #8]
}
 8005cfa:	bf00      	nop
 8005cfc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005d00:	46bd      	mov	sp, r7
 8005d02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d06:	bf00      	nop
 8005d08:	51eb851f 	.word	0x51eb851f

08005d0c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005d0c:	b084      	sub	sp, #16
 8005d0e:	b480      	push	{r7}
 8005d10:	b085      	sub	sp, #20
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	6078      	str	r0, [r7, #4]
 8005d16:	f107 001c 	add.w	r0, r7, #28
 8005d1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8005d22:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005d24:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005d26:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005d2a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8005d2e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8005d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8005d32:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005d36:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005d46:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	b004      	add	sp, #16
 8005d60:	4770      	bx	lr

08005d62 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b083      	sub	sp, #12
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2203      	movs	r2, #3
 8005d88:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005d8a:	2300      	movs	r3, #0
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f003 0303 	and.w	r3, r3, #3
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005dd2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005dd8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8005dde:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005de0:	68fa      	ldr	r2, [r7, #12]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005dee:	f023 030f 	bic.w	r3, r3, #15
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8005dfa:	2300      	movs	r3, #0
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3714      	adds	r7, #20
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	b2db      	uxtb	r3, r3
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	370c      	adds	r7, #12
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e20:	4770      	bx	lr

08005e22 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b085      	sub	sp, #20
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
 8005e2a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3314      	adds	r3, #20
 8005e30:	461a      	mov	r2, r3
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	4413      	add	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
}  
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005e52:	2300      	movs	r3, #0
 8005e54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e6e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005e74:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005e7a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e86:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005e92:	2300      	movs	r3, #0

}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b088      	sub	sp, #32
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005eae:	2310      	movs	r3, #16
 8005eb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005eb2:	2340      	movs	r3, #64	; 0x40
 8005eb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005eba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ebe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005ec0:	f107 0308 	add.w	r3, r7, #8
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f7ff ff74 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ed0:	2110      	movs	r1, #16
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fa18 	bl	8006308 <SDMMC_GetCmdResp1>
 8005ed8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005eda:	69fb      	ldr	r3, [r7, #28]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3720      	adds	r7, #32
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b088      	sub	sp, #32
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005ef2:	2311      	movs	r3, #17
 8005ef4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005ef6:	2340      	movs	r3, #64	; 0x40
 8005ef8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005efa:	2300      	movs	r3, #0
 8005efc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f04:	f107 0308 	add.w	r3, r7, #8
 8005f08:	4619      	mov	r1, r3
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7ff ff52 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f14:	2111      	movs	r1, #17
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f9f6 	bl	8006308 <SDMMC_GetCmdResp1>
 8005f1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f1e:	69fb      	ldr	r3, [r7, #28]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3720      	adds	r7, #32
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b088      	sub	sp, #32
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005f36:	2312      	movs	r3, #18
 8005f38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f3a:	2340      	movs	r3, #64	; 0x40
 8005f3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f48:	f107 0308 	add.w	r3, r7, #8
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f7ff ff30 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005f54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f58:	2112      	movs	r1, #18
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f9d4 	bl	8006308 <SDMMC_GetCmdResp1>
 8005f60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005f62:	69fb      	ldr	r3, [r7, #28]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005f7a:	2318      	movs	r3, #24
 8005f7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005f7e:	2340      	movs	r3, #64	; 0x40
 8005f80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005f82:	2300      	movs	r3, #0
 8005f84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005f86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005f8c:	f107 0308 	add.w	r3, r7, #8
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7ff ff0e 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f9c:	2118      	movs	r1, #24
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f9b2 	bl	8006308 <SDMMC_GetCmdResp1>
 8005fa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3720      	adds	r7, #32
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b088      	sub	sp, #32
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005fbe:	2319      	movs	r3, #25
 8005fc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005fc2:	2340      	movs	r3, #64	; 0x40
 8005fc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005fce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005fd0:	f107 0308 	add.w	r3, r7, #8
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7ff feec 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe0:	2119      	movs	r1, #25
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 f990 	bl	8006308 <SDMMC_GetCmdResp1>
 8005fe8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005fea:	69fb      	ldr	r3, [r7, #28]
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	3720      	adds	r7, #32
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b088      	sub	sp, #32
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006000:	230c      	movs	r3, #12
 8006002:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006004:	2340      	movs	r3, #64	; 0x40
 8006006:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006008:	2300      	movs	r3, #0
 800600a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800600c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006010:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006012:	f107 0308 	add.w	r3, r7, #8
 8006016:	4619      	mov	r1, r3
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f7ff fecb 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800601e:	4a05      	ldr	r2, [pc, #20]	; (8006034 <SDMMC_CmdStopTransfer+0x40>)
 8006020:	210c      	movs	r1, #12
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f970 	bl	8006308 <SDMMC_GetCmdResp1>
 8006028:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800602a:	69fb      	ldr	r3, [r7, #28]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3720      	adds	r7, #32
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	05f5e100 	.word	0x05f5e100

08006038 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b08a      	sub	sp, #40	; 0x28
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006048:	2307      	movs	r3, #7
 800604a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800604c:	2340      	movs	r3, #64	; 0x40
 800604e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006050:	2300      	movs	r3, #0
 8006052:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006058:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800605a:	f107 0310 	add.w	r3, r7, #16
 800605e:	4619      	mov	r1, r3
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff fea7 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006066:	f241 3288 	movw	r2, #5000	; 0x1388
 800606a:	2107      	movs	r1, #7
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f000 f94b 	bl	8006308 <SDMMC_GetCmdResp1>
 8006072:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006076:	4618      	mov	r0, r3
 8006078:	3728      	adds	r7, #40	; 0x28
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b088      	sub	sp, #32
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006086:	2300      	movs	r3, #0
 8006088:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800608a:	2300      	movs	r3, #0
 800608c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800608e:	2300      	movs	r3, #0
 8006090:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800609a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800609c:	f107 0308 	add.w	r3, r7, #8
 80060a0:	4619      	mov	r1, r3
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f7ff fe86 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fb65 	bl	8006778 <SDMMC_GetCmdError>
 80060ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060b0:	69fb      	ldr	r3, [r7, #28]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3720      	adds	r7, #32
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b088      	sub	sp, #32
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80060c2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80060c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80060c8:	2308      	movs	r3, #8
 80060ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80060cc:	2340      	movs	r3, #64	; 0x40
 80060ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80060d0:	2300      	movs	r3, #0
 80060d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80060d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80060da:	f107 0308 	add.w	r3, r7, #8
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff fe67 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 faf8 	bl	80066dc <SDMMC_GetCmdResp7>
 80060ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80060ee:	69fb      	ldr	r3, [r7, #28]
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3720      	adds	r7, #32
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006106:	2337      	movs	r3, #55	; 0x37
 8006108:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800610a:	2340      	movs	r3, #64	; 0x40
 800610c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800610e:	2300      	movs	r3, #0
 8006110:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006116:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006118:	f107 0308 	add.w	r3, r7, #8
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7ff fe48 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006124:	f241 3288 	movw	r2, #5000	; 0x1388
 8006128:	2137      	movs	r1, #55	; 0x37
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f8ec 	bl	8006308 <SDMMC_GetCmdResp1>
 8006130:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006132:	69fb      	ldr	r3, [r7, #28]
}
 8006134:	4618      	mov	r0, r3
 8006136:	3720      	adds	r7, #32
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800614c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006150:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006152:	2329      	movs	r3, #41	; 0x29
 8006154:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006156:	2340      	movs	r3, #64	; 0x40
 8006158:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800615a:	2300      	movs	r3, #0
 800615c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800615e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006162:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006164:	f107 0308 	add.w	r3, r7, #8
 8006168:	4619      	mov	r1, r3
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f7ff fe22 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f000 f9ff 	bl	8006574 <SDMMC_GetCmdResp3>
 8006176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006178:	69fb      	ldr	r3, [r7, #28]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3720      	adds	r7, #32
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b088      	sub	sp, #32
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8006190:	2306      	movs	r3, #6
 8006192:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006194:	2340      	movs	r3, #64	; 0x40
 8006196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006198:	2300      	movs	r3, #0
 800619a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800619c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061a2:	f107 0308 	add.w	r3, r7, #8
 80061a6:	4619      	mov	r1, r3
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff fe03 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80061ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80061b2:	2106      	movs	r1, #6
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f8a7 	bl	8006308 <SDMMC_GetCmdResp1>
 80061ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061bc:	69fb      	ldr	r3, [r7, #28]
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3720      	adds	r7, #32
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b088      	sub	sp, #32
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80061d2:	2333      	movs	r3, #51	; 0x33
 80061d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80061d6:	2340      	movs	r3, #64	; 0x40
 80061d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80061da:	2300      	movs	r3, #0
 80061dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80061de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80061e4:	f107 0308 	add.w	r3, r7, #8
 80061e8:	4619      	mov	r1, r3
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f7ff fde2 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80061f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80061f4:	2133      	movs	r1, #51	; 0x33
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 f886 	bl	8006308 <SDMMC_GetCmdResp1>
 80061fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80061fe:	69fb      	ldr	r3, [r7, #28]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3720      	adds	r7, #32
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006210:	2300      	movs	r3, #0
 8006212:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006214:	2302      	movs	r3, #2
 8006216:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006218:	23c0      	movs	r3, #192	; 0xc0
 800621a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800621c:	2300      	movs	r3, #0
 800621e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006224:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006226:	f107 0308 	add.w	r3, r7, #8
 800622a:	4619      	mov	r1, r3
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff fdc1 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f956 	bl	80064e4 <SDMMC_GetCmdResp2>
 8006238:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800623a:	69fb      	ldr	r3, [r7, #28]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3720      	adds	r7, #32
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006252:	2309      	movs	r3, #9
 8006254:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006256:	23c0      	movs	r3, #192	; 0xc0
 8006258:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800625e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006262:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006264:	f107 0308 	add.w	r3, r7, #8
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f7ff fda2 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f937 	bl	80064e4 <SDMMC_GetCmdResp2>
 8006276:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006278:	69fb      	ldr	r3, [r7, #28]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3720      	adds	r7, #32
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b088      	sub	sp, #32
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006290:	2303      	movs	r3, #3
 8006292:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006294:	2340      	movs	r3, #64	; 0x40
 8006296:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006298:	2300      	movs	r3, #0
 800629a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800629c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062a2:	f107 0308 	add.w	r3, r7, #8
 80062a6:	4619      	mov	r1, r3
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff fd83 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80062ae:	683a      	ldr	r2, [r7, #0]
 80062b0:	2103      	movs	r1, #3
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f99c 	bl	80065f0 <SDMMC_GetCmdResp6>
 80062b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062ba:	69fb      	ldr	r3, [r7, #28]
}
 80062bc:	4618      	mov	r0, r3
 80062be:	3720      	adds	r7, #32
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b088      	sub	sp, #32
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80062d2:	230d      	movs	r3, #13
 80062d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062d6:	2340      	movs	r3, #64	; 0x40
 80062d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062da:	2300      	movs	r3, #0
 80062dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062e4:	f107 0308 	add.w	r3, r7, #8
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7ff fd62 	bl	8005db4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80062f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80062f4:	210d      	movs	r1, #13
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f806 	bl	8006308 <SDMMC_GetCmdResp1>
 80062fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062fe:	69fb      	ldr	r3, [r7, #28]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3720      	adds	r7, #32
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b088      	sub	sp, #32
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	460b      	mov	r3, r1
 8006312:	607a      	str	r2, [r7, #4]
 8006314:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006316:	4b70      	ldr	r3, [pc, #448]	; (80064d8 <SDMMC_GetCmdResp1+0x1d0>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a70      	ldr	r2, [pc, #448]	; (80064dc <SDMMC_GetCmdResp1+0x1d4>)
 800631c:	fba2 2303 	umull	r2, r3, r2, r3
 8006320:	0a5a      	lsrs	r2, r3, #9
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	fb02 f303 	mul.w	r3, r2, r3
 8006328:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	1e5a      	subs	r2, r3, #1
 800632e:	61fa      	str	r2, [r7, #28]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d102      	bne.n	800633a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006334:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006338:	e0c9      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0ef      	beq.n	800632a <SDMMC_GetCmdResp1+0x22>
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1ea      	bne.n	800632a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d004      	beq.n	800636a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2204      	movs	r2, #4
 8006364:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006366:	2304      	movs	r3, #4
 8006368:	e0b1      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b00      	cmp	r3, #0
 8006374:	d004      	beq.n	8006380 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800637c:	2301      	movs	r3, #1
 800637e:	e0a6      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	22c5      	movs	r2, #197	; 0xc5
 8006384:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f7ff fd3e 	bl	8005e08 <SDIO_GetCommandResponse>
 800638c:	4603      	mov	r3, r0
 800638e:	461a      	mov	r2, r3
 8006390:	7afb      	ldrb	r3, [r7, #11]
 8006392:	4293      	cmp	r3, r2
 8006394:	d001      	beq.n	800639a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006396:	2301      	movs	r3, #1
 8006398:	e099      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800639a:	2100      	movs	r1, #0
 800639c:	68f8      	ldr	r0, [r7, #12]
 800639e:	f7ff fd40 	bl	8005e22 <SDIO_GetResponse>
 80063a2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80063a4:	697a      	ldr	r2, [r7, #20]
 80063a6:	4b4e      	ldr	r3, [pc, #312]	; (80064e0 <SDMMC_GetCmdResp1+0x1d8>)
 80063a8:	4013      	ands	r3, r2
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d101      	bne.n	80063b2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	e08d      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	da02      	bge.n	80063be <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80063b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80063bc:	e087      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d001      	beq.n	80063cc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80063c8:	2340      	movs	r3, #64	; 0x40
 80063ca:	e080      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80063d6:	2380      	movs	r3, #128	; 0x80
 80063d8:	e079      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80063e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80063e8:	e071      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80063f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063f8:	e069      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006408:	e061      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d002      	beq.n	800641a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006414:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006418:	e059      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006428:	e051      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d002      	beq.n	800643a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006438:	e049      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006444:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006448:	e041      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d002      	beq.n	800645a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006458:	e039      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006464:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006468:	e031      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d002      	beq.n	800647a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006474:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006478:	e029      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d002      	beq.n	800648a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006484:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006488:	e021      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d002      	beq.n	800649a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006494:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006498:	e019      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80064a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80064a8:	e011      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d002      	beq.n	80064ba <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80064b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80064b8:	e009      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f003 0308 	and.w	r3, r3, #8
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d002      	beq.n	80064ca <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80064c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80064c8:	e001      	b.n	80064ce <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80064ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3720      	adds	r7, #32
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20000000 	.word	0x20000000
 80064dc:	10624dd3 	.word	0x10624dd3
 80064e0:	fdffe008 	.word	0xfdffe008

080064e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b085      	sub	sp, #20
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80064ec:	4b1f      	ldr	r3, [pc, #124]	; (800656c <SDMMC_GetCmdResp2+0x88>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a1f      	ldr	r2, [pc, #124]	; (8006570 <SDMMC_GetCmdResp2+0x8c>)
 80064f2:	fba2 2303 	umull	r2, r3, r2, r3
 80064f6:	0a5b      	lsrs	r3, r3, #9
 80064f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80064fc:	fb02 f303 	mul.w	r3, r2, r3
 8006500:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	1e5a      	subs	r2, r3, #1
 8006506:	60fa      	str	r2, [r7, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d102      	bne.n	8006512 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800650c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006510:	e026      	b.n	8006560 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006516:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800651e:	2b00      	cmp	r3, #0
 8006520:	d0ef      	beq.n	8006502 <SDMMC_GetCmdResp2+0x1e>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1ea      	bne.n	8006502 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d004      	beq.n	8006542 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2204      	movs	r2, #4
 800653c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800653e:	2304      	movs	r3, #4
 8006540:	e00e      	b.n	8006560 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006546:	f003 0301 	and.w	r3, r3, #1
 800654a:	2b00      	cmp	r3, #0
 800654c:	d004      	beq.n	8006558 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006554:	2301      	movs	r3, #1
 8006556:	e003      	b.n	8006560 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	22c5      	movs	r2, #197	; 0xc5
 800655c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	20000000 	.word	0x20000000
 8006570:	10624dd3 	.word	0x10624dd3

08006574 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8006574:	b480      	push	{r7}
 8006576:	b085      	sub	sp, #20
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800657c:	4b1a      	ldr	r3, [pc, #104]	; (80065e8 <SDMMC_GetCmdResp3+0x74>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a1a      	ldr	r2, [pc, #104]	; (80065ec <SDMMC_GetCmdResp3+0x78>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	0a5b      	lsrs	r3, r3, #9
 8006588:	f241 3288 	movw	r2, #5000	; 0x1388
 800658c:	fb02 f303 	mul.w	r3, r2, r3
 8006590:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	1e5a      	subs	r2, r3, #1
 8006596:	60fa      	str	r2, [r7, #12]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d102      	bne.n	80065a2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800659c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80065a0:	e01b      	b.n	80065da <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0ef      	beq.n	8006592 <SDMMC_GetCmdResp3+0x1e>
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1ea      	bne.n	8006592 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d004      	beq.n	80065d2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2204      	movs	r2, #4
 80065cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80065ce:	2304      	movs	r3, #4
 80065d0:	e003      	b.n	80065da <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	22c5      	movs	r2, #197	; 0xc5
 80065d6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	20000000 	.word	0x20000000
 80065ec:	10624dd3 	.word	0x10624dd3

080065f0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b088      	sub	sp, #32
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	460b      	mov	r3, r1
 80065fa:	607a      	str	r2, [r7, #4]
 80065fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80065fe:	4b35      	ldr	r3, [pc, #212]	; (80066d4 <SDMMC_GetCmdResp6+0xe4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a35      	ldr	r2, [pc, #212]	; (80066d8 <SDMMC_GetCmdResp6+0xe8>)
 8006604:	fba2 2303 	umull	r2, r3, r2, r3
 8006608:	0a5b      	lsrs	r3, r3, #9
 800660a:	f241 3288 	movw	r2, #5000	; 0x1388
 800660e:	fb02 f303 	mul.w	r3, r2, r3
 8006612:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	1e5a      	subs	r2, r3, #1
 8006618:	61fa      	str	r2, [r7, #28]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d102      	bne.n	8006624 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800661e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006622:	e052      	b.n	80066ca <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006628:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0ef      	beq.n	8006614 <SDMMC_GetCmdResp6+0x24>
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1ea      	bne.n	8006614 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006642:	f003 0304 	and.w	r3, r3, #4
 8006646:	2b00      	cmp	r3, #0
 8006648:	d004      	beq.n	8006654 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2204      	movs	r2, #4
 800664e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006650:	2304      	movs	r3, #4
 8006652:	e03a      	b.n	80066ca <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006658:	f003 0301 	and.w	r3, r3, #1
 800665c:	2b00      	cmp	r3, #0
 800665e:	d004      	beq.n	800666a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2201      	movs	r2, #1
 8006664:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006666:	2301      	movs	r3, #1
 8006668:	e02f      	b.n	80066ca <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f7ff fbcc 	bl	8005e08 <SDIO_GetCommandResponse>
 8006670:	4603      	mov	r3, r0
 8006672:	461a      	mov	r2, r3
 8006674:	7afb      	ldrb	r3, [r7, #11]
 8006676:	4293      	cmp	r3, r2
 8006678:	d001      	beq.n	800667e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800667a:	2301      	movs	r3, #1
 800667c:	e025      	b.n	80066ca <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	22c5      	movs	r2, #197	; 0xc5
 8006682:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006684:	2100      	movs	r1, #0
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7ff fbcb 	bl	8005e22 <SDIO_GetResponse>
 800668c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	0c1b      	lsrs	r3, r3, #16
 800669c:	b29a      	uxth	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80066a2:	2300      	movs	r3, #0
 80066a4:	e011      	b.n	80066ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d002      	beq.n	80066b6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80066b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066b4:	e009      	b.n	80066ca <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d002      	beq.n	80066c6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80066c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066c4:	e001      	b.n	80066ca <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80066c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3720      	adds	r7, #32
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000000 	.word	0x20000000
 80066d8:	10624dd3 	.word	0x10624dd3

080066dc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80066dc:	b480      	push	{r7}
 80066de:	b085      	sub	sp, #20
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80066e4:	4b22      	ldr	r3, [pc, #136]	; (8006770 <SDMMC_GetCmdResp7+0x94>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a22      	ldr	r2, [pc, #136]	; (8006774 <SDMMC_GetCmdResp7+0x98>)
 80066ea:	fba2 2303 	umull	r2, r3, r2, r3
 80066ee:	0a5b      	lsrs	r3, r3, #9
 80066f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80066f4:	fb02 f303 	mul.w	r3, r2, r3
 80066f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	1e5a      	subs	r2, r3, #1
 80066fe:	60fa      	str	r2, [r7, #12]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d102      	bne.n	800670a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006704:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006708:	e02c      	b.n	8006764 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800670e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006716:	2b00      	cmp	r3, #0
 8006718:	d0ef      	beq.n	80066fa <SDMMC_GetCmdResp7+0x1e>
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1ea      	bne.n	80066fa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	d004      	beq.n	800673a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2204      	movs	r2, #4
 8006734:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006736:	2304      	movs	r3, #4
 8006738:	e014      	b.n	8006764 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d004      	beq.n	8006750 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2201      	movs	r2, #1
 800674a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800674c:	2301      	movs	r3, #1
 800674e:	e009      	b.n	8006764 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2240      	movs	r2, #64	; 0x40
 8006760:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006762:	2300      	movs	r3, #0
  
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr
 8006770:	20000000 	.word	0x20000000
 8006774:	10624dd3 	.word	0x10624dd3

08006778 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006780:	4b11      	ldr	r3, [pc, #68]	; (80067c8 <SDMMC_GetCmdError+0x50>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a11      	ldr	r2, [pc, #68]	; (80067cc <SDMMC_GetCmdError+0x54>)
 8006786:	fba2 2303 	umull	r2, r3, r2, r3
 800678a:	0a5b      	lsrs	r3, r3, #9
 800678c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006790:	fb02 f303 	mul.w	r3, r2, r3
 8006794:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	1e5a      	subs	r2, r3, #1
 800679a:	60fa      	str	r2, [r7, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d102      	bne.n	80067a6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80067a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80067a4:	e009      	b.n	80067ba <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80067aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d0f1      	beq.n	8006796 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	22c5      	movs	r2, #197	; 0xc5
 80067b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	20000000 	.word	0x20000000
 80067cc:	10624dd3 	.word	0x10624dd3

080067d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80067d0:	b084      	sub	sp, #16
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b084      	sub	sp, #16
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	f107 001c 	add.w	r0, r7, #28
 80067de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d122      	bne.n	800682e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80067fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006800:	687a      	ldr	r2, [r7, #4]
 8006802:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006812:	2b01      	cmp	r3, #1
 8006814:	d105      	bne.n	8006822 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f001 fbee 	bl	8008004 <USB_CoreReset>
 8006828:	4603      	mov	r3, r0
 800682a:	73fb      	strb	r3, [r7, #15]
 800682c:	e01a      	b.n	8006864 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f001 fbe2 	bl	8008004 <USB_CoreReset>
 8006840:	4603      	mov	r3, r0
 8006842:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d106      	bne.n	8006858 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800684e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	639a      	str	r2, [r3, #56]	; 0x38
 8006856:	e005      	b.n	8006864 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	2b01      	cmp	r3, #1
 8006868:	d10b      	bne.n	8006882 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f043 0206 	orr.w	r2, r3, #6
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f043 0220 	orr.w	r2, r3, #32
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006882:	7bfb      	ldrb	r3, [r7, #15]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800688e:	b004      	add	sp, #16
 8006890:	4770      	bx	lr
	...

08006894 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	4613      	mov	r3, r2
 80068a0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80068a2:	79fb      	ldrb	r3, [r7, #7]
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d165      	bne.n	8006974 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4a41      	ldr	r2, [pc, #260]	; (80069b0 <USB_SetTurnaroundTime+0x11c>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d906      	bls.n	80068be <USB_SetTurnaroundTime+0x2a>
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	4a40      	ldr	r2, [pc, #256]	; (80069b4 <USB_SetTurnaroundTime+0x120>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d202      	bcs.n	80068be <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80068b8:	230f      	movs	r3, #15
 80068ba:	617b      	str	r3, [r7, #20]
 80068bc:	e062      	b.n	8006984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	4a3c      	ldr	r2, [pc, #240]	; (80069b4 <USB_SetTurnaroundTime+0x120>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d306      	bcc.n	80068d4 <USB_SetTurnaroundTime+0x40>
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	4a3b      	ldr	r2, [pc, #236]	; (80069b8 <USB_SetTurnaroundTime+0x124>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d202      	bcs.n	80068d4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80068ce:	230e      	movs	r3, #14
 80068d0:	617b      	str	r3, [r7, #20]
 80068d2:	e057      	b.n	8006984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	4a38      	ldr	r2, [pc, #224]	; (80069b8 <USB_SetTurnaroundTime+0x124>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d306      	bcc.n	80068ea <USB_SetTurnaroundTime+0x56>
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	4a37      	ldr	r2, [pc, #220]	; (80069bc <USB_SetTurnaroundTime+0x128>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d202      	bcs.n	80068ea <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80068e4:	230d      	movs	r3, #13
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e04c      	b.n	8006984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	4a33      	ldr	r2, [pc, #204]	; (80069bc <USB_SetTurnaroundTime+0x128>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d306      	bcc.n	8006900 <USB_SetTurnaroundTime+0x6c>
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4a32      	ldr	r2, [pc, #200]	; (80069c0 <USB_SetTurnaroundTime+0x12c>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d802      	bhi.n	8006900 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80068fa:	230c      	movs	r3, #12
 80068fc:	617b      	str	r3, [r7, #20]
 80068fe:	e041      	b.n	8006984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	4a2f      	ldr	r2, [pc, #188]	; (80069c0 <USB_SetTurnaroundTime+0x12c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d906      	bls.n	8006916 <USB_SetTurnaroundTime+0x82>
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	4a2e      	ldr	r2, [pc, #184]	; (80069c4 <USB_SetTurnaroundTime+0x130>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d802      	bhi.n	8006916 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006910:	230b      	movs	r3, #11
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	e036      	b.n	8006984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	4a2a      	ldr	r2, [pc, #168]	; (80069c4 <USB_SetTurnaroundTime+0x130>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d906      	bls.n	800692c <USB_SetTurnaroundTime+0x98>
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	4a29      	ldr	r2, [pc, #164]	; (80069c8 <USB_SetTurnaroundTime+0x134>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d802      	bhi.n	800692c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006926:	230a      	movs	r3, #10
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	e02b      	b.n	8006984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4a26      	ldr	r2, [pc, #152]	; (80069c8 <USB_SetTurnaroundTime+0x134>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d906      	bls.n	8006942 <USB_SetTurnaroundTime+0xae>
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	4a25      	ldr	r2, [pc, #148]	; (80069cc <USB_SetTurnaroundTime+0x138>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d202      	bcs.n	8006942 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800693c:	2309      	movs	r3, #9
 800693e:	617b      	str	r3, [r7, #20]
 8006940:	e020      	b.n	8006984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	4a21      	ldr	r2, [pc, #132]	; (80069cc <USB_SetTurnaroundTime+0x138>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d306      	bcc.n	8006958 <USB_SetTurnaroundTime+0xc4>
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	4a20      	ldr	r2, [pc, #128]	; (80069d0 <USB_SetTurnaroundTime+0x13c>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d802      	bhi.n	8006958 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006952:	2308      	movs	r3, #8
 8006954:	617b      	str	r3, [r7, #20]
 8006956:	e015      	b.n	8006984 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	4a1d      	ldr	r2, [pc, #116]	; (80069d0 <USB_SetTurnaroundTime+0x13c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d906      	bls.n	800696e <USB_SetTurnaroundTime+0xda>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	4a1c      	ldr	r2, [pc, #112]	; (80069d4 <USB_SetTurnaroundTime+0x140>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d202      	bcs.n	800696e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006968:	2307      	movs	r3, #7
 800696a:	617b      	str	r3, [r7, #20]
 800696c:	e00a      	b.n	8006984 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800696e:	2306      	movs	r3, #6
 8006970:	617b      	str	r3, [r7, #20]
 8006972:	e007      	b.n	8006984 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d102      	bne.n	8006980 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800697a:	2309      	movs	r3, #9
 800697c:	617b      	str	r3, [r7, #20]
 800697e:	e001      	b.n	8006984 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006980:	2309      	movs	r3, #9
 8006982:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	68da      	ldr	r2, [r3, #12]
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	029b      	lsls	r3, r3, #10
 8006998:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800699c:	431a      	orrs	r2, r3
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	371c      	adds	r7, #28
 80069a8:	46bd      	mov	sp, r7
 80069aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ae:	4770      	bx	lr
 80069b0:	00d8acbf 	.word	0x00d8acbf
 80069b4:	00e4e1c0 	.word	0x00e4e1c0
 80069b8:	00f42400 	.word	0x00f42400
 80069bc:	01067380 	.word	0x01067380
 80069c0:	011a499f 	.word	0x011a499f
 80069c4:	01312cff 	.word	0x01312cff
 80069c8:	014ca43f 	.word	0x014ca43f
 80069cc:	016e3600 	.word	0x016e3600
 80069d0:	01a6ab1f 	.word	0x01a6ab1f
 80069d4:	01e84800 	.word	0x01e84800

080069d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	f043 0201 	orr.w	r2, r3, #1
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	370c      	adds	r7, #12
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b083      	sub	sp, #12
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	689b      	ldr	r3, [r3, #8]
 8006a06:	f023 0201 	bic.w	r2, r3, #1
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	460b      	mov	r3, r1
 8006a26:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a38:	78fb      	ldrb	r3, [r7, #3]
 8006a3a:	2b01      	cmp	r3, #1
 8006a3c:	d115      	bne.n	8006a6a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a4a:	2001      	movs	r0, #1
 8006a4c:	f7fa fc80 	bl	8001350 <HAL_Delay>
      ms++;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	3301      	adds	r3, #1
 8006a54:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f001 fa45 	bl	8007ee6 <USB_GetMode>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d01e      	beq.n	8006aa0 <USB_SetCurrentMode+0x84>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2b31      	cmp	r3, #49	; 0x31
 8006a66:	d9f0      	bls.n	8006a4a <USB_SetCurrentMode+0x2e>
 8006a68:	e01a      	b.n	8006aa0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a6a:	78fb      	ldrb	r3, [r7, #3]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d115      	bne.n	8006a9c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	f7fa fc67 	bl	8001350 <HAL_Delay>
      ms++;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	3301      	adds	r3, #1
 8006a86:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f001 fa2c 	bl	8007ee6 <USB_GetMode>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d005      	beq.n	8006aa0 <USB_SetCurrentMode+0x84>
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b31      	cmp	r3, #49	; 0x31
 8006a98:	d9f0      	bls.n	8006a7c <USB_SetCurrentMode+0x60>
 8006a9a:	e001      	b.n	8006aa0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e005      	b.n	8006aac <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	2b32      	cmp	r3, #50	; 0x32
 8006aa4:	d101      	bne.n	8006aaa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e000      	b.n	8006aac <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ab4:	b084      	sub	sp, #16
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b086      	sub	sp, #24
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
 8006abe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ac2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006ace:	2300      	movs	r3, #0
 8006ad0:	613b      	str	r3, [r7, #16]
 8006ad2:	e009      	b.n	8006ae8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	3340      	adds	r3, #64	; 0x40
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4413      	add	r3, r2
 8006ade:	2200      	movs	r2, #0
 8006ae0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	613b      	str	r3, [r7, #16]
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	2b0e      	cmp	r3, #14
 8006aec:	d9f2      	bls.n	8006ad4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d11c      	bne.n	8006b2e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b02:	f043 0302 	orr.w	r3, r3, #2
 8006b06:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b0c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b18:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	639a      	str	r2, [r3, #56]	; 0x38
 8006b2c:	e00b      	b.n	8006b46 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b4c:	461a      	mov	r2, r3
 8006b4e:	2300      	movs	r3, #0
 8006b50:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b58:	4619      	mov	r1, r3
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b60:	461a      	mov	r2, r3
 8006b62:	680b      	ldr	r3, [r1, #0]
 8006b64:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d10c      	bne.n	8006b86 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d104      	bne.n	8006b7c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b72:	2100      	movs	r1, #0
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 f965 	bl	8006e44 <USB_SetDevSpeed>
 8006b7a:	e008      	b.n	8006b8e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b7c:	2101      	movs	r1, #1
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f960 	bl	8006e44 <USB_SetDevSpeed>
 8006b84:	e003      	b.n	8006b8e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b86:	2103      	movs	r1, #3
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 f95b 	bl	8006e44 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b8e:	2110      	movs	r1, #16
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f8f3 	bl	8006d7c <USB_FlushTxFifo>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 f91f 	bl	8006de4 <USB_FlushRxFifo>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	2300      	movs	r3, #0
 8006bba:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bce:	461a      	mov	r2, r3
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	613b      	str	r3, [r7, #16]
 8006bd8:	e043      	b.n	8006c62 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	015a      	lsls	r2, r3, #5
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	4413      	add	r3, r2
 8006be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bf0:	d118      	bne.n	8006c24 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d10a      	bne.n	8006c0e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c04:	461a      	mov	r2, r3
 8006c06:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c0a:	6013      	str	r3, [r2, #0]
 8006c0c:	e013      	b.n	8006c36 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	e008      	b.n	8006c36 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	015a      	lsls	r2, r3, #5
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c30:	461a      	mov	r2, r3
 8006c32:	2300      	movs	r3, #0
 8006c34:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	015a      	lsls	r2, r3, #5
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c42:	461a      	mov	r2, r3
 8006c44:	2300      	movs	r3, #0
 8006c46:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	461a      	mov	r2, r3
 8006c56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c5a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	693a      	ldr	r2, [r7, #16]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d3b7      	bcc.n	8006bda <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	613b      	str	r3, [r7, #16]
 8006c6e:	e043      	b.n	8006cf8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c86:	d118      	bne.n	8006cba <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d10a      	bne.n	8006ca4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ca0:	6013      	str	r3, [r2, #0]
 8006ca2:	e013      	b.n	8006ccc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cb6:	6013      	str	r3, [r2, #0]
 8006cb8:	e008      	b.n	8006ccc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	2300      	movs	r3, #0
 8006cca:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	015a      	lsls	r2, r3, #5
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd8:	461a      	mov	r2, r3
 8006cda:	2300      	movs	r3, #0
 8006cdc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cea:	461a      	mov	r2, r3
 8006cec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cf0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	613b      	str	r3, [r7, #16]
 8006cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfa:	693a      	ldr	r2, [r7, #16]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d3b7      	bcc.n	8006c70 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d12:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006d20:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d105      	bne.n	8006d34 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	699b      	ldr	r3, [r3, #24]
 8006d2c:	f043 0210 	orr.w	r2, r3, #16
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	699a      	ldr	r2, [r3, #24]
 8006d38:	4b0f      	ldr	r3, [pc, #60]	; (8006d78 <USB_DevInit+0x2c4>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d005      	beq.n	8006d52 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f043 0208 	orr.w	r2, r3, #8
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d107      	bne.n	8006d68 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d60:	f043 0304 	orr.w	r3, r3, #4
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d74:	b004      	add	sp, #16
 8006d76:	4770      	bx	lr
 8006d78:	803c3800 	.word	0x803c3800

08006d7c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d86:	2300      	movs	r3, #0
 8006d88:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4a13      	ldr	r2, [pc, #76]	; (8006de0 <USB_FlushTxFifo+0x64>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d901      	bls.n	8006d9c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e01b      	b.n	8006dd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	daf2      	bge.n	8006d8a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006da4:	2300      	movs	r3, #0
 8006da6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	019b      	lsls	r3, r3, #6
 8006dac:	f043 0220 	orr.w	r2, r3, #32
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3301      	adds	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4a08      	ldr	r2, [pc, #32]	; (8006de0 <USB_FlushTxFifo+0x64>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d901      	bls.n	8006dc6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e006      	b.n	8006dd4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	691b      	ldr	r3, [r3, #16]
 8006dca:	f003 0320 	and.w	r3, r3, #32
 8006dce:	2b20      	cmp	r3, #32
 8006dd0:	d0f0      	beq.n	8006db4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3714      	adds	r7, #20
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	00030d40 	.word	0x00030d40

08006de4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3301      	adds	r3, #1
 8006df4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	4a11      	ldr	r2, [pc, #68]	; (8006e40 <USB_FlushRxFifo+0x5c>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d901      	bls.n	8006e02 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006dfe:	2303      	movs	r3, #3
 8006e00:	e018      	b.n	8006e34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	daf2      	bge.n	8006df0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2210      	movs	r2, #16
 8006e12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	4a08      	ldr	r2, [pc, #32]	; (8006e40 <USB_FlushRxFifo+0x5c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d901      	bls.n	8006e26 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e006      	b.n	8006e34 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0310 	and.w	r3, r3, #16
 8006e2e:	2b10      	cmp	r3, #16
 8006e30:	d0f0      	beq.n	8006e14 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr
 8006e40:	00030d40 	.word	0x00030d40

08006e44 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	78fb      	ldrb	r3, [r7, #3]
 8006e5e:	68f9      	ldr	r1, [r7, #12]
 8006e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e64:	4313      	orrs	r3, r2
 8006e66:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b087      	sub	sp, #28
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f003 0306 	and.w	r3, r3, #6
 8006e8e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d102      	bne.n	8006e9c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006e96:	2300      	movs	r3, #0
 8006e98:	75fb      	strb	r3, [r7, #23]
 8006e9a:	e00a      	b.n	8006eb2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d002      	beq.n	8006ea8 <USB_GetDevSpeed+0x32>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2b06      	cmp	r3, #6
 8006ea6:	d102      	bne.n	8006eae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ea8:	2302      	movs	r3, #2
 8006eaa:	75fb      	strb	r3, [r7, #23]
 8006eac:	e001      	b.n	8006eb2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006eae:	230f      	movs	r3, #15
 8006eb0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006eb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	371c      	adds	r7, #28
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	785b      	ldrb	r3, [r3, #1]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d13a      	bne.n	8006f52 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee2:	69da      	ldr	r2, [r3, #28]
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	f003 030f 	and.w	r3, r3, #15
 8006eec:	2101      	movs	r1, #1
 8006eee:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	68f9      	ldr	r1, [r7, #12]
 8006ef6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006efa:	4313      	orrs	r3, r2
 8006efc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	015a      	lsls	r2, r3, #5
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d155      	bne.n	8006fc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	015a      	lsls	r2, r3, #5
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	791b      	ldrb	r3, [r3, #4]
 8006f2e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f30:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	059b      	lsls	r3, r3, #22
 8006f36:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	0151      	lsls	r1, r2, #5
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	440a      	add	r2, r1
 8006f42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	e036      	b.n	8006fc0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f58:	69da      	ldr	r2, [r3, #28]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	2101      	movs	r1, #1
 8006f64:	fa01 f303 	lsl.w	r3, r1, r3
 8006f68:	041b      	lsls	r3, r3, #16
 8006f6a:	68f9      	ldr	r1, [r7, #12]
 8006f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f70:	4313      	orrs	r3, r2
 8006f72:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d11a      	bne.n	8006fc0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	015a      	lsls	r2, r3, #5
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	4413      	add	r3, r2
 8006f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	791b      	ldrb	r3, [r3, #4]
 8006fa4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006fa6:	430b      	orrs	r3, r1
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	0151      	lsls	r1, r2, #5
 8006fae:	68fa      	ldr	r2, [r7, #12]
 8006fb0:	440a      	add	r2, r1
 8006fb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fbe:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3714      	adds	r7, #20
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
	...

08006fd0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	785b      	ldrb	r3, [r3, #1]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d161      	bne.n	80070b0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ffe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007002:	d11f      	bne.n	8007044 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	0151      	lsls	r1, r2, #5
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	440a      	add	r2, r1
 800701a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800701e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007022:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	015a      	lsls	r2, r3, #5
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	4413      	add	r3, r2
 800702c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	0151      	lsls	r1, r2, #5
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	440a      	add	r2, r1
 800703a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800703e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007042:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	f003 030f 	and.w	r3, r3, #15
 8007054:	2101      	movs	r1, #1
 8007056:	fa01 f303 	lsl.w	r3, r1, r3
 800705a:	b29b      	uxth	r3, r3
 800705c:	43db      	mvns	r3, r3
 800705e:	68f9      	ldr	r1, [r7, #12]
 8007060:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007064:	4013      	ands	r3, r2
 8007066:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800706e:	69da      	ldr	r2, [r3, #28]
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	f003 030f 	and.w	r3, r3, #15
 8007078:	2101      	movs	r1, #1
 800707a:	fa01 f303 	lsl.w	r3, r1, r3
 800707e:	b29b      	uxth	r3, r3
 8007080:	43db      	mvns	r3, r3
 8007082:	68f9      	ldr	r1, [r7, #12]
 8007084:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007088:	4013      	ands	r3, r2
 800708a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	015a      	lsls	r2, r3, #5
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	4413      	add	r3, r2
 8007094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	0159      	lsls	r1, r3, #5
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	440b      	add	r3, r1
 80070a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a6:	4619      	mov	r1, r3
 80070a8:	4b35      	ldr	r3, [pc, #212]	; (8007180 <USB_DeactivateEndpoint+0x1b0>)
 80070aa:	4013      	ands	r3, r2
 80070ac:	600b      	str	r3, [r1, #0]
 80070ae:	e060      	b.n	8007172 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070c6:	d11f      	bne.n	8007108 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	0151      	lsls	r1, r2, #5
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	440a      	add	r2, r1
 80070de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070e6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	0151      	lsls	r1, r2, #5
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	440a      	add	r2, r1
 80070fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007102:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007106:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800710e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	f003 030f 	and.w	r3, r3, #15
 8007118:	2101      	movs	r1, #1
 800711a:	fa01 f303 	lsl.w	r3, r1, r3
 800711e:	041b      	lsls	r3, r3, #16
 8007120:	43db      	mvns	r3, r3
 8007122:	68f9      	ldr	r1, [r7, #12]
 8007124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007128:	4013      	ands	r3, r2
 800712a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007132:	69da      	ldr	r2, [r3, #28]
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	f003 030f 	and.w	r3, r3, #15
 800713c:	2101      	movs	r1, #1
 800713e:	fa01 f303 	lsl.w	r3, r1, r3
 8007142:	041b      	lsls	r3, r3, #16
 8007144:	43db      	mvns	r3, r3
 8007146:	68f9      	ldr	r1, [r7, #12]
 8007148:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800714c:	4013      	ands	r3, r2
 800714e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	015a      	lsls	r2, r3, #5
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	4413      	add	r3, r2
 8007158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	0159      	lsls	r1, r3, #5
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	440b      	add	r3, r1
 8007166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800716a:	4619      	mov	r1, r3
 800716c:	4b05      	ldr	r3, [pc, #20]	; (8007184 <USB_DeactivateEndpoint+0x1b4>)
 800716e:	4013      	ands	r3, r2
 8007170:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	4618      	mov	r0, r3
 8007176:	3714      	adds	r7, #20
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	ec337800 	.word	0xec337800
 8007184:	eff37800 	.word	0xeff37800

08007188 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08a      	sub	sp, #40	; 0x28
 800718c:	af02      	add	r7, sp, #8
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	4613      	mov	r3, r2
 8007194:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	785b      	ldrb	r3, [r3, #1]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	f040 815c 	bne.w	8007462 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d132      	bne.n	8007218 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80071d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80071d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	015a      	lsls	r2, r3, #5
 80071da:	69fb      	ldr	r3, [r7, #28]
 80071dc:	4413      	add	r3, r2
 80071de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e2:	691b      	ldr	r3, [r3, #16]
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	0151      	lsls	r1, r2, #5
 80071e8:	69fa      	ldr	r2, [r7, #28]
 80071ea:	440a      	add	r2, r1
 80071ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	015a      	lsls	r2, r3, #5
 80071fa:	69fb      	ldr	r3, [r7, #28]
 80071fc:	4413      	add	r3, r2
 80071fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	0151      	lsls	r1, r2, #5
 8007208:	69fa      	ldr	r2, [r7, #28]
 800720a:	440a      	add	r2, r1
 800720c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007210:	0cdb      	lsrs	r3, r3, #19
 8007212:	04db      	lsls	r3, r3, #19
 8007214:	6113      	str	r3, [r2, #16]
 8007216:	e074      	b.n	8007302 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	015a      	lsls	r2, r3, #5
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	4413      	add	r3, r2
 8007220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	69ba      	ldr	r2, [r7, #24]
 8007228:	0151      	lsls	r1, r2, #5
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	440a      	add	r2, r1
 800722e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007232:	0cdb      	lsrs	r3, r3, #19
 8007234:	04db      	lsls	r3, r3, #19
 8007236:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	015a      	lsls	r2, r3, #5
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	4413      	add	r3, r2
 8007240:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	69ba      	ldr	r2, [r7, #24]
 8007248:	0151      	lsls	r1, r2, #5
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	440a      	add	r2, r1
 800724e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007252:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007256:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800725a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	6999      	ldr	r1, [r3, #24]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	440b      	add	r3, r1
 8007274:	1e59      	subs	r1, r3, #1
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	68db      	ldr	r3, [r3, #12]
 800727a:	fbb1 f3f3 	udiv	r3, r1, r3
 800727e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007280:	4b9d      	ldr	r3, [pc, #628]	; (80074f8 <USB_EPStartXfer+0x370>)
 8007282:	400b      	ands	r3, r1
 8007284:	69b9      	ldr	r1, [r7, #24]
 8007286:	0148      	lsls	r0, r1, #5
 8007288:	69f9      	ldr	r1, [r7, #28]
 800728a:	4401      	add	r1, r0
 800728c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007290:	4313      	orrs	r3, r2
 8007292:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a0:	691a      	ldr	r2, [r3, #16]
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072aa:	69b9      	ldr	r1, [r7, #24]
 80072ac:	0148      	lsls	r0, r1, #5
 80072ae:	69f9      	ldr	r1, [r7, #28]
 80072b0:	4401      	add	r1, r0
 80072b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80072b6:	4313      	orrs	r3, r2
 80072b8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	791b      	ldrb	r3, [r3, #4]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d11f      	bne.n	8007302 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072dc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80072e0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ee:	691b      	ldr	r3, [r3, #16]
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	0151      	lsls	r1, r2, #5
 80072f4:	69fa      	ldr	r2, [r7, #28]
 80072f6:	440a      	add	r2, r1
 80072f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007300:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007302:	79fb      	ldrb	r3, [r7, #7]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d14b      	bne.n	80073a0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	695b      	ldr	r3, [r3, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d009      	beq.n	8007324 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731c:	461a      	mov	r2, r3
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	791b      	ldrb	r3, [r3, #4]
 8007328:	2b01      	cmp	r3, #1
 800732a:	d128      	bne.n	800737e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007338:	2b00      	cmp	r3, #0
 800733a:	d110      	bne.n	800735e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	015a      	lsls	r2, r3, #5
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	4413      	add	r3, r2
 8007344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	0151      	lsls	r1, r2, #5
 800734e:	69fa      	ldr	r2, [r7, #28]
 8007350:	440a      	add	r2, r1
 8007352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007356:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	e00f      	b.n	800737e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	4413      	add	r3, r2
 8007366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	0151      	lsls	r1, r2, #5
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	440a      	add	r2, r1
 8007374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800737c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	0151      	lsls	r1, r2, #5
 8007390:	69fa      	ldr	r2, [r7, #28]
 8007392:	440a      	add	r2, r1
 8007394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007398:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800739c:	6013      	str	r3, [r2, #0]
 800739e:	e133      	b.n	8007608 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	69fb      	ldr	r3, [r7, #28]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	69ba      	ldr	r2, [r7, #24]
 80073b0:	0151      	lsls	r1, r2, #5
 80073b2:	69fa      	ldr	r2, [r7, #28]
 80073b4:	440a      	add	r2, r1
 80073b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80073be:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	791b      	ldrb	r3, [r3, #4]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d015      	beq.n	80073f4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	f000 811b 	beq.w	8007608 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	f003 030f 	and.w	r3, r3, #15
 80073e2:	2101      	movs	r1, #1
 80073e4:	fa01 f303 	lsl.w	r3, r1, r3
 80073e8:	69f9      	ldr	r1, [r7, #28]
 80073ea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073ee:	4313      	orrs	r3, r2
 80073f0:	634b      	str	r3, [r1, #52]	; 0x34
 80073f2:	e109      	b.n	8007608 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073f4:	69fb      	ldr	r3, [r7, #28]
 80073f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007400:	2b00      	cmp	r3, #0
 8007402:	d110      	bne.n	8007426 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	0151      	lsls	r1, r2, #5
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	440a      	add	r2, r1
 800741a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800741e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007422:	6013      	str	r3, [r2, #0]
 8007424:	e00f      	b.n	8007446 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	4413      	add	r3, r2
 800742e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	69ba      	ldr	r2, [r7, #24]
 8007436:	0151      	lsls	r1, r2, #5
 8007438:	69fa      	ldr	r2, [r7, #28]
 800743a:	440a      	add	r2, r1
 800743c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007444:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	6919      	ldr	r1, [r3, #16]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	781a      	ldrb	r2, [r3, #0]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	b298      	uxth	r0, r3
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	4603      	mov	r3, r0
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 fade 	bl	8007a1c <USB_WritePacket>
 8007460:	e0d2      	b.n	8007608 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	4413      	add	r3, r2
 800746a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800746e:	691b      	ldr	r3, [r3, #16]
 8007470:	69ba      	ldr	r2, [r7, #24]
 8007472:	0151      	lsls	r1, r2, #5
 8007474:	69fa      	ldr	r2, [r7, #28]
 8007476:	440a      	add	r2, r1
 8007478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800747c:	0cdb      	lsrs	r3, r3, #19
 800747e:	04db      	lsls	r3, r3, #19
 8007480:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007482:	69bb      	ldr	r3, [r7, #24]
 8007484:	015a      	lsls	r2, r3, #5
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	4413      	add	r3, r2
 800748a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	69ba      	ldr	r2, [r7, #24]
 8007492:	0151      	lsls	r1, r2, #5
 8007494:	69fa      	ldr	r2, [r7, #28]
 8007496:	440a      	add	r2, r1
 8007498:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800749c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	699b      	ldr	r3, [r3, #24]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d126      	bne.n	80074fc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ba:	691a      	ldr	r2, [r3, #16]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80074c4:	69b9      	ldr	r1, [r7, #24]
 80074c6:	0148      	lsls	r0, r1, #5
 80074c8:	69f9      	ldr	r1, [r7, #28]
 80074ca:	4401      	add	r1, r0
 80074cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80074d0:	4313      	orrs	r3, r2
 80074d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	0151      	lsls	r1, r2, #5
 80074e6:	69fa      	ldr	r2, [r7, #28]
 80074e8:	440a      	add	r2, r1
 80074ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074f2:	6113      	str	r3, [r2, #16]
 80074f4:	e03a      	b.n	800756c <USB_EPStartXfer+0x3e4>
 80074f6:	bf00      	nop
 80074f8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	699a      	ldr	r2, [r3, #24]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	68db      	ldr	r3, [r3, #12]
 8007504:	4413      	add	r3, r2
 8007506:	1e5a      	subs	r2, r3, #1
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007510:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	8afa      	ldrh	r2, [r7, #22]
 8007518:	fb03 f202 	mul.w	r2, r3, r2
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007520:	69bb      	ldr	r3, [r7, #24]
 8007522:	015a      	lsls	r2, r3, #5
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	4413      	add	r3, r2
 8007528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752c:	691a      	ldr	r2, [r3, #16]
 800752e:	8afb      	ldrh	r3, [r7, #22]
 8007530:	04d9      	lsls	r1, r3, #19
 8007532:	4b38      	ldr	r3, [pc, #224]	; (8007614 <USB_EPStartXfer+0x48c>)
 8007534:	400b      	ands	r3, r1
 8007536:	69b9      	ldr	r1, [r7, #24]
 8007538:	0148      	lsls	r0, r1, #5
 800753a:	69f9      	ldr	r1, [r7, #28]
 800753c:	4401      	add	r1, r0
 800753e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007542:	4313      	orrs	r3, r2
 8007544:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007552:	691a      	ldr	r2, [r3, #16]
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	69db      	ldr	r3, [r3, #28]
 8007558:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800755c:	69b9      	ldr	r1, [r7, #24]
 800755e:	0148      	lsls	r0, r1, #5
 8007560:	69f9      	ldr	r1, [r7, #28]
 8007562:	4401      	add	r1, r0
 8007564:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007568:	4313      	orrs	r3, r2
 800756a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800756c:	79fb      	ldrb	r3, [r7, #7]
 800756e:	2b01      	cmp	r3, #1
 8007570:	d10d      	bne.n	800758e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d009      	beq.n	800758e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	6919      	ldr	r1, [r3, #16]
 800757e:	69bb      	ldr	r3, [r7, #24]
 8007580:	015a      	lsls	r2, r3, #5
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	4413      	add	r3, r2
 8007586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800758a:	460a      	mov	r2, r1
 800758c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	791b      	ldrb	r3, [r3, #4]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d128      	bne.n	80075e8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d110      	bne.n	80075c8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	015a      	lsls	r2, r3, #5
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	4413      	add	r3, r2
 80075ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	69ba      	ldr	r2, [r7, #24]
 80075b6:	0151      	lsls	r1, r2, #5
 80075b8:	69fa      	ldr	r2, [r7, #28]
 80075ba:	440a      	add	r2, r1
 80075bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80075c4:	6013      	str	r3, [r2, #0]
 80075c6:	e00f      	b.n	80075e8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	015a      	lsls	r2, r3, #5
 80075cc:	69fb      	ldr	r3, [r7, #28]
 80075ce:	4413      	add	r3, r2
 80075d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	0151      	lsls	r1, r2, #5
 80075da:	69fa      	ldr	r2, [r7, #28]
 80075dc:	440a      	add	r2, r1
 80075de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075e6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075e8:	69bb      	ldr	r3, [r7, #24]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	0151      	lsls	r1, r2, #5
 80075fa:	69fa      	ldr	r2, [r7, #28]
 80075fc:	440a      	add	r2, r1
 80075fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007602:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007606:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3720      	adds	r7, #32
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	1ff80000 	.word	0x1ff80000

08007618 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4613      	mov	r3, r2
 8007624:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	785b      	ldrb	r3, [r3, #1]
 8007634:	2b01      	cmp	r3, #1
 8007636:	f040 80ce 	bne.w	80077d6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	699b      	ldr	r3, [r3, #24]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d132      	bne.n	80076a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	4413      	add	r3, r2
 800764a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	0151      	lsls	r1, r2, #5
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	440a      	add	r2, r1
 8007658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800765c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007660:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007664:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	015a      	lsls	r2, r3, #5
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	4413      	add	r3, r2
 800766e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	693a      	ldr	r2, [r7, #16]
 8007676:	0151      	lsls	r1, r2, #5
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	440a      	add	r2, r1
 800767c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007680:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007684:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	4413      	add	r3, r2
 800768e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	693a      	ldr	r2, [r7, #16]
 8007696:	0151      	lsls	r1, r2, #5
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	440a      	add	r2, r1
 800769c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076a0:	0cdb      	lsrs	r3, r3, #19
 80076a2:	04db      	lsls	r3, r3, #19
 80076a4:	6113      	str	r3, [r2, #16]
 80076a6:	e04e      	b.n	8007746 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	015a      	lsls	r2, r3, #5
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	0151      	lsls	r1, r2, #5
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	440a      	add	r2, r1
 80076be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076c2:	0cdb      	lsrs	r3, r3, #19
 80076c4:	04db      	lsls	r3, r3, #19
 80076c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	0151      	lsls	r1, r2, #5
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	440a      	add	r2, r1
 80076de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	699a      	ldr	r2, [r3, #24]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d903      	bls.n	8007700 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	68da      	ldr	r2, [r3, #12]
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	015a      	lsls	r2, r3, #5
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	4413      	add	r3, r2
 8007708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	693a      	ldr	r2, [r7, #16]
 8007710:	0151      	lsls	r1, r2, #5
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	440a      	add	r2, r1
 8007716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800771a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800771e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772c:	691a      	ldr	r2, [r3, #16]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007736:	6939      	ldr	r1, [r7, #16]
 8007738:	0148      	lsls	r0, r1, #5
 800773a:	6979      	ldr	r1, [r7, #20]
 800773c:	4401      	add	r1, r0
 800773e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007742:	4313      	orrs	r3, r2
 8007744:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007746:	79fb      	ldrb	r3, [r7, #7]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d11e      	bne.n	800778a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	695b      	ldr	r3, [r3, #20]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d009      	beq.n	8007768 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007754:	693b      	ldr	r3, [r7, #16]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007760:	461a      	mov	r2, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	015a      	lsls	r2, r3, #5
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	4413      	add	r3, r2
 8007770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	0151      	lsls	r1, r2, #5
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	440a      	add	r2, r1
 800777e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007782:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007786:	6013      	str	r3, [r2, #0]
 8007788:	e097      	b.n	80078ba <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	693a      	ldr	r2, [r7, #16]
 800779a:	0151      	lsls	r1, r2, #5
 800779c:	697a      	ldr	r2, [r7, #20]
 800779e:	440a      	add	r2, r1
 80077a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 8083 	beq.w	80078ba <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	f003 030f 	and.w	r3, r3, #15
 80077c4:	2101      	movs	r1, #1
 80077c6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ca:	6979      	ldr	r1, [r7, #20]
 80077cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077d0:	4313      	orrs	r3, r2
 80077d2:	634b      	str	r3, [r1, #52]	; 0x34
 80077d4:	e071      	b.n	80078ba <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	015a      	lsls	r2, r3, #5
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	4413      	add	r3, r2
 80077de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	0151      	lsls	r1, r2, #5
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	440a      	add	r2, r1
 80077ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077f0:	0cdb      	lsrs	r3, r3, #19
 80077f2:	04db      	lsls	r3, r3, #19
 80077f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007802:	691b      	ldr	r3, [r3, #16]
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	0151      	lsls	r1, r2, #5
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	440a      	add	r2, r1
 800780c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007810:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007814:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007818:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d003      	beq.n	800782a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	440a      	add	r2, r1
 8007848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800784c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007850:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785e:	691a      	ldr	r2, [r3, #16]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	69db      	ldr	r3, [r3, #28]
 8007864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007868:	6939      	ldr	r1, [r7, #16]
 800786a:	0148      	lsls	r0, r1, #5
 800786c:	6979      	ldr	r1, [r7, #20]
 800786e:	4401      	add	r1, r0
 8007870:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007874:	4313      	orrs	r3, r2
 8007876:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007878:	79fb      	ldrb	r3, [r7, #7]
 800787a:	2b01      	cmp	r3, #1
 800787c:	d10d      	bne.n	800789a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d009      	beq.n	800789a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	6919      	ldr	r1, [r3, #16]
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	015a      	lsls	r2, r3, #5
 800788e:	697b      	ldr	r3, [r7, #20]
 8007890:	4413      	add	r3, r2
 8007892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007896:	460a      	mov	r2, r1
 8007898:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800789a:	693b      	ldr	r3, [r7, #16]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	0151      	lsls	r1, r2, #5
 80078ac:	697a      	ldr	r2, [r7, #20]
 80078ae:	440a      	add	r2, r1
 80078b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078b8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	371c      	adds	r7, #28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	785b      	ldrb	r3, [r3, #1]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d14a      	bne.n	800797c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078fe:	f040 8086 	bne.w	8007a0e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	683a      	ldr	r2, [r7, #0]
 8007914:	7812      	ldrb	r2, [r2, #0]
 8007916:	0151      	lsls	r1, r2, #5
 8007918:	693a      	ldr	r2, [r7, #16]
 800791a:	440a      	add	r2, r1
 800791c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007920:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007924:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	015a      	lsls	r2, r3, #5
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	4413      	add	r3, r2
 8007930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	683a      	ldr	r2, [r7, #0]
 8007938:	7812      	ldrb	r2, [r2, #0]
 800793a:	0151      	lsls	r1, r2, #5
 800793c:	693a      	ldr	r2, [r7, #16]
 800793e:	440a      	add	r2, r1
 8007940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007944:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007948:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f242 7210 	movw	r2, #10000	; 0x2710
 8007956:	4293      	cmp	r3, r2
 8007958:	d902      	bls.n	8007960 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	75fb      	strb	r3, [r7, #23]
          break;
 800795e:	e056      	b.n	8007a0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	015a      	lsls	r2, r3, #5
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	4413      	add	r3, r2
 800796a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007974:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007978:	d0e7      	beq.n	800794a <USB_EPStopXfer+0x82>
 800797a:	e048      	b.n	8007a0e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	781b      	ldrb	r3, [r3, #0]
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	4413      	add	r3, r2
 8007986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007990:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007994:	d13b      	bne.n	8007a0e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	781b      	ldrb	r3, [r3, #0]
 800799a:	015a      	lsls	r2, r3, #5
 800799c:	693b      	ldr	r3, [r7, #16]
 800799e:	4413      	add	r3, r2
 80079a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	7812      	ldrb	r2, [r2, #0]
 80079aa:	0151      	lsls	r1, r2, #5
 80079ac:	693a      	ldr	r2, [r7, #16]
 80079ae:	440a      	add	r2, r1
 80079b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80079b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	683a      	ldr	r2, [r7, #0]
 80079cc:	7812      	ldrb	r2, [r2, #0]
 80079ce:	0151      	lsls	r1, r2, #5
 80079d0:	693a      	ldr	r2, [r7, #16]
 80079d2:	440a      	add	r2, r1
 80079d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	3301      	adds	r3, #1
 80079e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d902      	bls.n	80079f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	75fb      	strb	r3, [r7, #23]
          break;
 80079f2:	e00c      	b.n	8007a0e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a0c:	d0e7      	beq.n	80079de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007a0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	371c      	adds	r7, #28
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b089      	sub	sp, #36	; 0x24
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	60f8      	str	r0, [r7, #12]
 8007a24:	60b9      	str	r1, [r7, #8]
 8007a26:	4611      	mov	r1, r2
 8007a28:	461a      	mov	r2, r3
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	71fb      	strb	r3, [r7, #7]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d123      	bne.n	8007a8a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a42:	88bb      	ldrh	r3, [r7, #4]
 8007a44:	3303      	adds	r3, #3
 8007a46:	089b      	lsrs	r3, r3, #2
 8007a48:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	e018      	b.n	8007a82 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a50:	79fb      	ldrb	r3, [r7, #7]
 8007a52:	031a      	lsls	r2, r3, #12
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	4413      	add	r3, r2
 8007a58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a64:	69fb      	ldr	r3, [r7, #28]
 8007a66:	3301      	adds	r3, #1
 8007a68:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	3301      	adds	r3, #1
 8007a6e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	3301      	adds	r3, #1
 8007a74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	3301      	adds	r3, #1
 8007a7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a7c:	69bb      	ldr	r3, [r7, #24]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	61bb      	str	r3, [r7, #24]
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d3e2      	bcc.n	8007a50 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3724      	adds	r7, #36	; 0x24
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b08b      	sub	sp, #44	; 0x2c
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007aae:	88fb      	ldrh	r3, [r7, #6]
 8007ab0:	089b      	lsrs	r3, r3, #2
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ab6:	88fb      	ldrh	r3, [r7, #6]
 8007ab8:	f003 0303 	and.w	r3, r3, #3
 8007abc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007abe:	2300      	movs	r3, #0
 8007ac0:	623b      	str	r3, [r7, #32]
 8007ac2:	e014      	b.n	8007aee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ac4:	69bb      	ldr	r3, [r7, #24]
 8007ac6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	3301      	adds	r3, #1
 8007ada:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	3301      	adds	r3, #1
 8007ae0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	3301      	adds	r3, #1
 8007ae6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007ae8:	6a3b      	ldr	r3, [r7, #32]
 8007aea:	3301      	adds	r3, #1
 8007aec:	623b      	str	r3, [r7, #32]
 8007aee:	6a3a      	ldr	r2, [r7, #32]
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d3e6      	bcc.n	8007ac4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007af6:	8bfb      	ldrh	r3, [r7, #30]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d01e      	beq.n	8007b3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007afc:	2300      	movs	r3, #0
 8007afe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007b06:	461a      	mov	r2, r3
 8007b08:	f107 0310 	add.w	r3, r7, #16
 8007b0c:	6812      	ldr	r2, [r2, #0]
 8007b0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	6a3b      	ldr	r3, [r7, #32]
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	00db      	lsls	r3, r3, #3
 8007b18:	fa22 f303 	lsr.w	r3, r2, r3
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b20:	701a      	strb	r2, [r3, #0]
      i++;
 8007b22:	6a3b      	ldr	r3, [r7, #32]
 8007b24:	3301      	adds	r3, #1
 8007b26:	623b      	str	r3, [r7, #32]
      pDest++;
 8007b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2a:	3301      	adds	r3, #1
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007b2e:	8bfb      	ldrh	r3, [r7, #30]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007b34:	8bfb      	ldrh	r3, [r7, #30]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d1ea      	bne.n	8007b10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	372c      	adds	r7, #44	; 0x2c
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	785b      	ldrb	r3, [r3, #1]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d12c      	bne.n	8007bbe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	db12      	blt.n	8007b9c <USB_EPSetStall+0x54>
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00f      	beq.n	8007b9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	015a      	lsls	r2, r3, #5
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	4413      	add	r3, r2
 8007b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68ba      	ldr	r2, [r7, #8]
 8007b8c:	0151      	lsls	r1, r2, #5
 8007b8e:	68fa      	ldr	r2, [r7, #12]
 8007b90:	440a      	add	r2, r1
 8007b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	015a      	lsls	r2, r3, #5
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	4413      	add	r3, r2
 8007ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	68ba      	ldr	r2, [r7, #8]
 8007bac:	0151      	lsls	r1, r2, #5
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	440a      	add	r2, r1
 8007bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bba:	6013      	str	r3, [r2, #0]
 8007bbc:	e02b      	b.n	8007c16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	db12      	blt.n	8007bf6 <USB_EPSetStall+0xae>
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00f      	beq.n	8007bf6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	015a      	lsls	r2, r3, #5
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	4413      	add	r3, r2
 8007bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	68ba      	ldr	r2, [r7, #8]
 8007be6:	0151      	lsls	r1, r2, #5
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	440a      	add	r2, r1
 8007bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bf4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	015a      	lsls	r2, r3, #5
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	0151      	lsls	r1, r2, #5
 8007c08:	68fa      	ldr	r2, [r7, #12]
 8007c0a:	440a      	add	r2, r1
 8007c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007c14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	785b      	ldrb	r3, [r3, #1]
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	d128      	bne.n	8007c92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	0151      	lsls	r1, r2, #5
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	440a      	add	r2, r1
 8007c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	791b      	ldrb	r3, [r3, #4]
 8007c64:	2b03      	cmp	r3, #3
 8007c66:	d003      	beq.n	8007c70 <USB_EPClearStall+0x4c>
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	791b      	ldrb	r3, [r3, #4]
 8007c6c:	2b02      	cmp	r3, #2
 8007c6e:	d138      	bne.n	8007ce2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	015a      	lsls	r2, r3, #5
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	4413      	add	r3, r2
 8007c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	0151      	lsls	r1, r2, #5
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	440a      	add	r2, r1
 8007c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c8e:	6013      	str	r3, [r2, #0]
 8007c90:	e027      	b.n	8007ce2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	015a      	lsls	r2, r3, #5
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	4413      	add	r3, r2
 8007c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68ba      	ldr	r2, [r7, #8]
 8007ca2:	0151      	lsls	r1, r2, #5
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	440a      	add	r2, r1
 8007ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cac:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007cb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	791b      	ldrb	r3, [r3, #4]
 8007cb6:	2b03      	cmp	r3, #3
 8007cb8:	d003      	beq.n	8007cc2 <USB_EPClearStall+0x9e>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	791b      	ldrb	r3, [r3, #4]
 8007cbe:	2b02      	cmp	r3, #2
 8007cc0:	d10f      	bne.n	8007ce2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	015a      	lsls	r2, r3, #5
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	4413      	add	r3, r2
 8007cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68ba      	ldr	r2, [r7, #8]
 8007cd2:	0151      	lsls	r1, r2, #5
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	440a      	add	r2, r1
 8007cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ce0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007ce2:	2300      	movs	r3, #0
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3714      	adds	r7, #20
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d0e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007d12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	78fb      	ldrb	r3, [r7, #3]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007d24:	68f9      	ldr	r1, [r7, #12]
 8007d26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68fa      	ldr	r2, [r7, #12]
 8007d52:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d56:	f023 0303 	bic.w	r3, r3, #3
 8007d5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d6a:	f023 0302 	bic.w	r3, r3, #2
 8007d6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3714      	adds	r7, #20
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b085      	sub	sp, #20
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d98:	f023 0303 	bic.w	r3, r3, #3
 8007d9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da4:	685b      	ldr	r3, [r3, #4]
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dac:	f043 0302 	orr.w	r3, r3, #2
 8007db0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007db2:	2300      	movs	r3, #0
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3714      	adds	r7, #20
 8007db8:	46bd      	mov	sp, r7
 8007dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbe:	4770      	bx	lr

08007dc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b085      	sub	sp, #20
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	695b      	ldr	r3, [r3, #20]
 8007dcc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr

08007de6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007de6:	b480      	push	{r7}
 8007de8:	b085      	sub	sp, #20
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e02:	69db      	ldr	r3, [r3, #28]
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	4013      	ands	r3, r2
 8007e08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	0c1b      	lsrs	r3, r3, #16
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b085      	sub	sp, #20
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	b29b      	uxth	r3, r3
}
 8007e42:	4618      	mov	r0, r3
 8007e44:	3714      	adds	r7, #20
 8007e46:	46bd      	mov	sp, r7
 8007e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4c:	4770      	bx	lr

08007e4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e4e:	b480      	push	{r7}
 8007e50:	b085      	sub	sp, #20
 8007e52:	af00      	add	r7, sp, #0
 8007e54:	6078      	str	r0, [r7, #4]
 8007e56:	460b      	mov	r3, r1
 8007e58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e5e:	78fb      	ldrb	r3, [r7, #3]
 8007e60:	015a      	lsls	r2, r3, #5
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	4413      	add	r3, r2
 8007e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6a:	689b      	ldr	r3, [r3, #8]
 8007e6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr

08007e8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b087      	sub	sp, #28
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
 8007e92:	460b      	mov	r3, r1
 8007e94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007eae:	78fb      	ldrb	r3, [r7, #3]
 8007eb0:	f003 030f 	and.w	r3, r3, #15
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	fa22 f303 	lsr.w	r3, r2, r3
 8007eba:	01db      	lsls	r3, r3, #7
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	693a      	ldr	r2, [r7, #16]
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	015a      	lsls	r2, r3, #5
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	4413      	add	r3, r2
 8007ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ed8:	68bb      	ldr	r3, [r7, #8]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	371c      	adds	r7, #28
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	f003 0301 	and.w	r3, r3, #1
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b085      	sub	sp, #20
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f1c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007f20:	f023 0307 	bic.w	r3, r3, #7
 8007f24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f3a:	2300      	movs	r3, #0
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3714      	adds	r7, #20
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b087      	sub	sp, #28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	60f8      	str	r0, [r7, #12]
 8007f50:	460b      	mov	r3, r1
 8007f52:	607a      	str	r2, [r7, #4]
 8007f54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	333c      	adds	r3, #60	; 0x3c
 8007f5e:	3304      	adds	r3, #4
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f64:	693b      	ldr	r3, [r7, #16]
 8007f66:	4a26      	ldr	r2, [pc, #152]	; (8008000 <USB_EP0_OutStart+0xb8>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d90a      	bls.n	8007f82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f7c:	d101      	bne.n	8007f82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	e037      	b.n	8007ff2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f88:	461a      	mov	r2, r3
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	697a      	ldr	r2, [r7, #20]
 8007f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007fa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007fa2:	697b      	ldr	r3, [r7, #20]
 8007fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fb0:	f043 0318 	orr.w	r3, r3, #24
 8007fb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fc4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007fc8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007fca:	7afb      	ldrb	r3, [r7, #11]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d10f      	bne.n	8007ff0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	697a      	ldr	r2, [r7, #20]
 8007fe6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fea:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007fee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	371c      	adds	r7, #28
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	4f54300a 	.word	0x4f54300a

08008004 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008004:	b480      	push	{r7}
 8008006:	b085      	sub	sp, #20
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	3301      	adds	r3, #1
 8008014:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	4a13      	ldr	r2, [pc, #76]	; (8008068 <USB_CoreReset+0x64>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d901      	bls.n	8008022 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800801e:	2303      	movs	r3, #3
 8008020:	e01b      	b.n	800805a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	daf2      	bge.n	8008010 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	691b      	ldr	r3, [r3, #16]
 8008032:	f043 0201 	orr.w	r2, r3, #1
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	3301      	adds	r3, #1
 800803e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4a09      	ldr	r2, [pc, #36]	; (8008068 <USB_CoreReset+0x64>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d901      	bls.n	800804c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e006      	b.n	800805a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	691b      	ldr	r3, [r3, #16]
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b01      	cmp	r3, #1
 8008056:	d0f0      	beq.n	800803a <USB_CoreReset+0x36>

  return HAL_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3714      	adds	r7, #20
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	00030d40 	.word	0x00030d40

0800806c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008070:	4904      	ldr	r1, [pc, #16]	; (8008084 <MX_FATFS_Init+0x18>)
 8008072:	4805      	ldr	r0, [pc, #20]	; (8008088 <MX_FATFS_Init+0x1c>)
 8008074:	f002 fa0c 	bl	800a490 <FATFS_LinkDriver>
 8008078:	4603      	mov	r3, r0
 800807a:	461a      	mov	r2, r3
 800807c:	4b03      	ldr	r3, [pc, #12]	; (800808c <MX_FATFS_Init+0x20>)
 800807e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008080:	bf00      	nop
 8008082:	bd80      	pop	{r7, pc}
 8008084:	20000428 	.word	0x20000428
 8008088:	0800df3c 	.word	0x0800df3c
 800808c:	20000424 	.word	0x20000424

08008090 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800809a:	f000 f87b 	bl	8008194 <BSP_SD_IsDetected>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d001      	beq.n	80080a8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e012      	b.n	80080ce <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80080a8:	480b      	ldr	r0, [pc, #44]	; (80080d8 <BSP_SD_Init+0x48>)
 80080aa:	f7fb ff7f 	bl	8003fac <HAL_SD_Init>
 80080ae:	4603      	mov	r3, r0
 80080b0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80080b2:	79fb      	ldrb	r3, [r7, #7]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d109      	bne.n	80080cc <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80080b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80080bc:	4806      	ldr	r0, [pc, #24]	; (80080d8 <BSP_SD_Init+0x48>)
 80080be:	f7fc fbc7 	bl	8004850 <HAL_SD_ConfigWideBusOperation>
 80080c2:	4603      	mov	r3, r0
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d001      	beq.n	80080cc <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80080cc:	79fb      	ldrb	r3, [r7, #7]
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3708      	adds	r7, #8
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	200001c0 	.word	0x200001c0

080080dc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	68f9      	ldr	r1, [r7, #12]
 80080f2:	4806      	ldr	r0, [pc, #24]	; (800810c <BSP_SD_ReadBlocks_DMA+0x30>)
 80080f4:	f7fc f80a 	bl	800410c <HAL_SD_ReadBlocks_DMA>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008102:	7dfb      	ldrb	r3, [r7, #23]
}
 8008104:	4618      	mov	r0, r3
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	200001c0 	.word	0x200001c0

08008110 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	68f9      	ldr	r1, [r7, #12]
 8008126:	4806      	ldr	r0, [pc, #24]	; (8008140 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008128:	f7fc f8d2 	bl	80042d0 <HAL_SD_WriteBlocks_DMA>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008136:	7dfb      	ldrb	r3, [r7, #23]
}
 8008138:	4618      	mov	r0, r3
 800813a:	3718      	adds	r7, #24
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	200001c0 	.word	0x200001c0

08008144 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008148:	4805      	ldr	r0, [pc, #20]	; (8008160 <BSP_SD_GetCardState+0x1c>)
 800814a:	f7fc fc1b 	bl	8004984 <HAL_SD_GetCardState>
 800814e:	4603      	mov	r3, r0
 8008150:	2b04      	cmp	r3, #4
 8008152:	bf14      	ite	ne
 8008154:	2301      	movne	r3, #1
 8008156:	2300      	moveq	r3, #0
 8008158:	b2db      	uxtb	r3, r3
}
 800815a:	4618      	mov	r0, r3
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	200001c0 	.word	0x200001c0

08008164 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800816c:	6879      	ldr	r1, [r7, #4]
 800816e:	4803      	ldr	r0, [pc, #12]	; (800817c <BSP_SD_GetCardInfo+0x18>)
 8008170:	f7fc fb42 	bl	80047f8 <HAL_SD_GetCardInfo>
}
 8008174:	bf00      	nop
 8008176:	3708      	adds	r7, #8
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}
 800817c:	200001c0 	.word	0x200001c0

08008180 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008188:	f000 f9a2 	bl	80084d0 <BSP_SD_ReadCpltCallback>
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800819a:	2301      	movs	r3, #1
 800819c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800819e:	f000 f80b 	bl	80081b8 <BSP_PlatformIsDetected>
 80081a2:	4603      	mov	r3, r0
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d101      	bne.n	80081ac <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80081a8:	2300      	movs	r3, #0
 80081aa:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80081ac:	79fb      	ldrb	r3, [r7, #7]
 80081ae:	b2db      	uxtb	r3, r3
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80081be:	2301      	movs	r3, #1
 80081c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80081c2:	2180      	movs	r1, #128	; 0x80
 80081c4:	4806      	ldr	r0, [pc, #24]	; (80081e0 <BSP_PlatformIsDetected+0x28>)
 80081c6:	f7f9 fea5 	bl	8001f14 <HAL_GPIO_ReadPin>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80081d0:	2300      	movs	r3, #0
 80081d2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80081d4:	79fb      	ldrb	r3, [r7, #7]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3708      	adds	r7, #8
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	40020800 	.word	0x40020800

080081e4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80081ec:	f002 fa00 	bl	800a5f0 <osKernelGetTickCount>
 80081f0:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80081f2:	e006      	b.n	8008202 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80081f4:	f7ff ffa6 	bl	8008144 <BSP_SD_GetCardState>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d101      	bne.n	8008202 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80081fe:	2300      	movs	r3, #0
 8008200:	e009      	b.n	8008216 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8008202:	f002 f9f5 	bl	800a5f0 <osKernelGetTickCount>
 8008206:	4602      	mov	r2, r0
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	429a      	cmp	r2, r3
 8008210:	d8f0      	bhi.n	80081f4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008212:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
	...

08008220 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	4603      	mov	r3, r0
 8008228:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800822a:	4b0b      	ldr	r3, [pc, #44]	; (8008258 <SD_CheckStatus+0x38>)
 800822c:	2201      	movs	r2, #1
 800822e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008230:	f7ff ff88 	bl	8008144 <BSP_SD_GetCardState>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d107      	bne.n	800824a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800823a:	4b07      	ldr	r3, [pc, #28]	; (8008258 <SD_CheckStatus+0x38>)
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f023 0301 	bic.w	r3, r3, #1
 8008244:	b2da      	uxtb	r2, r3
 8008246:	4b04      	ldr	r3, [pc, #16]	; (8008258 <SD_CheckStatus+0x38>)
 8008248:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800824a:	4b03      	ldr	r3, [pc, #12]	; (8008258 <SD_CheckStatus+0x38>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	b2db      	uxtb	r3, r3
}
 8008250:	4618      	mov	r0, r3
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	20000009 	.word	0x20000009

0800825c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008266:	4b1c      	ldr	r3, [pc, #112]	; (80082d8 <SD_initialize+0x7c>)
 8008268:	2201      	movs	r2, #1
 800826a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800826c:	f002 f978 	bl	800a560 <osKernelGetState>
 8008270:	4603      	mov	r3, r0
 8008272:	2b02      	cmp	r3, #2
 8008274:	d129      	bne.n	80082ca <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8008276:	f7ff ff0b 	bl	8008090 <BSP_SD_Init>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d107      	bne.n	8008290 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8008280:	79fb      	ldrb	r3, [r7, #7]
 8008282:	4618      	mov	r0, r3
 8008284:	f7ff ffcc 	bl	8008220 <SD_CheckStatus>
 8008288:	4603      	mov	r3, r0
 800828a:	461a      	mov	r2, r3
 800828c:	4b12      	ldr	r3, [pc, #72]	; (80082d8 <SD_initialize+0x7c>)
 800828e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8008290:	4b11      	ldr	r3, [pc, #68]	; (80082d8 <SD_initialize+0x7c>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b01      	cmp	r3, #1
 8008298:	d017      	beq.n	80082ca <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800829a:	4b10      	ldr	r3, [pc, #64]	; (80082dc <SD_initialize+0x80>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d107      	bne.n	80082b2 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80082a2:	2200      	movs	r2, #0
 80082a4:	2102      	movs	r1, #2
 80082a6:	200a      	movs	r0, #10
 80082a8:	f002 fa64 	bl	800a774 <osMessageQueueNew>
 80082ac:	4603      	mov	r3, r0
 80082ae:	4a0b      	ldr	r2, [pc, #44]	; (80082dc <SD_initialize+0x80>)
 80082b0:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 80082b2:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <SD_initialize+0x80>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d107      	bne.n	80082ca <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80082ba:	4b07      	ldr	r3, [pc, #28]	; (80082d8 <SD_initialize+0x7c>)
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	f043 0301 	orr.w	r3, r3, #1
 80082c4:	b2da      	uxtb	r2, r3
 80082c6:	4b04      	ldr	r3, [pc, #16]	; (80082d8 <SD_initialize+0x7c>)
 80082c8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80082ca:	4b03      	ldr	r3, [pc, #12]	; (80082d8 <SD_initialize+0x7c>)
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	b2db      	uxtb	r3, r3
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	20000009 	.word	0x20000009
 80082dc:	2000042c 	.word	0x2000042c

080082e0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b082      	sub	sp, #8
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	4603      	mov	r3, r0
 80082e8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80082ea:	79fb      	ldrb	r3, [r7, #7]
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7ff ff97 	bl	8008220 <SD_CheckStatus>
 80082f2:	4603      	mov	r3, r0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b088      	sub	sp, #32
 8008300:	af00      	add	r7, sp, #0
 8008302:	60b9      	str	r1, [r7, #8]
 8008304:	607a      	str	r2, [r7, #4]
 8008306:	603b      	str	r3, [r7, #0]
 8008308:	4603      	mov	r3, r0
 800830a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 800830c:	2301      	movs	r3, #1
 800830e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008310:	f247 5030 	movw	r0, #30000	; 0x7530
 8008314:	f7ff ff66 	bl	80081e4 <SD_CheckStatusWithTimeout>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	da01      	bge.n	8008322 <SD_read+0x26>
  {
    return res;
 800831e:	7ffb      	ldrb	r3, [r7, #31]
 8008320:	e02f      	b.n	8008382 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	68b8      	ldr	r0, [r7, #8]
 8008328:	f7ff fed8 	bl	80080dc <BSP_SD_ReadBlocks_DMA>
 800832c:	4603      	mov	r3, r0
 800832e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8008330:	7fbb      	ldrb	r3, [r7, #30]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d124      	bne.n	8008380 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8008336:	4b15      	ldr	r3, [pc, #84]	; (800838c <SD_read+0x90>)
 8008338:	6818      	ldr	r0, [r3, #0]
 800833a:	f107 0112 	add.w	r1, r7, #18
 800833e:	f247 5330 	movw	r3, #30000	; 0x7530
 8008342:	2200      	movs	r2, #0
 8008344:	f002 faea 	bl	800a91c <osMessageQueueGet>
 8008348:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800834a:	69bb      	ldr	r3, [r7, #24]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d117      	bne.n	8008380 <SD_read+0x84>
 8008350:	8a7b      	ldrh	r3, [r7, #18]
 8008352:	2b01      	cmp	r3, #1
 8008354:	d114      	bne.n	8008380 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8008356:	f002 f94b 	bl	800a5f0 <osKernelGetTickCount>
 800835a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800835c:	e007      	b.n	800836e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800835e:	f7ff fef1 	bl	8008144 <BSP_SD_GetCardState>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d102      	bne.n	800836e <SD_read+0x72>
              {
                res = RES_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800836c:	e008      	b.n	8008380 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800836e:	f002 f93f 	bl	800a5f0 <osKernelGetTickCount>
 8008372:	4602      	mov	r2, r0
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	f247 522f 	movw	r2, #29999	; 0x752f
 800837c:	4293      	cmp	r3, r2
 800837e:	d9ee      	bls.n	800835e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8008380:	7ffb      	ldrb	r3, [r7, #31]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3720      	adds	r7, #32
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	2000042c 	.word	0x2000042c

08008390 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b088      	sub	sp, #32
 8008394:	af00      	add	r7, sp, #0
 8008396:	60b9      	str	r1, [r7, #8]
 8008398:	607a      	str	r2, [r7, #4]
 800839a:	603b      	str	r3, [r7, #0]
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80083a4:	f247 5030 	movw	r0, #30000	; 0x7530
 80083a8:	f7ff ff1c 	bl	80081e4 <SD_CheckStatusWithTimeout>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	da01      	bge.n	80083b6 <SD_write+0x26>
  {
    return res;
 80083b2:	7ffb      	ldrb	r3, [r7, #31]
 80083b4:	e02d      	b.n	8008412 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	6879      	ldr	r1, [r7, #4]
 80083ba:	68b8      	ldr	r0, [r7, #8]
 80083bc:	f7ff fea8 	bl	8008110 <BSP_SD_WriteBlocks_DMA>
 80083c0:	4603      	mov	r3, r0
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d124      	bne.n	8008410 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80083c6:	4b15      	ldr	r3, [pc, #84]	; (800841c <SD_write+0x8c>)
 80083c8:	6818      	ldr	r0, [r3, #0]
 80083ca:	f107 0112 	add.w	r1, r7, #18
 80083ce:	f247 5330 	movw	r3, #30000	; 0x7530
 80083d2:	2200      	movs	r2, #0
 80083d4:	f002 faa2 	bl	800a91c <osMessageQueueGet>
 80083d8:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d117      	bne.n	8008410 <SD_write+0x80>
 80083e0:	8a7b      	ldrh	r3, [r7, #18]
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d114      	bne.n	8008410 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80083e6:	f002 f903 	bl	800a5f0 <osKernelGetTickCount>
 80083ea:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80083ec:	e007      	b.n	80083fe <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80083ee:	f7ff fea9 	bl	8008144 <BSP_SD_GetCardState>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d102      	bne.n	80083fe <SD_write+0x6e>
          {
            res = RES_OK;
 80083f8:	2300      	movs	r3, #0
 80083fa:	77fb      	strb	r3, [r7, #31]
            break;
 80083fc:	e008      	b.n	8008410 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80083fe:	f002 f8f7 	bl	800a5f0 <osKernelGetTickCount>
 8008402:	4602      	mov	r2, r0
 8008404:	697b      	ldr	r3, [r7, #20]
 8008406:	1ad3      	subs	r3, r2, r3
 8008408:	f247 522f 	movw	r2, #29999	; 0x752f
 800840c:	4293      	cmp	r3, r2
 800840e:	d9ee      	bls.n	80083ee <SD_write+0x5e>
    }

  }
#endif

  return res;
 8008410:	7ffb      	ldrb	r3, [r7, #31]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3720      	adds	r7, #32
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	2000042c 	.word	0x2000042c

08008420 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b08c      	sub	sp, #48	; 0x30
 8008424:	af00      	add	r7, sp, #0
 8008426:	4603      	mov	r3, r0
 8008428:	603a      	str	r2, [r7, #0]
 800842a:	71fb      	strb	r3, [r7, #7]
 800842c:	460b      	mov	r3, r1
 800842e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8008436:	4b25      	ldr	r3, [pc, #148]	; (80084cc <SD_ioctl+0xac>)
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	b2db      	uxtb	r3, r3
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	2b00      	cmp	r3, #0
 8008442:	d001      	beq.n	8008448 <SD_ioctl+0x28>
 8008444:	2303      	movs	r3, #3
 8008446:	e03c      	b.n	80084c2 <SD_ioctl+0xa2>

  switch (cmd)
 8008448:	79bb      	ldrb	r3, [r7, #6]
 800844a:	2b03      	cmp	r3, #3
 800844c:	d834      	bhi.n	80084b8 <SD_ioctl+0x98>
 800844e:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <SD_ioctl+0x34>)
 8008450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008454:	08008465 	.word	0x08008465
 8008458:	0800846d 	.word	0x0800846d
 800845c:	08008485 	.word	0x08008485
 8008460:	0800849f 	.word	0x0800849f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8008464:	2300      	movs	r3, #0
 8008466:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800846a:	e028      	b.n	80084be <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800846c:	f107 030c 	add.w	r3, r7, #12
 8008470:	4618      	mov	r0, r3
 8008472:	f7ff fe77 	bl	8008164 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8008476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8008482:	e01c      	b.n	80084be <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8008484:	f107 030c 	add.w	r3, r7, #12
 8008488:	4618      	mov	r0, r3
 800848a:	f7ff fe6b 	bl	8008164 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800848e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008490:	b29a      	uxth	r2, r3
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800849c:	e00f      	b.n	80084be <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800849e:	f107 030c 	add.w	r3, r7, #12
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7ff fe5e 	bl	8008164 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80084a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084aa:	0a5a      	lsrs	r2, r3, #9
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80084b0:	2300      	movs	r3, #0
 80084b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80084b6:	e002      	b.n	80084be <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80084b8:	2304      	movs	r3, #4
 80084ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80084be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3730      	adds	r7, #48	; 0x30
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	20000009 	.word	0x20000009

080084d0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b082      	sub	sp, #8
 80084d4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80084d6:	2301      	movs	r3, #1
 80084d8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80084da:	4b05      	ldr	r3, [pc, #20]	; (80084f0 <BSP_SD_ReadCpltCallback+0x20>)
 80084dc:	6818      	ldr	r0, [r3, #0]
 80084de:	1db9      	adds	r1, r7, #6
 80084e0:	2300      	movs	r3, #0
 80084e2:	2200      	movs	r2, #0
 80084e4:	f002 f9ba 	bl	800a85c <osMessageQueuePut>
#endif
}
 80084e8:	bf00      	nop
 80084ea:	3708      	adds	r7, #8
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	2000042c 	.word	0x2000042c

080084f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b084      	sub	sp, #16
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
 80084fc:	460b      	mov	r3, r1
 80084fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008500:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008504:	f005 fc3c 	bl	800dd80 <USBD_static_malloc>
 8008508:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d109      	bne.n	8008524 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	32b0      	adds	r2, #176	; 0xb0
 800851a:	2100      	movs	r1, #0
 800851c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008520:	2302      	movs	r3, #2
 8008522:	e0d4      	b.n	80086ce <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008524:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008528:	2100      	movs	r1, #0
 800852a:	68f8      	ldr	r0, [r7, #12]
 800852c:	f005 fc9e 	bl	800de6c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	32b0      	adds	r2, #176	; 0xb0
 800853a:	68f9      	ldr	r1, [r7, #12]
 800853c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	32b0      	adds	r2, #176	; 0xb0
 800854a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	7c1b      	ldrb	r3, [r3, #16]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d138      	bne.n	80085ce <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800855c:	4b5e      	ldr	r3, [pc, #376]	; (80086d8 <USBD_CDC_Init+0x1e4>)
 800855e:	7819      	ldrb	r1, [r3, #0]
 8008560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008564:	2202      	movs	r2, #2
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f005 fae7 	bl	800db3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800856c:	4b5a      	ldr	r3, [pc, #360]	; (80086d8 <USBD_CDC_Init+0x1e4>)
 800856e:	781b      	ldrb	r3, [r3, #0]
 8008570:	f003 020f 	and.w	r2, r3, #15
 8008574:	6879      	ldr	r1, [r7, #4]
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	440b      	add	r3, r1
 8008580:	3324      	adds	r3, #36	; 0x24
 8008582:	2201      	movs	r2, #1
 8008584:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008586:	4b55      	ldr	r3, [pc, #340]	; (80086dc <USBD_CDC_Init+0x1e8>)
 8008588:	7819      	ldrb	r1, [r3, #0]
 800858a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800858e:	2202      	movs	r2, #2
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f005 fad2 	bl	800db3a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008596:	4b51      	ldr	r3, [pc, #324]	; (80086dc <USBD_CDC_Init+0x1e8>)
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	f003 020f 	and.w	r2, r3, #15
 800859e:	6879      	ldr	r1, [r7, #4]
 80085a0:	4613      	mov	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	440b      	add	r3, r1
 80085aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085ae:	2201      	movs	r2, #1
 80085b0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80085b2:	4b4b      	ldr	r3, [pc, #300]	; (80086e0 <USBD_CDC_Init+0x1ec>)
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	f003 020f 	and.w	r2, r3, #15
 80085ba:	6879      	ldr	r1, [r7, #4]
 80085bc:	4613      	mov	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4413      	add	r3, r2
 80085c2:	009b      	lsls	r3, r3, #2
 80085c4:	440b      	add	r3, r1
 80085c6:	3326      	adds	r3, #38	; 0x26
 80085c8:	2210      	movs	r2, #16
 80085ca:	801a      	strh	r2, [r3, #0]
 80085cc:	e035      	b.n	800863a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80085ce:	4b42      	ldr	r3, [pc, #264]	; (80086d8 <USBD_CDC_Init+0x1e4>)
 80085d0:	7819      	ldrb	r1, [r3, #0]
 80085d2:	2340      	movs	r3, #64	; 0x40
 80085d4:	2202      	movs	r2, #2
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f005 faaf 	bl	800db3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80085dc:	4b3e      	ldr	r3, [pc, #248]	; (80086d8 <USBD_CDC_Init+0x1e4>)
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	f003 020f 	and.w	r2, r3, #15
 80085e4:	6879      	ldr	r1, [r7, #4]
 80085e6:	4613      	mov	r3, r2
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	009b      	lsls	r3, r3, #2
 80085ee:	440b      	add	r3, r1
 80085f0:	3324      	adds	r3, #36	; 0x24
 80085f2:	2201      	movs	r2, #1
 80085f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80085f6:	4b39      	ldr	r3, [pc, #228]	; (80086dc <USBD_CDC_Init+0x1e8>)
 80085f8:	7819      	ldrb	r1, [r3, #0]
 80085fa:	2340      	movs	r3, #64	; 0x40
 80085fc:	2202      	movs	r2, #2
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f005 fa9b 	bl	800db3a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008604:	4b35      	ldr	r3, [pc, #212]	; (80086dc <USBD_CDC_Init+0x1e8>)
 8008606:	781b      	ldrb	r3, [r3, #0]
 8008608:	f003 020f 	and.w	r2, r3, #15
 800860c:	6879      	ldr	r1, [r7, #4]
 800860e:	4613      	mov	r3, r2
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	440b      	add	r3, r1
 8008618:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800861c:	2201      	movs	r2, #1
 800861e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008620:	4b2f      	ldr	r3, [pc, #188]	; (80086e0 <USBD_CDC_Init+0x1ec>)
 8008622:	781b      	ldrb	r3, [r3, #0]
 8008624:	f003 020f 	and.w	r2, r3, #15
 8008628:	6879      	ldr	r1, [r7, #4]
 800862a:	4613      	mov	r3, r2
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	440b      	add	r3, r1
 8008634:	3326      	adds	r3, #38	; 0x26
 8008636:	2210      	movs	r2, #16
 8008638:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800863a:	4b29      	ldr	r3, [pc, #164]	; (80086e0 <USBD_CDC_Init+0x1ec>)
 800863c:	7819      	ldrb	r1, [r3, #0]
 800863e:	2308      	movs	r3, #8
 8008640:	2203      	movs	r2, #3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f005 fa79 	bl	800db3a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008648:	4b25      	ldr	r3, [pc, #148]	; (80086e0 <USBD_CDC_Init+0x1ec>)
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	f003 020f 	and.w	r2, r3, #15
 8008650:	6879      	ldr	r1, [r7, #4]
 8008652:	4613      	mov	r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	4413      	add	r3, r2
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	440b      	add	r3, r1
 800865c:	3324      	adds	r3, #36	; 0x24
 800865e:	2201      	movs	r2, #1
 8008660:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2200      	movs	r2, #0
 8008666:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	33b0      	adds	r3, #176	; 0xb0
 8008674:	009b      	lsls	r3, r3, #2
 8008676:	4413      	add	r3, r2
 8008678:	685b      	ldr	r3, [r3, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2200      	movs	r2, #0
 8008682:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008698:	2302      	movs	r3, #2
 800869a:	e018      	b.n	80086ce <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	7c1b      	ldrb	r3, [r3, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d10a      	bne.n	80086ba <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086a4:	4b0d      	ldr	r3, [pc, #52]	; (80086dc <USBD_CDC_Init+0x1e8>)
 80086a6:	7819      	ldrb	r1, [r3, #0]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f005 fb30 	bl	800dd18 <USBD_LL_PrepareReceive>
 80086b8:	e008      	b.n	80086cc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80086ba:	4b08      	ldr	r3, [pc, #32]	; (80086dc <USBD_CDC_Init+0x1e8>)
 80086bc:	7819      	ldrb	r1, [r3, #0]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80086c4:	2340      	movs	r3, #64	; 0x40
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f005 fb26 	bl	800dd18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	20000093 	.word	0x20000093
 80086dc:	20000094 	.word	0x20000094
 80086e0:	20000095 	.word	0x20000095

080086e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80086f0:	4b3a      	ldr	r3, [pc, #232]	; (80087dc <USBD_CDC_DeInit+0xf8>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f005 fa45 	bl	800db86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80086fc:	4b37      	ldr	r3, [pc, #220]	; (80087dc <USBD_CDC_DeInit+0xf8>)
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	f003 020f 	and.w	r2, r3, #15
 8008704:	6879      	ldr	r1, [r7, #4]
 8008706:	4613      	mov	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	4413      	add	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	440b      	add	r3, r1
 8008710:	3324      	adds	r3, #36	; 0x24
 8008712:	2200      	movs	r2, #0
 8008714:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008716:	4b32      	ldr	r3, [pc, #200]	; (80087e0 <USBD_CDC_DeInit+0xfc>)
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	4619      	mov	r1, r3
 800871c:	6878      	ldr	r0, [r7, #4]
 800871e:	f005 fa32 	bl	800db86 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008722:	4b2f      	ldr	r3, [pc, #188]	; (80087e0 <USBD_CDC_DeInit+0xfc>)
 8008724:	781b      	ldrb	r3, [r3, #0]
 8008726:	f003 020f 	and.w	r2, r3, #15
 800872a:	6879      	ldr	r1, [r7, #4]
 800872c:	4613      	mov	r3, r2
 800872e:	009b      	lsls	r3, r3, #2
 8008730:	4413      	add	r3, r2
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	440b      	add	r3, r1
 8008736:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800873a:	2200      	movs	r2, #0
 800873c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800873e:	4b29      	ldr	r3, [pc, #164]	; (80087e4 <USBD_CDC_DeInit+0x100>)
 8008740:	781b      	ldrb	r3, [r3, #0]
 8008742:	4619      	mov	r1, r3
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f005 fa1e 	bl	800db86 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800874a:	4b26      	ldr	r3, [pc, #152]	; (80087e4 <USBD_CDC_DeInit+0x100>)
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	f003 020f 	and.w	r2, r3, #15
 8008752:	6879      	ldr	r1, [r7, #4]
 8008754:	4613      	mov	r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	4413      	add	r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	440b      	add	r3, r1
 800875e:	3324      	adds	r3, #36	; 0x24
 8008760:	2200      	movs	r2, #0
 8008762:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008764:	4b1f      	ldr	r3, [pc, #124]	; (80087e4 <USBD_CDC_DeInit+0x100>)
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	f003 020f 	and.w	r2, r3, #15
 800876c:	6879      	ldr	r1, [r7, #4]
 800876e:	4613      	mov	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4413      	add	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	440b      	add	r3, r1
 8008778:	3326      	adds	r3, #38	; 0x26
 800877a:	2200      	movs	r2, #0
 800877c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	32b0      	adds	r2, #176	; 0xb0
 8008788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d01f      	beq.n	80087d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	33b0      	adds	r3, #176	; 0xb0
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	4413      	add	r3, r2
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	32b0      	adds	r2, #176	; 0xb0
 80087ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f005 faf2 	bl	800dd9c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	32b0      	adds	r2, #176	; 0xb0
 80087c2:	2100      	movs	r1, #0
 80087c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3708      	adds	r7, #8
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
 80087da:	bf00      	nop
 80087dc:	20000093 	.word	0x20000093
 80087e0:	20000094 	.word	0x20000094
 80087e4:	20000095 	.word	0x20000095

080087e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b086      	sub	sp, #24
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	32b0      	adds	r2, #176	; 0xb0
 80087fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008800:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008806:	2300      	movs	r3, #0
 8008808:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800880a:	2300      	movs	r3, #0
 800880c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008814:	2303      	movs	r3, #3
 8008816:	e0bf      	b.n	8008998 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008820:	2b00      	cmp	r3, #0
 8008822:	d050      	beq.n	80088c6 <USBD_CDC_Setup+0xde>
 8008824:	2b20      	cmp	r3, #32
 8008826:	f040 80af 	bne.w	8008988 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	88db      	ldrh	r3, [r3, #6]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d03a      	beq.n	80088a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	b25b      	sxtb	r3, r3
 8008838:	2b00      	cmp	r3, #0
 800883a:	da1b      	bge.n	8008874 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	33b0      	adds	r3, #176	; 0xb0
 8008846:	009b      	lsls	r3, r3, #2
 8008848:	4413      	add	r3, r2
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008852:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008854:	683a      	ldr	r2, [r7, #0]
 8008856:	88d2      	ldrh	r2, [r2, #6]
 8008858:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	88db      	ldrh	r3, [r3, #6]
 800885e:	2b07      	cmp	r3, #7
 8008860:	bf28      	it	cs
 8008862:	2307      	movcs	r3, #7
 8008864:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	89fa      	ldrh	r2, [r7, #14]
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f001 fd43 	bl	800a2f8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008872:	e090      	b.n	8008996 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	785a      	ldrb	r2, [r3, #1]
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	88db      	ldrh	r3, [r3, #6]
 8008882:	2b3f      	cmp	r3, #63	; 0x3f
 8008884:	d803      	bhi.n	800888e <USBD_CDC_Setup+0xa6>
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	88db      	ldrh	r3, [r3, #6]
 800888a:	b2da      	uxtb	r2, r3
 800888c:	e000      	b.n	8008890 <USBD_CDC_Setup+0xa8>
 800888e:	2240      	movs	r2, #64	; 0x40
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008896:	6939      	ldr	r1, [r7, #16]
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800889e:	461a      	mov	r2, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 fd55 	bl	800a350 <USBD_CtlPrepareRx>
      break;
 80088a6:	e076      	b.n	8008996 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	33b0      	adds	r3, #176	; 0xb0
 80088b2:	009b      	lsls	r3, r3, #2
 80088b4:	4413      	add	r3, r2
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	7850      	ldrb	r0, [r2, #1]
 80088be:	2200      	movs	r2, #0
 80088c0:	6839      	ldr	r1, [r7, #0]
 80088c2:	4798      	blx	r3
      break;
 80088c4:	e067      	b.n	8008996 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	785b      	ldrb	r3, [r3, #1]
 80088ca:	2b0b      	cmp	r3, #11
 80088cc:	d851      	bhi.n	8008972 <USBD_CDC_Setup+0x18a>
 80088ce:	a201      	add	r2, pc, #4	; (adr r2, 80088d4 <USBD_CDC_Setup+0xec>)
 80088d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d4:	08008905 	.word	0x08008905
 80088d8:	08008981 	.word	0x08008981
 80088dc:	08008973 	.word	0x08008973
 80088e0:	08008973 	.word	0x08008973
 80088e4:	08008973 	.word	0x08008973
 80088e8:	08008973 	.word	0x08008973
 80088ec:	08008973 	.word	0x08008973
 80088f0:	08008973 	.word	0x08008973
 80088f4:	08008973 	.word	0x08008973
 80088f8:	08008973 	.word	0x08008973
 80088fc:	0800892f 	.word	0x0800892f
 8008900:	08008959 	.word	0x08008959
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800890a:	b2db      	uxtb	r3, r3
 800890c:	2b03      	cmp	r3, #3
 800890e:	d107      	bne.n	8008920 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008910:	f107 030a 	add.w	r3, r7, #10
 8008914:	2202      	movs	r2, #2
 8008916:	4619      	mov	r1, r3
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f001 fced 	bl	800a2f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800891e:	e032      	b.n	8008986 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008920:	6839      	ldr	r1, [r7, #0]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f001 fc77 	bl	800a216 <USBD_CtlError>
            ret = USBD_FAIL;
 8008928:	2303      	movs	r3, #3
 800892a:	75fb      	strb	r3, [r7, #23]
          break;
 800892c:	e02b      	b.n	8008986 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008934:	b2db      	uxtb	r3, r3
 8008936:	2b03      	cmp	r3, #3
 8008938:	d107      	bne.n	800894a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800893a:	f107 030d 	add.w	r3, r7, #13
 800893e:	2201      	movs	r2, #1
 8008940:	4619      	mov	r1, r3
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f001 fcd8 	bl	800a2f8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008948:	e01d      	b.n	8008986 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800894a:	6839      	ldr	r1, [r7, #0]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f001 fc62 	bl	800a216 <USBD_CtlError>
            ret = USBD_FAIL;
 8008952:	2303      	movs	r3, #3
 8008954:	75fb      	strb	r3, [r7, #23]
          break;
 8008956:	e016      	b.n	8008986 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b03      	cmp	r3, #3
 8008962:	d00f      	beq.n	8008984 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008964:	6839      	ldr	r1, [r7, #0]
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f001 fc55 	bl	800a216 <USBD_CtlError>
            ret = USBD_FAIL;
 800896c:	2303      	movs	r3, #3
 800896e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008970:	e008      	b.n	8008984 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008972:	6839      	ldr	r1, [r7, #0]
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f001 fc4e 	bl	800a216 <USBD_CtlError>
          ret = USBD_FAIL;
 800897a:	2303      	movs	r3, #3
 800897c:	75fb      	strb	r3, [r7, #23]
          break;
 800897e:	e002      	b.n	8008986 <USBD_CDC_Setup+0x19e>
          break;
 8008980:	bf00      	nop
 8008982:	e008      	b.n	8008996 <USBD_CDC_Setup+0x1ae>
          break;
 8008984:	bf00      	nop
      }
      break;
 8008986:	e006      	b.n	8008996 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008988:	6839      	ldr	r1, [r7, #0]
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f001 fc43 	bl	800a216 <USBD_CtlError>
      ret = USBD_FAIL;
 8008990:	2303      	movs	r3, #3
 8008992:	75fb      	strb	r3, [r7, #23]
      break;
 8008994:	bf00      	nop
  }

  return (uint8_t)ret;
 8008996:	7dfb      	ldrb	r3, [r7, #23]
}
 8008998:	4618      	mov	r0, r3
 800899a:	3718      	adds	r7, #24
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	460b      	mov	r3, r1
 80089aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	32b0      	adds	r2, #176	; 0xb0
 80089be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d101      	bne.n	80089ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e065      	b.n	8008a96 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	32b0      	adds	r2, #176	; 0xb0
 80089d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80089da:	78fb      	ldrb	r3, [r7, #3]
 80089dc:	f003 020f 	and.w	r2, r3, #15
 80089e0:	6879      	ldr	r1, [r7, #4]
 80089e2:	4613      	mov	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	440b      	add	r3, r1
 80089ec:	3318      	adds	r3, #24
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d02f      	beq.n	8008a54 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	f003 020f 	and.w	r2, r3, #15
 80089fa:	6879      	ldr	r1, [r7, #4]
 80089fc:	4613      	mov	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	4413      	add	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	3318      	adds	r3, #24
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	78fb      	ldrb	r3, [r7, #3]
 8008a0c:	f003 010f 	and.w	r1, r3, #15
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	460b      	mov	r3, r1
 8008a14:	00db      	lsls	r3, r3, #3
 8008a16:	440b      	add	r3, r1
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	4403      	add	r3, r0
 8008a1c:	3348      	adds	r3, #72	; 0x48
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	fbb2 f1f3 	udiv	r1, r2, r3
 8008a24:	fb01 f303 	mul.w	r3, r1, r3
 8008a28:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d112      	bne.n	8008a54 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008a2e:	78fb      	ldrb	r3, [r7, #3]
 8008a30:	f003 020f 	and.w	r2, r3, #15
 8008a34:	6879      	ldr	r1, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	009b      	lsls	r3, r3, #2
 8008a3a:	4413      	add	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	440b      	add	r3, r1
 8008a40:	3318      	adds	r3, #24
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008a46:	78f9      	ldrb	r1, [r7, #3]
 8008a48:	2300      	movs	r3, #0
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f005 f942 	bl	800dcd6 <USBD_LL_Transmit>
 8008a52:	e01f      	b.n	8008a94 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	33b0      	adds	r3, #176	; 0xb0
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	4413      	add	r3, r2
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d010      	beq.n	8008a94 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a78:	687a      	ldr	r2, [r7, #4]
 8008a7a:	33b0      	adds	r3, #176	; 0xb0
 8008a7c:	009b      	lsls	r3, r3, #2
 8008a7e:	4413      	add	r3, r2
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	691b      	ldr	r3, [r3, #16]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008a8a:	68ba      	ldr	r2, [r7, #8]
 8008a8c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008a90:	78fa      	ldrb	r2, [r7, #3]
 8008a92:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b084      	sub	sp, #16
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	32b0      	adds	r2, #176	; 0xb0
 8008ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	32b0      	adds	r2, #176	; 0xb0
 8008ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d101      	bne.n	8008ad0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e01a      	b.n	8008b06 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008ad0:	78fb      	ldrb	r3, [r7, #3]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f005 f940 	bl	800dd5a <USBD_LL_GetRxDataSize>
 8008ada:	4602      	mov	r2, r0
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	33b0      	adds	r3, #176	; 0xb0
 8008aec:	009b      	lsls	r3, r3, #2
 8008aee:	4413      	add	r3, r2
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	68fa      	ldr	r2, [r7, #12]
 8008af6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008b00:	4611      	mov	r1, r2
 8008b02:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008b04:	2300      	movs	r3, #0
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b084      	sub	sp, #16
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	32b0      	adds	r2, #176	; 0xb0
 8008b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b24:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008b2c:	2303      	movs	r3, #3
 8008b2e:	e025      	b.n	8008b7c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	33b0      	adds	r3, #176	; 0xb0
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d01a      	beq.n	8008b7a <USBD_CDC_EP0_RxReady+0x6c>
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008b4a:	2bff      	cmp	r3, #255	; 0xff
 8008b4c:	d015      	beq.n	8008b7a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	33b0      	adds	r3, #176	; 0xb0
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4413      	add	r3, r2
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008b66:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008b6e:	b292      	uxth	r2, r2
 8008b70:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	22ff      	movs	r2, #255	; 0xff
 8008b76:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b086      	sub	sp, #24
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b8c:	2182      	movs	r1, #130	; 0x82
 8008b8e:	4818      	ldr	r0, [pc, #96]	; (8008bf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b90:	f000 fd09 	bl	80095a6 <USBD_GetEpDesc>
 8008b94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b96:	2101      	movs	r1, #1
 8008b98:	4815      	ldr	r0, [pc, #84]	; (8008bf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b9a:	f000 fd04 	bl	80095a6 <USBD_GetEpDesc>
 8008b9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008ba0:	2181      	movs	r1, #129	; 0x81
 8008ba2:	4813      	ldr	r0, [pc, #76]	; (8008bf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008ba4:	f000 fcff 	bl	80095a6 <USBD_GetEpDesc>
 8008ba8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2210      	movs	r2, #16
 8008bb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d006      	beq.n	8008bca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bc4:	711a      	strb	r2, [r3, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d006      	beq.n	8008bde <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bd8:	711a      	strb	r2, [r3, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2243      	movs	r2, #67	; 0x43
 8008be2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008be4:	4b02      	ldr	r3, [pc, #8]	; (8008bf0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3718      	adds	r7, #24
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20000050 	.word	0x20000050

08008bf4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008bfc:	2182      	movs	r1, #130	; 0x82
 8008bfe:	4818      	ldr	r0, [pc, #96]	; (8008c60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c00:	f000 fcd1 	bl	80095a6 <USBD_GetEpDesc>
 8008c04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c06:	2101      	movs	r1, #1
 8008c08:	4815      	ldr	r0, [pc, #84]	; (8008c60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c0a:	f000 fccc 	bl	80095a6 <USBD_GetEpDesc>
 8008c0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c10:	2181      	movs	r1, #129	; 0x81
 8008c12:	4813      	ldr	r0, [pc, #76]	; (8008c60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008c14:	f000 fcc7 	bl	80095a6 <USBD_GetEpDesc>
 8008c18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d002      	beq.n	8008c26 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	2210      	movs	r2, #16
 8008c24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d006      	beq.n	8008c3a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	711a      	strb	r2, [r3, #4]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f042 0202 	orr.w	r2, r2, #2
 8008c38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d006      	beq.n	8008c4e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	2200      	movs	r2, #0
 8008c44:	711a      	strb	r2, [r3, #4]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f042 0202 	orr.w	r2, r2, #2
 8008c4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2243      	movs	r2, #67	; 0x43
 8008c52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c54:	4b02      	ldr	r3, [pc, #8]	; (8008c60 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	3718      	adds	r7, #24
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	20000050 	.word	0x20000050

08008c64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008c6c:	2182      	movs	r1, #130	; 0x82
 8008c6e:	4818      	ldr	r0, [pc, #96]	; (8008cd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c70:	f000 fc99 	bl	80095a6 <USBD_GetEpDesc>
 8008c74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008c76:	2101      	movs	r1, #1
 8008c78:	4815      	ldr	r0, [pc, #84]	; (8008cd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c7a:	f000 fc94 	bl	80095a6 <USBD_GetEpDesc>
 8008c7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c80:	2181      	movs	r1, #129	; 0x81
 8008c82:	4813      	ldr	r0, [pc, #76]	; (8008cd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c84:	f000 fc8f 	bl	80095a6 <USBD_GetEpDesc>
 8008c88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d002      	beq.n	8008c96 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	2210      	movs	r2, #16
 8008c94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d006      	beq.n	8008caa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ca4:	711a      	strb	r2, [r3, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d006      	beq.n	8008cbe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008cb8:	711a      	strb	r2, [r3, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2243      	movs	r2, #67	; 0x43
 8008cc2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008cc4:	4b02      	ldr	r3, [pc, #8]	; (8008cd0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3718      	adds	r7, #24
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	20000050 	.word	0x20000050

08008cd4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	220a      	movs	r2, #10
 8008ce0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008ce2:	4b03      	ldr	r3, [pc, #12]	; (8008cf0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	2000000c 	.word	0x2000000c

08008cf4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d101      	bne.n	8008d08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e009      	b.n	8008d1c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	33b0      	adds	r3, #176	; 0xb0
 8008d12:	009b      	lsls	r3, r3, #2
 8008d14:	4413      	add	r3, r2
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008d1a:	2300      	movs	r3, #0
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	60f8      	str	r0, [r7, #12]
 8008d30:	60b9      	str	r1, [r7, #8]
 8008d32:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	32b0      	adds	r2, #176	; 0xb0
 8008d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d42:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008d44:	697b      	ldr	r3, [r7, #20]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	e008      	b.n	8008d60 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	68ba      	ldr	r2, [r7, #8]
 8008d52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	371c      	adds	r7, #28
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	32b0      	adds	r2, #176	; 0xb0
 8008d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d101      	bne.n	8008d90 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e004      	b.n	8008d9a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3714      	adds	r7, #20
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da4:	4770      	bx	lr
	...

08008da8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	32b0      	adds	r2, #176	; 0xb0
 8008dba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dbe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	32b0      	adds	r2, #176	; 0xb0
 8008dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e018      	b.n	8008e08 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	7c1b      	ldrb	r3, [r3, #16]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10a      	bne.n	8008df4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008dde:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <USBD_CDC_ReceivePacket+0x68>)
 8008de0:	7819      	ldrb	r1, [r3, #0]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f004 ff93 	bl	800dd18 <USBD_LL_PrepareReceive>
 8008df2:	e008      	b.n	8008e06 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008df4:	4b06      	ldr	r3, [pc, #24]	; (8008e10 <USBD_CDC_ReceivePacket+0x68>)
 8008df6:	7819      	ldrb	r1, [r3, #0]
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008dfe:	2340      	movs	r3, #64	; 0x40
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f004 ff89 	bl	800dd18 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3710      	adds	r7, #16
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd80      	pop	{r7, pc}
 8008e10:	20000094 	.word	0x20000094

08008e14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e14:	b580      	push	{r7, lr}
 8008e16:	b086      	sub	sp, #24
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d101      	bne.n	8008e2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e01f      	b.n	8008e6c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2201      	movs	r2, #1
 8008e56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	79fa      	ldrb	r2, [r7, #7]
 8008e5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f004 fdfd 	bl	800da60 <USBD_LL_Init>
 8008e66:	4603      	mov	r3, r0
 8008e68:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}

08008e74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b084      	sub	sp, #16
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6078      	str	r0, [r7, #4]
 8008e7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e7e:	2300      	movs	r3, #0
 8008e80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d101      	bne.n	8008e8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	e025      	b.n	8008ed8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	32ae      	adds	r2, #174	; 0xae
 8008e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d00f      	beq.n	8008ec8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	32ae      	adds	r2, #174	; 0xae
 8008eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb8:	f107 020e 	add.w	r2, r7, #14
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	4798      	blx	r3
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f004 fe0b 	bl	800db04 <USBD_LL_Start>
 8008eee:	4603      	mov	r3, r0
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f00:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008f02:	4618      	mov	r0, r3
 8008f04:	370c      	adds	r7, #12
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr

08008f0e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f0e:	b580      	push	{r7, lr}
 8008f10:	b084      	sub	sp, #16
 8008f12:	af00      	add	r7, sp, #0
 8008f14:	6078      	str	r0, [r7, #4]
 8008f16:	460b      	mov	r3, r1
 8008f18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d009      	beq.n	8008f3c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	78fa      	ldrb	r2, [r7, #3]
 8008f32:	4611      	mov	r1, r2
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	4798      	blx	r3
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3710      	adds	r7, #16
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f46:	b580      	push	{r7, lr}
 8008f48:	b084      	sub	sp, #16
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
 8008f4e:	460b      	mov	r3, r1
 8008f50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	78fa      	ldrb	r2, [r7, #3]
 8008f60:	4611      	mov	r1, r2
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	4798      	blx	r3
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f8a:	6839      	ldr	r1, [r7, #0]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f001 f908 	bl	800a1a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fae:	f003 031f 	and.w	r3, r3, #31
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d01a      	beq.n	8008fec <USBD_LL_SetupStage+0x72>
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d822      	bhi.n	8009000 <USBD_LL_SetupStage+0x86>
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d002      	beq.n	8008fc4 <USBD_LL_SetupStage+0x4a>
 8008fbe:	2b01      	cmp	r3, #1
 8008fc0:	d00a      	beq.n	8008fd8 <USBD_LL_SetupStage+0x5e>
 8008fc2:	e01d      	b.n	8009000 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fb5f 	bl	8009690 <USBD_StdDevReq>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8008fd6:	e020      	b.n	800901a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fbc7 	bl	8009774 <USBD_StdItfReq>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8008fea:	e016      	b.n	800901a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008ff2:	4619      	mov	r1, r3
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 fc29 	bl	800984c <USBD_StdEPReq>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	73fb      	strb	r3, [r7, #15]
      break;
 8008ffe:	e00c      	b.n	800901a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009006:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800900a:	b2db      	uxtb	r3, r3
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f004 fdd8 	bl	800dbc4 <USBD_LL_StallEP>
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]
      break;
 8009018:	bf00      	nop
  }

  return ret;
 800901a:	7bfb      	ldrb	r3, [r7, #15]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3710      	adds	r7, #16
 8009020:	46bd      	mov	sp, r7
 8009022:	bd80      	pop	{r7, pc}

08009024 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	b086      	sub	sp, #24
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	460b      	mov	r3, r1
 800902e:	607a      	str	r2, [r7, #4]
 8009030:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009032:	2300      	movs	r3, #0
 8009034:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009036:	7afb      	ldrb	r3, [r7, #11]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d16e      	bne.n	800911a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009042:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800904a:	2b03      	cmp	r3, #3
 800904c:	f040 8098 	bne.w	8009180 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009050:	693b      	ldr	r3, [r7, #16]
 8009052:	689a      	ldr	r2, [r3, #8]
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	429a      	cmp	r2, r3
 800905a:	d913      	bls.n	8009084 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	689a      	ldr	r2, [r3, #8]
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	1ad2      	subs	r2, r2, r3
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	68da      	ldr	r2, [r3, #12]
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	689b      	ldr	r3, [r3, #8]
 8009072:	4293      	cmp	r3, r2
 8009074:	bf28      	it	cs
 8009076:	4613      	movcs	r3, r2
 8009078:	461a      	mov	r2, r3
 800907a:	6879      	ldr	r1, [r7, #4]
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f001 f984 	bl	800a38a <USBD_CtlContinueRx>
 8009082:	e07d      	b.n	8009180 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800908a:	f003 031f 	and.w	r3, r3, #31
 800908e:	2b02      	cmp	r3, #2
 8009090:	d014      	beq.n	80090bc <USBD_LL_DataOutStage+0x98>
 8009092:	2b02      	cmp	r3, #2
 8009094:	d81d      	bhi.n	80090d2 <USBD_LL_DataOutStage+0xae>
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <USBD_LL_DataOutStage+0x7c>
 800909a:	2b01      	cmp	r3, #1
 800909c:	d003      	beq.n	80090a6 <USBD_LL_DataOutStage+0x82>
 800909e:	e018      	b.n	80090d2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80090a0:	2300      	movs	r3, #0
 80090a2:	75bb      	strb	r3, [r7, #22]
            break;
 80090a4:	e018      	b.n	80090d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	4619      	mov	r1, r3
 80090b0:	68f8      	ldr	r0, [r7, #12]
 80090b2:	f000 fa5e 	bl	8009572 <USBD_CoreFindIF>
 80090b6:	4603      	mov	r3, r0
 80090b8:	75bb      	strb	r3, [r7, #22]
            break;
 80090ba:	e00d      	b.n	80090d8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	4619      	mov	r1, r3
 80090c6:	68f8      	ldr	r0, [r7, #12]
 80090c8:	f000 fa60 	bl	800958c <USBD_CoreFindEP>
 80090cc:	4603      	mov	r3, r0
 80090ce:	75bb      	strb	r3, [r7, #22]
            break;
 80090d0:	e002      	b.n	80090d8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80090d2:	2300      	movs	r3, #0
 80090d4:	75bb      	strb	r3, [r7, #22]
            break;
 80090d6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80090d8:	7dbb      	ldrb	r3, [r7, #22]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d119      	bne.n	8009112 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090e4:	b2db      	uxtb	r3, r3
 80090e6:	2b03      	cmp	r3, #3
 80090e8:	d113      	bne.n	8009112 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80090ea:	7dba      	ldrb	r2, [r7, #22]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	32ae      	adds	r2, #174	; 0xae
 80090f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00b      	beq.n	8009112 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80090fa:	7dba      	ldrb	r2, [r7, #22]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009102:	7dba      	ldrb	r2, [r7, #22]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	32ae      	adds	r2, #174	; 0xae
 8009108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	68f8      	ldr	r0, [r7, #12]
 8009110:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009112:	68f8      	ldr	r0, [r7, #12]
 8009114:	f001 f94a 	bl	800a3ac <USBD_CtlSendStatus>
 8009118:	e032      	b.n	8009180 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800911a:	7afb      	ldrb	r3, [r7, #11]
 800911c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009120:	b2db      	uxtb	r3, r3
 8009122:	4619      	mov	r1, r3
 8009124:	68f8      	ldr	r0, [r7, #12]
 8009126:	f000 fa31 	bl	800958c <USBD_CoreFindEP>
 800912a:	4603      	mov	r3, r0
 800912c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800912e:	7dbb      	ldrb	r3, [r7, #22]
 8009130:	2bff      	cmp	r3, #255	; 0xff
 8009132:	d025      	beq.n	8009180 <USBD_LL_DataOutStage+0x15c>
 8009134:	7dbb      	ldrb	r3, [r7, #22]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d122      	bne.n	8009180 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009140:	b2db      	uxtb	r3, r3
 8009142:	2b03      	cmp	r3, #3
 8009144:	d117      	bne.n	8009176 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009146:	7dba      	ldrb	r2, [r7, #22]
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	32ae      	adds	r2, #174	; 0xae
 800914c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009150:	699b      	ldr	r3, [r3, #24]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00f      	beq.n	8009176 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009156:	7dba      	ldrb	r2, [r7, #22]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800915e:	7dba      	ldrb	r2, [r7, #22]
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	32ae      	adds	r2, #174	; 0xae
 8009164:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009168:	699b      	ldr	r3, [r3, #24]
 800916a:	7afa      	ldrb	r2, [r7, #11]
 800916c:	4611      	mov	r1, r2
 800916e:	68f8      	ldr	r0, [r7, #12]
 8009170:	4798      	blx	r3
 8009172:	4603      	mov	r3, r0
 8009174:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d001      	beq.n	8009180 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800917c:	7dfb      	ldrb	r3, [r7, #23]
 800917e:	e000      	b.n	8009182 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009180:	2300      	movs	r3, #0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3718      	adds	r7, #24
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}

0800918a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800918a:	b580      	push	{r7, lr}
 800918c:	b086      	sub	sp, #24
 800918e:	af00      	add	r7, sp, #0
 8009190:	60f8      	str	r0, [r7, #12]
 8009192:	460b      	mov	r3, r1
 8009194:	607a      	str	r2, [r7, #4]
 8009196:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009198:	7afb      	ldrb	r3, [r7, #11]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d16f      	bne.n	800927e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	3314      	adds	r3, #20
 80091a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d15a      	bne.n	8009264 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	689a      	ldr	r2, [r3, #8]
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d914      	bls.n	80091e4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	689a      	ldr	r2, [r3, #8]
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	1ad2      	subs	r2, r2, r3
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	461a      	mov	r2, r3
 80091ce:	6879      	ldr	r1, [r7, #4]
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f001 f8ac 	bl	800a32e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091d6:	2300      	movs	r3, #0
 80091d8:	2200      	movs	r2, #0
 80091da:	2100      	movs	r1, #0
 80091dc:	68f8      	ldr	r0, [r7, #12]
 80091de:	f004 fd9b 	bl	800dd18 <USBD_LL_PrepareReceive>
 80091e2:	e03f      	b.n	8009264 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	68da      	ldr	r2, [r3, #12]
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	689b      	ldr	r3, [r3, #8]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d11c      	bne.n	800922a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80091f0:	693b      	ldr	r3, [r7, #16]
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d316      	bcc.n	800922a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009206:	429a      	cmp	r2, r3
 8009208:	d20f      	bcs.n	800922a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800920a:	2200      	movs	r2, #0
 800920c:	2100      	movs	r1, #0
 800920e:	68f8      	ldr	r0, [r7, #12]
 8009210:	f001 f88d 	bl	800a32e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2200      	movs	r2, #0
 8009218:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800921c:	2300      	movs	r3, #0
 800921e:	2200      	movs	r2, #0
 8009220:	2100      	movs	r1, #0
 8009222:	68f8      	ldr	r0, [r7, #12]
 8009224:	f004 fd78 	bl	800dd18 <USBD_LL_PrepareReceive>
 8009228:	e01c      	b.n	8009264 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b03      	cmp	r3, #3
 8009234:	d10f      	bne.n	8009256 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d009      	beq.n	8009256 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2200      	movs	r2, #0
 8009246:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009256:	2180      	movs	r1, #128	; 0x80
 8009258:	68f8      	ldr	r0, [r7, #12]
 800925a:	f004 fcb3 	bl	800dbc4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f001 f8b7 	bl	800a3d2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800926a:	2b00      	cmp	r3, #0
 800926c:	d03a      	beq.n	80092e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f7ff fe42 	bl	8008ef8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2200      	movs	r2, #0
 8009278:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800927c:	e032      	b.n	80092e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800927e:	7afb      	ldrb	r3, [r7, #11]
 8009280:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009284:	b2db      	uxtb	r3, r3
 8009286:	4619      	mov	r1, r3
 8009288:	68f8      	ldr	r0, [r7, #12]
 800928a:	f000 f97f 	bl	800958c <USBD_CoreFindEP>
 800928e:	4603      	mov	r3, r0
 8009290:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009292:	7dfb      	ldrb	r3, [r7, #23]
 8009294:	2bff      	cmp	r3, #255	; 0xff
 8009296:	d025      	beq.n	80092e4 <USBD_LL_DataInStage+0x15a>
 8009298:	7dfb      	ldrb	r3, [r7, #23]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d122      	bne.n	80092e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b03      	cmp	r3, #3
 80092a8:	d11c      	bne.n	80092e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80092aa:	7dfa      	ldrb	r2, [r7, #23]
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	32ae      	adds	r2, #174	; 0xae
 80092b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d014      	beq.n	80092e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80092ba:	7dfa      	ldrb	r2, [r7, #23]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80092c2:	7dfa      	ldrb	r2, [r7, #23]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	32ae      	adds	r2, #174	; 0xae
 80092c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	7afa      	ldrb	r2, [r7, #11]
 80092d0:	4611      	mov	r1, r2
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	4798      	blx	r3
 80092d6:	4603      	mov	r3, r0
 80092d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80092da:	7dbb      	ldrb	r3, [r7, #22]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d001      	beq.n	80092e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80092e0:	7dbb      	ldrb	r3, [r7, #22]
 80092e2:	e000      	b.n	80092e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80092e4:	2300      	movs	r3, #0
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3718      	adds	r7, #24
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80092ee:	b580      	push	{r7, lr}
 80092f0:	b084      	sub	sp, #16
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2200      	movs	r2, #0
 8009306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009326:	2b00      	cmp	r3, #0
 8009328:	d014      	beq.n	8009354 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00e      	beq.n	8009354 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	6852      	ldr	r2, [r2, #4]
 8009342:	b2d2      	uxtb	r2, r2
 8009344:	4611      	mov	r1, r2
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	4798      	blx	r3
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d001      	beq.n	8009354 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009350:	2303      	movs	r3, #3
 8009352:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009354:	2340      	movs	r3, #64	; 0x40
 8009356:	2200      	movs	r2, #0
 8009358:	2100      	movs	r1, #0
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f004 fbed 	bl	800db3a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2201      	movs	r2, #1
 8009364:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2240      	movs	r2, #64	; 0x40
 800936c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009370:	2340      	movs	r3, #64	; 0x40
 8009372:	2200      	movs	r2, #0
 8009374:	2180      	movs	r1, #128	; 0x80
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f004 fbdf 	bl	800db3a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2201      	movs	r2, #1
 8009380:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2240      	movs	r2, #64	; 0x40
 8009386:	621a      	str	r2, [r3, #32]

  return ret;
 8009388:	7bfb      	ldrb	r3, [r7, #15]
}
 800938a:	4618      	mov	r0, r3
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}

08009392 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
 800939a:	460b      	mov	r3, r1
 800939c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	78fa      	ldrb	r2, [r7, #3]
 80093a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093a4:	2300      	movs	r3, #0
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	370c      	adds	r7, #12
 80093aa:	46bd      	mov	sp, r7
 80093ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b0:	4770      	bx	lr

080093b2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b083      	sub	sp, #12
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093c0:	b2da      	uxtb	r2, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2204      	movs	r2, #4
 80093cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80093d0:	2300      	movs	r3, #0
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	370c      	adds	r7, #12
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr

080093de <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093de:	b480      	push	{r7}
 80093e0:	b083      	sub	sp, #12
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	d106      	bne.n	8009400 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	370c      	adds	r7, #12
 8009406:	46bd      	mov	sp, r7
 8009408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940c:	4770      	bx	lr

0800940e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800940e:	b580      	push	{r7, lr}
 8009410:	b082      	sub	sp, #8
 8009412:	af00      	add	r7, sp, #0
 8009414:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800941c:	b2db      	uxtb	r3, r3
 800941e:	2b03      	cmp	r3, #3
 8009420:	d110      	bne.n	8009444 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009428:	2b00      	cmp	r3, #0
 800942a:	d00b      	beq.n	8009444 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009432:	69db      	ldr	r3, [r3, #28]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d005      	beq.n	8009444 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800943e:	69db      	ldr	r3, [r3, #28]
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009444:	2300      	movs	r3, #0
}
 8009446:	4618      	mov	r0, r3
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	460b      	mov	r3, r1
 8009458:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	32ae      	adds	r2, #174	; 0xae
 8009464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d101      	bne.n	8009470 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800946c:	2303      	movs	r3, #3
 800946e:	e01c      	b.n	80094aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b03      	cmp	r3, #3
 800947a:	d115      	bne.n	80094a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	32ae      	adds	r2, #174	; 0xae
 8009486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800948a:	6a1b      	ldr	r3, [r3, #32]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d00b      	beq.n	80094a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	32ae      	adds	r2, #174	; 0xae
 800949a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800949e:	6a1b      	ldr	r3, [r3, #32]
 80094a0:	78fa      	ldrb	r2, [r7, #3]
 80094a2:	4611      	mov	r1, r2
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3708      	adds	r7, #8
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}

080094b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b082      	sub	sp, #8
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	460b      	mov	r3, r1
 80094bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	32ae      	adds	r2, #174	; 0xae
 80094c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e01c      	b.n	800950e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b03      	cmp	r3, #3
 80094de:	d115      	bne.n	800950c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	32ae      	adds	r2, #174	; 0xae
 80094ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00b      	beq.n	800950c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	32ae      	adds	r2, #174	; 0xae
 80094fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009504:	78fa      	ldrb	r2, [r7, #3]
 8009506:	4611      	mov	r1, r2
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800950c:	2300      	movs	r3, #0
}
 800950e:	4618      	mov	r0, r3
 8009510:	3708      	adds	r7, #8
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009516:	b480      	push	{r7}
 8009518:	b083      	sub	sp, #12
 800951a:	af00      	add	r7, sp, #0
 800951c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800951e:	2300      	movs	r3, #0
}
 8009520:	4618      	mov	r0, r3
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr

0800952c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00e      	beq.n	8009568 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	687a      	ldr	r2, [r7, #4]
 8009554:	6852      	ldr	r2, [r2, #4]
 8009556:	b2d2      	uxtb	r2, r2
 8009558:	4611      	mov	r1, r2
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	4798      	blx	r3
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009564:	2303      	movs	r3, #3
 8009566:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009568:	7bfb      	ldrb	r3, [r7, #15]
}
 800956a:	4618      	mov	r0, r3
 800956c:	3710      	adds	r7, #16
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009572:	b480      	push	{r7}
 8009574:	b083      	sub	sp, #12
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
 800957a:	460b      	mov	r3, r1
 800957c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800957e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009580:	4618      	mov	r0, r3
 8009582:	370c      	adds	r7, #12
 8009584:	46bd      	mov	sp, r7
 8009586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958a:	4770      	bx	lr

0800958c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	460b      	mov	r3, r1
 8009596:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009598:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800959a:	4618      	mov	r0, r3
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80095a6:	b580      	push	{r7, lr}
 80095a8:	b086      	sub	sp, #24
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	460b      	mov	r3, r1
 80095b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80095ba:	2300      	movs	r3, #0
 80095bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	885b      	ldrh	r3, [r3, #2]
 80095c2:	b29a      	uxth	r2, r3
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	781b      	ldrb	r3, [r3, #0]
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d920      	bls.n	8009610 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	b29b      	uxth	r3, r3
 80095d4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80095d6:	e013      	b.n	8009600 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80095d8:	f107 030a 	add.w	r3, r7, #10
 80095dc:	4619      	mov	r1, r3
 80095de:	6978      	ldr	r0, [r7, #20]
 80095e0:	f000 f81b 	bl	800961a <USBD_GetNextDesc>
 80095e4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80095e6:	697b      	ldr	r3, [r7, #20]
 80095e8:	785b      	ldrb	r3, [r3, #1]
 80095ea:	2b05      	cmp	r3, #5
 80095ec:	d108      	bne.n	8009600 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	789b      	ldrb	r3, [r3, #2]
 80095f6:	78fa      	ldrb	r2, [r7, #3]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d008      	beq.n	800960e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80095fc:	2300      	movs	r3, #0
 80095fe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	885b      	ldrh	r3, [r3, #2]
 8009604:	b29a      	uxth	r2, r3
 8009606:	897b      	ldrh	r3, [r7, #10]
 8009608:	429a      	cmp	r2, r3
 800960a:	d8e5      	bhi.n	80095d8 <USBD_GetEpDesc+0x32>
 800960c:	e000      	b.n	8009610 <USBD_GetEpDesc+0x6a>
          break;
 800960e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009610:	693b      	ldr	r3, [r7, #16]
}
 8009612:	4618      	mov	r0, r3
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800961a:	b480      	push	{r7}
 800961c:	b085      	sub	sp, #20
 800961e:	af00      	add	r7, sp, #0
 8009620:	6078      	str	r0, [r7, #4]
 8009622:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	881a      	ldrh	r2, [r3, #0]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	b29b      	uxth	r3, r3
 8009632:	4413      	add	r3, r2
 8009634:	b29a      	uxth	r2, r3
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	781b      	ldrb	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4413      	add	r3, r2
 8009644:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009646:	68fb      	ldr	r3, [r7, #12]
}
 8009648:	4618      	mov	r0, r3
 800964a:	3714      	adds	r7, #20
 800964c:	46bd      	mov	sp, r7
 800964e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009652:	4770      	bx	lr

08009654 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009654:	b480      	push	{r7}
 8009656:	b087      	sub	sp, #28
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	3301      	adds	r3, #1
 800966a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009672:	8a3b      	ldrh	r3, [r7, #16]
 8009674:	021b      	lsls	r3, r3, #8
 8009676:	b21a      	sxth	r2, r3
 8009678:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800967c:	4313      	orrs	r3, r2
 800967e:	b21b      	sxth	r3, r3
 8009680:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009682:	89fb      	ldrh	r3, [r7, #14]
}
 8009684:	4618      	mov	r0, r3
 8009686:	371c      	adds	r7, #28
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800969a:	2300      	movs	r3, #0
 800969c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096a6:	2b40      	cmp	r3, #64	; 0x40
 80096a8:	d005      	beq.n	80096b6 <USBD_StdDevReq+0x26>
 80096aa:	2b40      	cmp	r3, #64	; 0x40
 80096ac:	d857      	bhi.n	800975e <USBD_StdDevReq+0xce>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d00f      	beq.n	80096d2 <USBD_StdDevReq+0x42>
 80096b2:	2b20      	cmp	r3, #32
 80096b4:	d153      	bne.n	800975e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	32ae      	adds	r2, #174	; 0xae
 80096c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	6839      	ldr	r1, [r7, #0]
 80096c8:	6878      	ldr	r0, [r7, #4]
 80096ca:	4798      	blx	r3
 80096cc:	4603      	mov	r3, r0
 80096ce:	73fb      	strb	r3, [r7, #15]
      break;
 80096d0:	e04a      	b.n	8009768 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	785b      	ldrb	r3, [r3, #1]
 80096d6:	2b09      	cmp	r3, #9
 80096d8:	d83b      	bhi.n	8009752 <USBD_StdDevReq+0xc2>
 80096da:	a201      	add	r2, pc, #4	; (adr r2, 80096e0 <USBD_StdDevReq+0x50>)
 80096dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e0:	08009735 	.word	0x08009735
 80096e4:	08009749 	.word	0x08009749
 80096e8:	08009753 	.word	0x08009753
 80096ec:	0800973f 	.word	0x0800973f
 80096f0:	08009753 	.word	0x08009753
 80096f4:	08009713 	.word	0x08009713
 80096f8:	08009709 	.word	0x08009709
 80096fc:	08009753 	.word	0x08009753
 8009700:	0800972b 	.word	0x0800972b
 8009704:	0800971d 	.word	0x0800971d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009708:	6839      	ldr	r1, [r7, #0]
 800970a:	6878      	ldr	r0, [r7, #4]
 800970c:	f000 fa3c 	bl	8009b88 <USBD_GetDescriptor>
          break;
 8009710:	e024      	b.n	800975c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009712:	6839      	ldr	r1, [r7, #0]
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fba1 	bl	8009e5c <USBD_SetAddress>
          break;
 800971a:	e01f      	b.n	800975c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fbe0 	bl	8009ee4 <USBD_SetConfig>
 8009724:	4603      	mov	r3, r0
 8009726:	73fb      	strb	r3, [r7, #15]
          break;
 8009728:	e018      	b.n	800975c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800972a:	6839      	ldr	r1, [r7, #0]
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 fc83 	bl	800a038 <USBD_GetConfig>
          break;
 8009732:	e013      	b.n	800975c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009734:	6839      	ldr	r1, [r7, #0]
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f000 fcb4 	bl	800a0a4 <USBD_GetStatus>
          break;
 800973c:	e00e      	b.n	800975c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800973e:	6839      	ldr	r1, [r7, #0]
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f000 fce3 	bl	800a10c <USBD_SetFeature>
          break;
 8009746:	e009      	b.n	800975c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009748:	6839      	ldr	r1, [r7, #0]
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fd07 	bl	800a15e <USBD_ClrFeature>
          break;
 8009750:	e004      	b.n	800975c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009752:	6839      	ldr	r1, [r7, #0]
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f000 fd5e 	bl	800a216 <USBD_CtlError>
          break;
 800975a:	bf00      	nop
      }
      break;
 800975c:	e004      	b.n	8009768 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800975e:	6839      	ldr	r1, [r7, #0]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 fd58 	bl	800a216 <USBD_CtlError>
      break;
 8009766:	bf00      	nop
  }

  return ret;
 8009768:	7bfb      	ldrb	r3, [r7, #15]
}
 800976a:	4618      	mov	r0, r3
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop

08009774 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800978a:	2b40      	cmp	r3, #64	; 0x40
 800978c:	d005      	beq.n	800979a <USBD_StdItfReq+0x26>
 800978e:	2b40      	cmp	r3, #64	; 0x40
 8009790:	d852      	bhi.n	8009838 <USBD_StdItfReq+0xc4>
 8009792:	2b00      	cmp	r3, #0
 8009794:	d001      	beq.n	800979a <USBD_StdItfReq+0x26>
 8009796:	2b20      	cmp	r3, #32
 8009798:	d14e      	bne.n	8009838 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	3b01      	subs	r3, #1
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d840      	bhi.n	800982a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	889b      	ldrh	r3, [r3, #4]
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d836      	bhi.n	8009820 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	889b      	ldrh	r3, [r3, #4]
 80097b6:	b2db      	uxtb	r3, r3
 80097b8:	4619      	mov	r1, r3
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f7ff fed9 	bl	8009572 <USBD_CoreFindIF>
 80097c0:	4603      	mov	r3, r0
 80097c2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097c4:	7bbb      	ldrb	r3, [r7, #14]
 80097c6:	2bff      	cmp	r3, #255	; 0xff
 80097c8:	d01d      	beq.n	8009806 <USBD_StdItfReq+0x92>
 80097ca:	7bbb      	ldrb	r3, [r7, #14]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d11a      	bne.n	8009806 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80097d0:	7bba      	ldrb	r2, [r7, #14]
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	32ae      	adds	r2, #174	; 0xae
 80097d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d00f      	beq.n	8009800 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80097e0:	7bba      	ldrb	r2, [r7, #14]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097e8:	7bba      	ldrb	r2, [r7, #14]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	32ae      	adds	r2, #174	; 0xae
 80097ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	4798      	blx	r3
 80097fa:	4603      	mov	r3, r0
 80097fc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80097fe:	e004      	b.n	800980a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009800:	2303      	movs	r3, #3
 8009802:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009804:	e001      	b.n	800980a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009806:	2303      	movs	r3, #3
 8009808:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	88db      	ldrh	r3, [r3, #6]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d110      	bne.n	8009834 <USBD_StdItfReq+0xc0>
 8009812:	7bfb      	ldrb	r3, [r7, #15]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d10d      	bne.n	8009834 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009818:	6878      	ldr	r0, [r7, #4]
 800981a:	f000 fdc7 	bl	800a3ac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800981e:	e009      	b.n	8009834 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fcf7 	bl	800a216 <USBD_CtlError>
          break;
 8009828:	e004      	b.n	8009834 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fcf2 	bl	800a216 <USBD_CtlError>
          break;
 8009832:	e000      	b.n	8009836 <USBD_StdItfReq+0xc2>
          break;
 8009834:	bf00      	nop
      }
      break;
 8009836:	e004      	b.n	8009842 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009838:	6839      	ldr	r1, [r7, #0]
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f000 fceb 	bl	800a216 <USBD_CtlError>
      break;
 8009840:	bf00      	nop
  }

  return ret;
 8009842:	7bfb      	ldrb	r3, [r7, #15]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}

0800984c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b084      	sub	sp, #16
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	889b      	ldrh	r3, [r3, #4]
 800985e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	781b      	ldrb	r3, [r3, #0]
 8009864:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009868:	2b40      	cmp	r3, #64	; 0x40
 800986a:	d007      	beq.n	800987c <USBD_StdEPReq+0x30>
 800986c:	2b40      	cmp	r3, #64	; 0x40
 800986e:	f200 817f 	bhi.w	8009b70 <USBD_StdEPReq+0x324>
 8009872:	2b00      	cmp	r3, #0
 8009874:	d02a      	beq.n	80098cc <USBD_StdEPReq+0x80>
 8009876:	2b20      	cmp	r3, #32
 8009878:	f040 817a 	bne.w	8009b70 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800987c:	7bbb      	ldrb	r3, [r7, #14]
 800987e:	4619      	mov	r1, r3
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f7ff fe83 	bl	800958c <USBD_CoreFindEP>
 8009886:	4603      	mov	r3, r0
 8009888:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800988a:	7b7b      	ldrb	r3, [r7, #13]
 800988c:	2bff      	cmp	r3, #255	; 0xff
 800988e:	f000 8174 	beq.w	8009b7a <USBD_StdEPReq+0x32e>
 8009892:	7b7b      	ldrb	r3, [r7, #13]
 8009894:	2b00      	cmp	r3, #0
 8009896:	f040 8170 	bne.w	8009b7a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800989a:	7b7a      	ldrb	r2, [r7, #13]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80098a2:	7b7a      	ldrb	r2, [r7, #13]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	32ae      	adds	r2, #174	; 0xae
 80098a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	f000 8163 	beq.w	8009b7a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80098b4:	7b7a      	ldrb	r2, [r7, #13]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	32ae      	adds	r2, #174	; 0xae
 80098ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098be:	689b      	ldr	r3, [r3, #8]
 80098c0:	6839      	ldr	r1, [r7, #0]
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	4798      	blx	r3
 80098c6:	4603      	mov	r3, r0
 80098c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098ca:	e156      	b.n	8009b7a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	785b      	ldrb	r3, [r3, #1]
 80098d0:	2b03      	cmp	r3, #3
 80098d2:	d008      	beq.n	80098e6 <USBD_StdEPReq+0x9a>
 80098d4:	2b03      	cmp	r3, #3
 80098d6:	f300 8145 	bgt.w	8009b64 <USBD_StdEPReq+0x318>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 809b 	beq.w	8009a16 <USBD_StdEPReq+0x1ca>
 80098e0:	2b01      	cmp	r3, #1
 80098e2:	d03c      	beq.n	800995e <USBD_StdEPReq+0x112>
 80098e4:	e13e      	b.n	8009b64 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d002      	beq.n	80098f8 <USBD_StdEPReq+0xac>
 80098f2:	2b03      	cmp	r3, #3
 80098f4:	d016      	beq.n	8009924 <USBD_StdEPReq+0xd8>
 80098f6:	e02c      	b.n	8009952 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80098f8:	7bbb      	ldrb	r3, [r7, #14]
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d00d      	beq.n	800991a <USBD_StdEPReq+0xce>
 80098fe:	7bbb      	ldrb	r3, [r7, #14]
 8009900:	2b80      	cmp	r3, #128	; 0x80
 8009902:	d00a      	beq.n	800991a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009904:	7bbb      	ldrb	r3, [r7, #14]
 8009906:	4619      	mov	r1, r3
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f004 f95b 	bl	800dbc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800990e:	2180      	movs	r1, #128	; 0x80
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f004 f957 	bl	800dbc4 <USBD_LL_StallEP>
 8009916:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009918:	e020      	b.n	800995c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f000 fc7a 	bl	800a216 <USBD_CtlError>
              break;
 8009922:	e01b      	b.n	800995c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	885b      	ldrh	r3, [r3, #2]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10e      	bne.n	800994a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800992c:	7bbb      	ldrb	r3, [r7, #14]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00b      	beq.n	800994a <USBD_StdEPReq+0xfe>
 8009932:	7bbb      	ldrb	r3, [r7, #14]
 8009934:	2b80      	cmp	r3, #128	; 0x80
 8009936:	d008      	beq.n	800994a <USBD_StdEPReq+0xfe>
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	88db      	ldrh	r3, [r3, #6]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d104      	bne.n	800994a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009940:	7bbb      	ldrb	r3, [r7, #14]
 8009942:	4619      	mov	r1, r3
 8009944:	6878      	ldr	r0, [r7, #4]
 8009946:	f004 f93d 	bl	800dbc4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fd2e 	bl	800a3ac <USBD_CtlSendStatus>

              break;
 8009950:	e004      	b.n	800995c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 fc5e 	bl	800a216 <USBD_CtlError>
              break;
 800995a:	bf00      	nop
          }
          break;
 800995c:	e107      	b.n	8009b6e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009964:	b2db      	uxtb	r3, r3
 8009966:	2b02      	cmp	r3, #2
 8009968:	d002      	beq.n	8009970 <USBD_StdEPReq+0x124>
 800996a:	2b03      	cmp	r3, #3
 800996c:	d016      	beq.n	800999c <USBD_StdEPReq+0x150>
 800996e:	e04b      	b.n	8009a08 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009970:	7bbb      	ldrb	r3, [r7, #14]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00d      	beq.n	8009992 <USBD_StdEPReq+0x146>
 8009976:	7bbb      	ldrb	r3, [r7, #14]
 8009978:	2b80      	cmp	r3, #128	; 0x80
 800997a:	d00a      	beq.n	8009992 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800997c:	7bbb      	ldrb	r3, [r7, #14]
 800997e:	4619      	mov	r1, r3
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f004 f91f 	bl	800dbc4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009986:	2180      	movs	r1, #128	; 0x80
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f004 f91b 	bl	800dbc4 <USBD_LL_StallEP>
 800998e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009990:	e040      	b.n	8009a14 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009992:	6839      	ldr	r1, [r7, #0]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f000 fc3e 	bl	800a216 <USBD_CtlError>
              break;
 800999a:	e03b      	b.n	8009a14 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	885b      	ldrh	r3, [r3, #2]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d136      	bne.n	8009a12 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099a4:	7bbb      	ldrb	r3, [r7, #14]
 80099a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d004      	beq.n	80099b8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
 80099b0:	4619      	mov	r1, r3
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f004 f925 	bl	800dc02 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fcf7 	bl	800a3ac <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80099be:	7bbb      	ldrb	r3, [r7, #14]
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f7ff fde2 	bl	800958c <USBD_CoreFindEP>
 80099c8:	4603      	mov	r3, r0
 80099ca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099cc:	7b7b      	ldrb	r3, [r7, #13]
 80099ce:	2bff      	cmp	r3, #255	; 0xff
 80099d0:	d01f      	beq.n	8009a12 <USBD_StdEPReq+0x1c6>
 80099d2:	7b7b      	ldrb	r3, [r7, #13]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d11c      	bne.n	8009a12 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80099d8:	7b7a      	ldrb	r2, [r7, #13]
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80099e0:	7b7a      	ldrb	r2, [r7, #13]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	32ae      	adds	r2, #174	; 0xae
 80099e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099ea:	689b      	ldr	r3, [r3, #8]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d010      	beq.n	8009a12 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80099f0:	7b7a      	ldrb	r2, [r7, #13]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	32ae      	adds	r2, #174	; 0xae
 80099f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	6839      	ldr	r1, [r7, #0]
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	4798      	blx	r3
 8009a02:	4603      	mov	r3, r0
 8009a04:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009a06:	e004      	b.n	8009a12 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 fc03 	bl	800a216 <USBD_CtlError>
              break;
 8009a10:	e000      	b.n	8009a14 <USBD_StdEPReq+0x1c8>
              break;
 8009a12:	bf00      	nop
          }
          break;
 8009a14:	e0ab      	b.n	8009b6e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a1c:	b2db      	uxtb	r3, r3
 8009a1e:	2b02      	cmp	r3, #2
 8009a20:	d002      	beq.n	8009a28 <USBD_StdEPReq+0x1dc>
 8009a22:	2b03      	cmp	r3, #3
 8009a24:	d032      	beq.n	8009a8c <USBD_StdEPReq+0x240>
 8009a26:	e097      	b.n	8009b58 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a28:	7bbb      	ldrb	r3, [r7, #14]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d007      	beq.n	8009a3e <USBD_StdEPReq+0x1f2>
 8009a2e:	7bbb      	ldrb	r3, [r7, #14]
 8009a30:	2b80      	cmp	r3, #128	; 0x80
 8009a32:	d004      	beq.n	8009a3e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009a34:	6839      	ldr	r1, [r7, #0]
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 fbed 	bl	800a216 <USBD_CtlError>
                break;
 8009a3c:	e091      	b.n	8009b62 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	da0b      	bge.n	8009a5e <USBD_StdEPReq+0x212>
 8009a46:	7bbb      	ldrb	r3, [r7, #14]
 8009a48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a4c:	4613      	mov	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4413      	add	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	3310      	adds	r3, #16
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	4413      	add	r3, r2
 8009a5a:	3304      	adds	r3, #4
 8009a5c:	e00b      	b.n	8009a76 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a5e:	7bbb      	ldrb	r3, [r7, #14]
 8009a60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a64:	4613      	mov	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4413      	add	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	4413      	add	r3, r2
 8009a74:	3304      	adds	r3, #4
 8009a76:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	2202      	movs	r2, #2
 8009a82:	4619      	mov	r1, r3
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fc37 	bl	800a2f8 <USBD_CtlSendData>
              break;
 8009a8a:	e06a      	b.n	8009b62 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	da11      	bge.n	8009ab8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009a94:	7bbb      	ldrb	r3, [r7, #14]
 8009a96:	f003 020f 	and.w	r2, r3, #15
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	440b      	add	r3, r1
 8009aa6:	3324      	adds	r3, #36	; 0x24
 8009aa8:	881b      	ldrh	r3, [r3, #0]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d117      	bne.n	8009ade <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009aae:	6839      	ldr	r1, [r7, #0]
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f000 fbb0 	bl	800a216 <USBD_CtlError>
                  break;
 8009ab6:	e054      	b.n	8009b62 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ab8:	7bbb      	ldrb	r3, [r7, #14]
 8009aba:	f003 020f 	and.w	r2, r3, #15
 8009abe:	6879      	ldr	r1, [r7, #4]
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	009b      	lsls	r3, r3, #2
 8009ac4:	4413      	add	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	440b      	add	r3, r1
 8009aca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d104      	bne.n	8009ade <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ad4:	6839      	ldr	r1, [r7, #0]
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fb9d 	bl	800a216 <USBD_CtlError>
                  break;
 8009adc:	e041      	b.n	8009b62 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ade:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	da0b      	bge.n	8009afe <USBD_StdEPReq+0x2b2>
 8009ae6:	7bbb      	ldrb	r3, [r7, #14]
 8009ae8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009aec:	4613      	mov	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	3310      	adds	r3, #16
 8009af6:	687a      	ldr	r2, [r7, #4]
 8009af8:	4413      	add	r3, r2
 8009afa:	3304      	adds	r3, #4
 8009afc:	e00b      	b.n	8009b16 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009afe:	7bbb      	ldrb	r3, [r7, #14]
 8009b00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b04:	4613      	mov	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4413      	add	r3, r2
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	4413      	add	r3, r2
 8009b14:	3304      	adds	r3, #4
 8009b16:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d002      	beq.n	8009b24 <USBD_StdEPReq+0x2d8>
 8009b1e:	7bbb      	ldrb	r3, [r7, #14]
 8009b20:	2b80      	cmp	r3, #128	; 0x80
 8009b22:	d103      	bne.n	8009b2c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	2200      	movs	r2, #0
 8009b28:	601a      	str	r2, [r3, #0]
 8009b2a:	e00e      	b.n	8009b4a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b2c:	7bbb      	ldrb	r3, [r7, #14]
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f004 f885 	bl	800dc40 <USBD_LL_IsStallEP>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d003      	beq.n	8009b44 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	601a      	str	r2, [r3, #0]
 8009b42:	e002      	b.n	8009b4a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	2200      	movs	r2, #0
 8009b48:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	2202      	movs	r2, #2
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 fbd1 	bl	800a2f8 <USBD_CtlSendData>
              break;
 8009b56:	e004      	b.n	8009b62 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 fb5b 	bl	800a216 <USBD_CtlError>
              break;
 8009b60:	bf00      	nop
          }
          break;
 8009b62:	e004      	b.n	8009b6e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fb55 	bl	800a216 <USBD_CtlError>
          break;
 8009b6c:	bf00      	nop
      }
      break;
 8009b6e:	e005      	b.n	8009b7c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009b70:	6839      	ldr	r1, [r7, #0]
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fb4f 	bl	800a216 <USBD_CtlError>
      break;
 8009b78:	e000      	b.n	8009b7c <USBD_StdEPReq+0x330>
      break;
 8009b7a:	bf00      	nop
  }

  return ret;
 8009b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
 8009b90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009b92:	2300      	movs	r3, #0
 8009b94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	885b      	ldrh	r3, [r3, #2]
 8009ba2:	0a1b      	lsrs	r3, r3, #8
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	2b06      	cmp	r3, #6
 8009baa:	f200 8128 	bhi.w	8009dfe <USBD_GetDescriptor+0x276>
 8009bae:	a201      	add	r2, pc, #4	; (adr r2, 8009bb4 <USBD_GetDescriptor+0x2c>)
 8009bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb4:	08009bd1 	.word	0x08009bd1
 8009bb8:	08009be9 	.word	0x08009be9
 8009bbc:	08009c29 	.word	0x08009c29
 8009bc0:	08009dff 	.word	0x08009dff
 8009bc4:	08009dff 	.word	0x08009dff
 8009bc8:	08009d9f 	.word	0x08009d9f
 8009bcc:	08009dcb 	.word	0x08009dcb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	7c12      	ldrb	r2, [r2, #16]
 8009bdc:	f107 0108 	add.w	r1, r7, #8
 8009be0:	4610      	mov	r0, r2
 8009be2:	4798      	blx	r3
 8009be4:	60f8      	str	r0, [r7, #12]
      break;
 8009be6:	e112      	b.n	8009e0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	7c1b      	ldrb	r3, [r3, #16]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10d      	bne.n	8009c0c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf8:	f107 0208 	add.w	r2, r7, #8
 8009bfc:	4610      	mov	r0, r2
 8009bfe:	4798      	blx	r3
 8009c00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3301      	adds	r3, #1
 8009c06:	2202      	movs	r2, #2
 8009c08:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c0a:	e100      	b.n	8009e0e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c14:	f107 0208 	add.w	r2, r7, #8
 8009c18:	4610      	mov	r0, r2
 8009c1a:	4798      	blx	r3
 8009c1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	3301      	adds	r3, #1
 8009c22:	2202      	movs	r2, #2
 8009c24:	701a      	strb	r2, [r3, #0]
      break;
 8009c26:	e0f2      	b.n	8009e0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	885b      	ldrh	r3, [r3, #2]
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	2b05      	cmp	r3, #5
 8009c30:	f200 80ac 	bhi.w	8009d8c <USBD_GetDescriptor+0x204>
 8009c34:	a201      	add	r2, pc, #4	; (adr r2, 8009c3c <USBD_GetDescriptor+0xb4>)
 8009c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c3a:	bf00      	nop
 8009c3c:	08009c55 	.word	0x08009c55
 8009c40:	08009c89 	.word	0x08009c89
 8009c44:	08009cbd 	.word	0x08009cbd
 8009c48:	08009cf1 	.word	0x08009cf1
 8009c4c:	08009d25 	.word	0x08009d25
 8009c50:	08009d59 	.word	0x08009d59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00b      	beq.n	8009c78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	7c12      	ldrb	r2, [r2, #16]
 8009c6c:	f107 0108 	add.w	r1, r7, #8
 8009c70:	4610      	mov	r0, r2
 8009c72:	4798      	blx	r3
 8009c74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c76:	e091      	b.n	8009d9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c78:	6839      	ldr	r1, [r7, #0]
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f000 facb 	bl	800a216 <USBD_CtlError>
            err++;
 8009c80:	7afb      	ldrb	r3, [r7, #11]
 8009c82:	3301      	adds	r3, #1
 8009c84:	72fb      	strb	r3, [r7, #11]
          break;
 8009c86:	e089      	b.n	8009d9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d00b      	beq.n	8009cac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	687a      	ldr	r2, [r7, #4]
 8009c9e:	7c12      	ldrb	r2, [r2, #16]
 8009ca0:	f107 0108 	add.w	r1, r7, #8
 8009ca4:	4610      	mov	r0, r2
 8009ca6:	4798      	blx	r3
 8009ca8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009caa:	e077      	b.n	8009d9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fab1 	bl	800a216 <USBD_CtlError>
            err++;
 8009cb4:	7afb      	ldrb	r3, [r7, #11]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cba:	e06f      	b.n	8009d9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cc2:	68db      	ldr	r3, [r3, #12]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d00b      	beq.n	8009ce0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	7c12      	ldrb	r2, [r2, #16]
 8009cd4:	f107 0108 	add.w	r1, r7, #8
 8009cd8:	4610      	mov	r0, r2
 8009cda:	4798      	blx	r3
 8009cdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cde:	e05d      	b.n	8009d9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fa97 	bl	800a216 <USBD_CtlError>
            err++;
 8009ce8:	7afb      	ldrb	r3, [r7, #11]
 8009cea:	3301      	adds	r3, #1
 8009cec:	72fb      	strb	r3, [r7, #11]
          break;
 8009cee:	e055      	b.n	8009d9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00b      	beq.n	8009d14 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d02:	691b      	ldr	r3, [r3, #16]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	7c12      	ldrb	r2, [r2, #16]
 8009d08:	f107 0108 	add.w	r1, r7, #8
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	4798      	blx	r3
 8009d10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d12:	e043      	b.n	8009d9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d14:	6839      	ldr	r1, [r7, #0]
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 fa7d 	bl	800a216 <USBD_CtlError>
            err++;
 8009d1c:	7afb      	ldrb	r3, [r7, #11]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	72fb      	strb	r3, [r7, #11]
          break;
 8009d22:	e03b      	b.n	8009d9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d2a:	695b      	ldr	r3, [r3, #20]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00b      	beq.n	8009d48 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d36:	695b      	ldr	r3, [r3, #20]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	7c12      	ldrb	r2, [r2, #16]
 8009d3c:	f107 0108 	add.w	r1, r7, #8
 8009d40:	4610      	mov	r0, r2
 8009d42:	4798      	blx	r3
 8009d44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d46:	e029      	b.n	8009d9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 fa63 	bl	800a216 <USBD_CtlError>
            err++;
 8009d50:	7afb      	ldrb	r3, [r7, #11]
 8009d52:	3301      	adds	r3, #1
 8009d54:	72fb      	strb	r3, [r7, #11]
          break;
 8009d56:	e021      	b.n	8009d9c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d5e:	699b      	ldr	r3, [r3, #24]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d00b      	beq.n	8009d7c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d6a:	699b      	ldr	r3, [r3, #24]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	7c12      	ldrb	r2, [r2, #16]
 8009d70:	f107 0108 	add.w	r1, r7, #8
 8009d74:	4610      	mov	r0, r2
 8009d76:	4798      	blx	r3
 8009d78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d7a:	e00f      	b.n	8009d9c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d7c:	6839      	ldr	r1, [r7, #0]
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f000 fa49 	bl	800a216 <USBD_CtlError>
            err++;
 8009d84:	7afb      	ldrb	r3, [r7, #11]
 8009d86:	3301      	adds	r3, #1
 8009d88:	72fb      	strb	r3, [r7, #11]
          break;
 8009d8a:	e007      	b.n	8009d9c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fa41 	bl	800a216 <USBD_CtlError>
          err++;
 8009d94:	7afb      	ldrb	r3, [r7, #11]
 8009d96:	3301      	adds	r3, #1
 8009d98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009d9a:	bf00      	nop
      }
      break;
 8009d9c:	e037      	b.n	8009e0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	7c1b      	ldrb	r3, [r3, #16]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d109      	bne.n	8009dba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dae:	f107 0208 	add.w	r2, r7, #8
 8009db2:	4610      	mov	r0, r2
 8009db4:	4798      	blx	r3
 8009db6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009db8:	e029      	b.n	8009e0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dba:	6839      	ldr	r1, [r7, #0]
 8009dbc:	6878      	ldr	r0, [r7, #4]
 8009dbe:	f000 fa2a 	bl	800a216 <USBD_CtlError>
        err++;
 8009dc2:	7afb      	ldrb	r3, [r7, #11]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	72fb      	strb	r3, [r7, #11]
      break;
 8009dc8:	e021      	b.n	8009e0e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	7c1b      	ldrb	r3, [r3, #16]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d10d      	bne.n	8009dee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dda:	f107 0208 	add.w	r2, r7, #8
 8009dde:	4610      	mov	r0, r2
 8009de0:	4798      	blx	r3
 8009de2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	3301      	adds	r3, #1
 8009de8:	2207      	movs	r2, #7
 8009dea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dec:	e00f      	b.n	8009e0e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dee:	6839      	ldr	r1, [r7, #0]
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 fa10 	bl	800a216 <USBD_CtlError>
        err++;
 8009df6:	7afb      	ldrb	r3, [r7, #11]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	72fb      	strb	r3, [r7, #11]
      break;
 8009dfc:	e007      	b.n	8009e0e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fa08 	bl	800a216 <USBD_CtlError>
      err++;
 8009e06:	7afb      	ldrb	r3, [r7, #11]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e0c:	bf00      	nop
  }

  if (err != 0U)
 8009e0e:	7afb      	ldrb	r3, [r7, #11]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d11e      	bne.n	8009e52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	88db      	ldrh	r3, [r3, #6]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d016      	beq.n	8009e4a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009e1c:	893b      	ldrh	r3, [r7, #8]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00e      	beq.n	8009e40 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	88da      	ldrh	r2, [r3, #6]
 8009e26:	893b      	ldrh	r3, [r7, #8]
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	bf28      	it	cs
 8009e2c:	4613      	movcs	r3, r2
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e32:	893b      	ldrh	r3, [r7, #8]
 8009e34:	461a      	mov	r2, r3
 8009e36:	68f9      	ldr	r1, [r7, #12]
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fa5d 	bl	800a2f8 <USBD_CtlSendData>
 8009e3e:	e009      	b.n	8009e54 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e40:	6839      	ldr	r1, [r7, #0]
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f000 f9e7 	bl	800a216 <USBD_CtlError>
 8009e48:	e004      	b.n	8009e54 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 faae 	bl	800a3ac <USBD_CtlSendStatus>
 8009e50:	e000      	b.n	8009e54 <USBD_GetDescriptor+0x2cc>
    return;
 8009e52:	bf00      	nop
  }
}
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}
 8009e5a:	bf00      	nop

08009e5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e66:	683b      	ldr	r3, [r7, #0]
 8009e68:	889b      	ldrh	r3, [r3, #4]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d131      	bne.n	8009ed2 <USBD_SetAddress+0x76>
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	88db      	ldrh	r3, [r3, #6]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d12d      	bne.n	8009ed2 <USBD_SetAddress+0x76>
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	885b      	ldrh	r3, [r3, #2]
 8009e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8009e7c:	d829      	bhi.n	8009ed2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	885b      	ldrh	r3, [r3, #2]
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e90:	b2db      	uxtb	r3, r3
 8009e92:	2b03      	cmp	r3, #3
 8009e94:	d104      	bne.n	8009ea0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 f9bc 	bl	800a216 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e9e:	e01d      	b.n	8009edc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	7bfa      	ldrb	r2, [r7, #15]
 8009ea4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	4619      	mov	r1, r3
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f003 fef3 	bl	800dc98 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 fa7a 	bl	800a3ac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d004      	beq.n	8009ec8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2202      	movs	r2, #2
 8009ec2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ec6:	e009      	b.n	8009edc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	2201      	movs	r2, #1
 8009ecc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ed0:	e004      	b.n	8009edc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ed2:	6839      	ldr	r1, [r7, #0]
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f99e 	bl	800a216 <USBD_CtlError>
  }
}
 8009eda:	bf00      	nop
 8009edc:	bf00      	nop
 8009ede:	3710      	adds	r7, #16
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	885b      	ldrh	r3, [r3, #2]
 8009ef6:	b2da      	uxtb	r2, r3
 8009ef8:	4b4e      	ldr	r3, [pc, #312]	; (800a034 <USBD_SetConfig+0x150>)
 8009efa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009efc:	4b4d      	ldr	r3, [pc, #308]	; (800a034 <USBD_SetConfig+0x150>)
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d905      	bls.n	8009f10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f04:	6839      	ldr	r1, [r7, #0]
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f985 	bl	800a216 <USBD_CtlError>
    return USBD_FAIL;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e08c      	b.n	800a02a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d002      	beq.n	8009f22 <USBD_SetConfig+0x3e>
 8009f1c:	2b03      	cmp	r3, #3
 8009f1e:	d029      	beq.n	8009f74 <USBD_SetConfig+0x90>
 8009f20:	e075      	b.n	800a00e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009f22:	4b44      	ldr	r3, [pc, #272]	; (800a034 <USBD_SetConfig+0x150>)
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d020      	beq.n	8009f6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009f2a:	4b42      	ldr	r3, [pc, #264]	; (800a034 <USBD_SetConfig+0x150>)
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	461a      	mov	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f34:	4b3f      	ldr	r3, [pc, #252]	; (800a034 <USBD_SetConfig+0x150>)
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	4619      	mov	r1, r3
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f7fe ffe7 	bl	8008f0e <USBD_SetClassConfig>
 8009f40:	4603      	mov	r3, r0
 8009f42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f44:	7bfb      	ldrb	r3, [r7, #15]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d008      	beq.n	8009f5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009f4a:	6839      	ldr	r1, [r7, #0]
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f962 	bl	800a216 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2202      	movs	r2, #2
 8009f56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f5a:	e065      	b.n	800a028 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 fa25 	bl	800a3ac <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2203      	movs	r2, #3
 8009f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f6a:	e05d      	b.n	800a028 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fa1d 	bl	800a3ac <USBD_CtlSendStatus>
      break;
 8009f72:	e059      	b.n	800a028 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f74:	4b2f      	ldr	r3, [pc, #188]	; (800a034 <USBD_SetConfig+0x150>)
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d112      	bne.n	8009fa2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2202      	movs	r2, #2
 8009f80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009f84:	4b2b      	ldr	r3, [pc, #172]	; (800a034 <USBD_SetConfig+0x150>)
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	461a      	mov	r2, r3
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f8e:	4b29      	ldr	r3, [pc, #164]	; (800a034 <USBD_SetConfig+0x150>)
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	4619      	mov	r1, r3
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f7fe ffd6 	bl	8008f46 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fa06 	bl	800a3ac <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fa0:	e042      	b.n	800a028 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009fa2:	4b24      	ldr	r3, [pc, #144]	; (800a034 <USBD_SetConfig+0x150>)
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	685b      	ldr	r3, [r3, #4]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d02a      	beq.n	800a006 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	b2db      	uxtb	r3, r3
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f7fe ffc4 	bl	8008f46 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009fbe:	4b1d      	ldr	r3, [pc, #116]	; (800a034 <USBD_SetConfig+0x150>)
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fc8:	4b1a      	ldr	r3, [pc, #104]	; (800a034 <USBD_SetConfig+0x150>)
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	4619      	mov	r1, r3
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7fe ff9d 	bl	8008f0e <USBD_SetClassConfig>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009fd8:	7bfb      	ldrb	r3, [r7, #15]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00f      	beq.n	8009ffe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009fde:	6839      	ldr	r1, [r7, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 f918 	bl	800a216 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	b2db      	uxtb	r3, r3
 8009fec:	4619      	mov	r1, r3
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f7fe ffa9 	bl	8008f46 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009ffc:	e014      	b.n	800a028 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f9d4 	bl	800a3ac <USBD_CtlSendStatus>
      break;
 800a004:	e010      	b.n	800a028 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f9d0 	bl	800a3ac <USBD_CtlSendStatus>
      break;
 800a00c:	e00c      	b.n	800a028 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a00e:	6839      	ldr	r1, [r7, #0]
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f900 	bl	800a216 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a016:	4b07      	ldr	r3, [pc, #28]	; (800a034 <USBD_SetConfig+0x150>)
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	4619      	mov	r1, r3
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f7fe ff92 	bl	8008f46 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a022:	2303      	movs	r3, #3
 800a024:	73fb      	strb	r3, [r7, #15]
      break;
 800a026:	bf00      	nop
  }

  return ret;
 800a028:	7bfb      	ldrb	r3, [r7, #15]
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}
 800a032:	bf00      	nop
 800a034:	20000430 	.word	0x20000430

0800a038 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
 800a040:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	88db      	ldrh	r3, [r3, #6]
 800a046:	2b01      	cmp	r3, #1
 800a048:	d004      	beq.n	800a054 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a04a:	6839      	ldr	r1, [r7, #0]
 800a04c:	6878      	ldr	r0, [r7, #4]
 800a04e:	f000 f8e2 	bl	800a216 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a052:	e023      	b.n	800a09c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a05a:	b2db      	uxtb	r3, r3
 800a05c:	2b02      	cmp	r3, #2
 800a05e:	dc02      	bgt.n	800a066 <USBD_GetConfig+0x2e>
 800a060:	2b00      	cmp	r3, #0
 800a062:	dc03      	bgt.n	800a06c <USBD_GetConfig+0x34>
 800a064:	e015      	b.n	800a092 <USBD_GetConfig+0x5a>
 800a066:	2b03      	cmp	r3, #3
 800a068:	d00b      	beq.n	800a082 <USBD_GetConfig+0x4a>
 800a06a:	e012      	b.n	800a092 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2200      	movs	r2, #0
 800a070:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	3308      	adds	r3, #8
 800a076:	2201      	movs	r2, #1
 800a078:	4619      	mov	r1, r3
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f93c 	bl	800a2f8 <USBD_CtlSendData>
        break;
 800a080:	e00c      	b.n	800a09c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	3304      	adds	r3, #4
 800a086:	2201      	movs	r2, #1
 800a088:	4619      	mov	r1, r3
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f934 	bl	800a2f8 <USBD_CtlSendData>
        break;
 800a090:	e004      	b.n	800a09c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a092:	6839      	ldr	r1, [r7, #0]
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 f8be 	bl	800a216 <USBD_CtlError>
        break;
 800a09a:	bf00      	nop
}
 800a09c:	bf00      	nop
 800a09e:	3708      	adds	r7, #8
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0b4:	b2db      	uxtb	r3, r3
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	2b02      	cmp	r3, #2
 800a0ba:	d81e      	bhi.n	800a0fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a0bc:	683b      	ldr	r3, [r7, #0]
 800a0be:	88db      	ldrh	r3, [r3, #6]
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d004      	beq.n	800a0ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 f8a5 	bl	800a216 <USBD_CtlError>
        break;
 800a0cc:	e01a      	b.n	800a104 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d005      	beq.n	800a0ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	f043 0202 	orr.w	r2, r3, #2
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	330c      	adds	r3, #12
 800a0ee:	2202      	movs	r2, #2
 800a0f0:	4619      	mov	r1, r3
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f000 f900 	bl	800a2f8 <USBD_CtlSendData>
      break;
 800a0f8:	e004      	b.n	800a104 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a0fa:	6839      	ldr	r1, [r7, #0]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f88a 	bl	800a216 <USBD_CtlError>
      break;
 800a102:	bf00      	nop
  }
}
 800a104:	bf00      	nop
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	885b      	ldrh	r3, [r3, #2]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d107      	bne.n	800a12e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f940 	bl	800a3ac <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a12c:	e013      	b.n	800a156 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	885b      	ldrh	r3, [r3, #2]
 800a132:	2b02      	cmp	r3, #2
 800a134:	d10b      	bne.n	800a14e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	889b      	ldrh	r3, [r3, #4]
 800a13a:	0a1b      	lsrs	r3, r3, #8
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	b2da      	uxtb	r2, r3
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f930 	bl	800a3ac <USBD_CtlSendStatus>
}
 800a14c:	e003      	b.n	800a156 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a14e:	6839      	ldr	r1, [r7, #0]
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 f860 	bl	800a216 <USBD_CtlError>
}
 800a156:	bf00      	nop
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b082      	sub	sp, #8
 800a162:	af00      	add	r7, sp, #0
 800a164:	6078      	str	r0, [r7, #4]
 800a166:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a16e:	b2db      	uxtb	r3, r3
 800a170:	3b01      	subs	r3, #1
 800a172:	2b02      	cmp	r3, #2
 800a174:	d80b      	bhi.n	800a18e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	885b      	ldrh	r3, [r3, #2]
 800a17a:	2b01      	cmp	r3, #1
 800a17c:	d10c      	bne.n	800a198 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2200      	movs	r2, #0
 800a182:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f000 f910 	bl	800a3ac <USBD_CtlSendStatus>
      }
      break;
 800a18c:	e004      	b.n	800a198 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a18e:	6839      	ldr	r1, [r7, #0]
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f840 	bl	800a216 <USBD_CtlError>
      break;
 800a196:	e000      	b.n	800a19a <USBD_ClrFeature+0x3c>
      break;
 800a198:	bf00      	nop
  }
}
 800a19a:	bf00      	nop
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}

0800a1a2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a1a2:	b580      	push	{r7, lr}
 800a1a4:	b084      	sub	sp, #16
 800a1a6:	af00      	add	r7, sp, #0
 800a1a8:	6078      	str	r0, [r7, #4]
 800a1aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	781a      	ldrb	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	3301      	adds	r3, #1
 800a1bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	781a      	ldrb	r2, [r3, #0]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a1cc:	68f8      	ldr	r0, [r7, #12]
 800a1ce:	f7ff fa41 	bl	8009654 <SWAPBYTE>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	3301      	adds	r3, #1
 800a1e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f7ff fa34 	bl	8009654 <SWAPBYTE>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3301      	adds	r3, #1
 800a1fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f7ff fa27 	bl	8009654 <SWAPBYTE>
 800a206:	4603      	mov	r3, r0
 800a208:	461a      	mov	r2, r3
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	80da      	strh	r2, [r3, #6]
}
 800a20e:	bf00      	nop
 800a210:	3710      	adds	r7, #16
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}

0800a216 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a216:	b580      	push	{r7, lr}
 800a218:	b082      	sub	sp, #8
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
 800a21e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a220:	2180      	movs	r1, #128	; 0x80
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f003 fcce 	bl	800dbc4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a228:	2100      	movs	r1, #0
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f003 fcca 	bl	800dbc4 <USBD_LL_StallEP>
}
 800a230:	bf00      	nop
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	60f8      	str	r0, [r7, #12]
 800a240:	60b9      	str	r1, [r7, #8]
 800a242:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a244:	2300      	movs	r3, #0
 800a246:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d036      	beq.n	800a2bc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a252:	6938      	ldr	r0, [r7, #16]
 800a254:	f000 f836 	bl	800a2c4 <USBD_GetLen>
 800a258:	4603      	mov	r3, r0
 800a25a:	3301      	adds	r3, #1
 800a25c:	b29b      	uxth	r3, r3
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	b29a      	uxth	r2, r3
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a266:	7dfb      	ldrb	r3, [r7, #23]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	4413      	add	r3, r2
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	7812      	ldrb	r2, [r2, #0]
 800a270:	701a      	strb	r2, [r3, #0]
  idx++;
 800a272:	7dfb      	ldrb	r3, [r7, #23]
 800a274:	3301      	adds	r3, #1
 800a276:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a278:	7dfb      	ldrb	r3, [r7, #23]
 800a27a:	68ba      	ldr	r2, [r7, #8]
 800a27c:	4413      	add	r3, r2
 800a27e:	2203      	movs	r2, #3
 800a280:	701a      	strb	r2, [r3, #0]
  idx++;
 800a282:	7dfb      	ldrb	r3, [r7, #23]
 800a284:	3301      	adds	r3, #1
 800a286:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a288:	e013      	b.n	800a2b2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a28a:	7dfb      	ldrb	r3, [r7, #23]
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	4413      	add	r3, r2
 800a290:	693a      	ldr	r2, [r7, #16]
 800a292:	7812      	ldrb	r2, [r2, #0]
 800a294:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	3301      	adds	r3, #1
 800a29a:	613b      	str	r3, [r7, #16]
    idx++;
 800a29c:	7dfb      	ldrb	r3, [r7, #23]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a2a2:	7dfb      	ldrb	r3, [r7, #23]
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	4413      	add	r3, r2
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	701a      	strb	r2, [r3, #0]
    idx++;
 800a2ac:	7dfb      	ldrb	r3, [r7, #23]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	781b      	ldrb	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1e7      	bne.n	800a28a <USBD_GetString+0x52>
 800a2ba:	e000      	b.n	800a2be <USBD_GetString+0x86>
    return;
 800a2bc:	bf00      	nop
  }
}
 800a2be:	3718      	adds	r7, #24
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}

0800a2c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a2d4:	e005      	b.n	800a2e2 <USBD_GetLen+0x1e>
  {
    len++;
 800a2d6:	7bfb      	ldrb	r3, [r7, #15]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1f5      	bne.n	800a2d6 <USBD_GetLen+0x12>
  }

  return len;
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3714      	adds	r7, #20
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2202      	movs	r2, #2
 800a308:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	687a      	ldr	r2, [r7, #4]
 800a310:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	2100      	movs	r1, #0
 800a31e:	68f8      	ldr	r0, [r7, #12]
 800a320:	f003 fcd9 	bl	800dcd6 <USBD_LL_Transmit>

  return USBD_OK;
 800a324:	2300      	movs	r3, #0
}
 800a326:	4618      	mov	r0, r3
 800a328:	3710      	adds	r7, #16
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b084      	sub	sp, #16
 800a332:	af00      	add	r7, sp, #0
 800a334:	60f8      	str	r0, [r7, #12]
 800a336:	60b9      	str	r1, [r7, #8]
 800a338:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	68ba      	ldr	r2, [r7, #8]
 800a33e:	2100      	movs	r1, #0
 800a340:	68f8      	ldr	r0, [r7, #12]
 800a342:	f003 fcc8 	bl	800dcd6 <USBD_LL_Transmit>

  return USBD_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	60f8      	str	r0, [r7, #12]
 800a358:	60b9      	str	r1, [r7, #8]
 800a35a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2203      	movs	r2, #3
 800a360:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	68ba      	ldr	r2, [r7, #8]
 800a378:	2100      	movs	r1, #0
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f003 fccc 	bl	800dd18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3710      	adds	r7, #16
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}

0800a38a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b084      	sub	sp, #16
 800a38e:	af00      	add	r7, sp, #0
 800a390:	60f8      	str	r0, [r7, #12]
 800a392:	60b9      	str	r1, [r7, #8]
 800a394:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	68ba      	ldr	r2, [r7, #8]
 800a39a:	2100      	movs	r1, #0
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f003 fcbb 	bl	800dd18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b082      	sub	sp, #8
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2204      	movs	r2, #4
 800a3b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a3bc:	2300      	movs	r3, #0
 800a3be:	2200      	movs	r2, #0
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f003 fc87 	bl	800dcd6 <USBD_LL_Transmit>

  return USBD_OK;
 800a3c8:	2300      	movs	r3, #0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}

0800a3d2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a3d2:	b580      	push	{r7, lr}
 800a3d4:	b082      	sub	sp, #8
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2205      	movs	r2, #5
 800a3de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	2100      	movs	r1, #0
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f003 fc95 	bl	800dd18 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3ee:	2300      	movs	r3, #0
}
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}

0800a3f8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b087      	sub	sp, #28
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	4613      	mov	r3, r2
 800a404:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800a406:	2301      	movs	r3, #1
 800a408:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800a40e:	4b1f      	ldr	r3, [pc, #124]	; (800a48c <FATFS_LinkDriverEx+0x94>)
 800a410:	7a5b      	ldrb	r3, [r3, #9]
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b00      	cmp	r3, #0
 800a416:	d131      	bne.n	800a47c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800a418:	4b1c      	ldr	r3, [pc, #112]	; (800a48c <FATFS_LinkDriverEx+0x94>)
 800a41a:	7a5b      	ldrb	r3, [r3, #9]
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	461a      	mov	r2, r3
 800a420:	4b1a      	ldr	r3, [pc, #104]	; (800a48c <FATFS_LinkDriverEx+0x94>)
 800a422:	2100      	movs	r1, #0
 800a424:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800a426:	4b19      	ldr	r3, [pc, #100]	; (800a48c <FATFS_LinkDriverEx+0x94>)
 800a428:	7a5b      	ldrb	r3, [r3, #9]
 800a42a:	b2db      	uxtb	r3, r3
 800a42c:	4a17      	ldr	r2, [pc, #92]	; (800a48c <FATFS_LinkDriverEx+0x94>)
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	4413      	add	r3, r2
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800a436:	4b15      	ldr	r3, [pc, #84]	; (800a48c <FATFS_LinkDriverEx+0x94>)
 800a438:	7a5b      	ldrb	r3, [r3, #9]
 800a43a:	b2db      	uxtb	r3, r3
 800a43c:	461a      	mov	r2, r3
 800a43e:	4b13      	ldr	r3, [pc, #76]	; (800a48c <FATFS_LinkDriverEx+0x94>)
 800a440:	4413      	add	r3, r2
 800a442:	79fa      	ldrb	r2, [r7, #7]
 800a444:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800a446:	4b11      	ldr	r3, [pc, #68]	; (800a48c <FATFS_LinkDriverEx+0x94>)
 800a448:	7a5b      	ldrb	r3, [r3, #9]
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	1c5a      	adds	r2, r3, #1
 800a44e:	b2d1      	uxtb	r1, r2
 800a450:	4a0e      	ldr	r2, [pc, #56]	; (800a48c <FATFS_LinkDriverEx+0x94>)
 800a452:	7251      	strb	r1, [r2, #9]
 800a454:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800a456:	7dbb      	ldrb	r3, [r7, #22]
 800a458:	3330      	adds	r3, #48	; 0x30
 800a45a:	b2da      	uxtb	r2, r3
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	3301      	adds	r3, #1
 800a464:	223a      	movs	r2, #58	; 0x3a
 800a466:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	3302      	adds	r3, #2
 800a46c:	222f      	movs	r2, #47	; 0x2f
 800a46e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	3303      	adds	r3, #3
 800a474:	2200      	movs	r2, #0
 800a476:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800a478:	2300      	movs	r3, #0
 800a47a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800a47c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	371c      	adds	r7, #28
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	20000434 	.word	0x20000434

0800a490 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b082      	sub	sp, #8
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800a49a:	2200      	movs	r2, #0
 800a49c:	6839      	ldr	r1, [r7, #0]
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f7ff ffaa 	bl	800a3f8 <FATFS_LinkDriverEx>
 800a4a4:	4603      	mov	r3, r0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3708      	adds	r7, #8
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
	...

0800a4b0 <__NVIC_SetPriority>:
{
 800a4b0:	b480      	push	{r7}
 800a4b2:	b083      	sub	sp, #12
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	6039      	str	r1, [r7, #0]
 800a4ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	db0a      	blt.n	800a4da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	b2da      	uxtb	r2, r3
 800a4c8:	490c      	ldr	r1, [pc, #48]	; (800a4fc <__NVIC_SetPriority+0x4c>)
 800a4ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4ce:	0112      	lsls	r2, r2, #4
 800a4d0:	b2d2      	uxtb	r2, r2
 800a4d2:	440b      	add	r3, r1
 800a4d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a4d8:	e00a      	b.n	800a4f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	b2da      	uxtb	r2, r3
 800a4de:	4908      	ldr	r1, [pc, #32]	; (800a500 <__NVIC_SetPriority+0x50>)
 800a4e0:	79fb      	ldrb	r3, [r7, #7]
 800a4e2:	f003 030f 	and.w	r3, r3, #15
 800a4e6:	3b04      	subs	r3, #4
 800a4e8:	0112      	lsls	r2, r2, #4
 800a4ea:	b2d2      	uxtb	r2, r2
 800a4ec:	440b      	add	r3, r1
 800a4ee:	761a      	strb	r2, [r3, #24]
}
 800a4f0:	bf00      	nop
 800a4f2:	370c      	adds	r7, #12
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr
 800a4fc:	e000e100 	.word	0xe000e100
 800a500:	e000ed00 	.word	0xe000ed00

0800a504 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a504:	b580      	push	{r7, lr}
 800a506:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a508:	2100      	movs	r1, #0
 800a50a:	f06f 0004 	mvn.w	r0, #4
 800a50e:	f7ff ffcf 	bl	800a4b0 <__NVIC_SetPriority>
#endif
}
 800a512:	bf00      	nop
 800a514:	bd80      	pop	{r7, pc}
	...

0800a518 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a518:	b480      	push	{r7}
 800a51a:	b083      	sub	sp, #12
 800a51c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a51e:	f3ef 8305 	mrs	r3, IPSR
 800a522:	603b      	str	r3, [r7, #0]
  return(result);
 800a524:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a526:	2b00      	cmp	r3, #0
 800a528:	d003      	beq.n	800a532 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a52a:	f06f 0305 	mvn.w	r3, #5
 800a52e:	607b      	str	r3, [r7, #4]
 800a530:	e00c      	b.n	800a54c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a532:	4b0a      	ldr	r3, [pc, #40]	; (800a55c <osKernelInitialize+0x44>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d105      	bne.n	800a546 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a53a:	4b08      	ldr	r3, [pc, #32]	; (800a55c <osKernelInitialize+0x44>)
 800a53c:	2201      	movs	r2, #1
 800a53e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a540:	2300      	movs	r3, #0
 800a542:	607b      	str	r3, [r7, #4]
 800a544:	e002      	b.n	800a54c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a546:	f04f 33ff 	mov.w	r3, #4294967295
 800a54a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a54c:	687b      	ldr	r3, [r7, #4]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	370c      	adds	r7, #12
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	20000440 	.word	0x20000440

0800a560 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800a566:	f001 fef5 	bl	800c354 <xTaskGetSchedulerState>
 800a56a:	4603      	mov	r3, r0
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d004      	beq.n	800a57a <osKernelGetState+0x1a>
 800a570:	2b02      	cmp	r3, #2
 800a572:	d105      	bne.n	800a580 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800a574:	2302      	movs	r3, #2
 800a576:	607b      	str	r3, [r7, #4]
      break;
 800a578:	e00c      	b.n	800a594 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800a57a:	2303      	movs	r3, #3
 800a57c:	607b      	str	r3, [r7, #4]
      break;
 800a57e:	e009      	b.n	800a594 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800a580:	4b07      	ldr	r3, [pc, #28]	; (800a5a0 <osKernelGetState+0x40>)
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	2b01      	cmp	r3, #1
 800a586:	d102      	bne.n	800a58e <osKernelGetState+0x2e>
        state = osKernelReady;
 800a588:	2301      	movs	r3, #1
 800a58a:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800a58c:	e001      	b.n	800a592 <osKernelGetState+0x32>
        state = osKernelInactive;
 800a58e:	2300      	movs	r3, #0
 800a590:	607b      	str	r3, [r7, #4]
      break;
 800a592:	bf00      	nop
  }

  return (state);
 800a594:	687b      	ldr	r3, [r7, #4]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}
 800a59e:	bf00      	nop
 800a5a0:	20000440 	.word	0x20000440

0800a5a4 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5aa:	f3ef 8305 	mrs	r3, IPSR
 800a5ae:	603b      	str	r3, [r7, #0]
  return(result);
 800a5b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d003      	beq.n	800a5be <osKernelStart+0x1a>
    stat = osErrorISR;
 800a5b6:	f06f 0305 	mvn.w	r3, #5
 800a5ba:	607b      	str	r3, [r7, #4]
 800a5bc:	e010      	b.n	800a5e0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a5be:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <osKernelStart+0x48>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d109      	bne.n	800a5da <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a5c6:	f7ff ff9d 	bl	800a504 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a5ca:	4b08      	ldr	r3, [pc, #32]	; (800a5ec <osKernelStart+0x48>)
 800a5cc:	2202      	movs	r2, #2
 800a5ce:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a5d0:	f001 fa66 	bl	800baa0 <vTaskStartScheduler>
      stat = osOK;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	607b      	str	r3, [r7, #4]
 800a5d8:	e002      	b.n	800a5e0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a5da:	f04f 33ff 	mov.w	r3, #4294967295
 800a5de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a5e0:	687b      	ldr	r3, [r7, #4]
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3708      	adds	r7, #8
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	20000440 	.word	0x20000440

0800a5f0 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a5f6:	f3ef 8305 	mrs	r3, IPSR
 800a5fa:	603b      	str	r3, [r7, #0]
  return(result);
 800a5fc:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d003      	beq.n	800a60a <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a602:	f001 fb6f 	bl	800bce4 <xTaskGetTickCountFromISR>
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	e002      	b.n	800a610 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a60a:	f001 fb5b 	bl	800bcc4 <xTaskGetTickCount>
 800a60e:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a610:	687b      	ldr	r3, [r7, #4]
}
 800a612:	4618      	mov	r0, r3
 800a614:	3708      	adds	r7, #8
 800a616:	46bd      	mov	sp, r7
 800a618:	bd80      	pop	{r7, pc}

0800a61a <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a61a:	b580      	push	{r7, lr}
 800a61c:	b08e      	sub	sp, #56	; 0x38
 800a61e:	af04      	add	r7, sp, #16
 800a620:	60f8      	str	r0, [r7, #12]
 800a622:	60b9      	str	r1, [r7, #8]
 800a624:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a626:	2300      	movs	r3, #0
 800a628:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a62a:	f3ef 8305 	mrs	r3, IPSR
 800a62e:	617b      	str	r3, [r7, #20]
  return(result);
 800a630:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a632:	2b00      	cmp	r3, #0
 800a634:	d17e      	bne.n	800a734 <osThreadNew+0x11a>
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d07b      	beq.n	800a734 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a63c:	2380      	movs	r3, #128	; 0x80
 800a63e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a640:	2318      	movs	r3, #24
 800a642:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a644:	2300      	movs	r3, #0
 800a646:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a648:	f04f 33ff 	mov.w	r3, #4294967295
 800a64c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d045      	beq.n	800a6e0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <osThreadNew+0x48>
        name = attr->name;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	699b      	ldr	r3, [r3, #24]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d002      	beq.n	800a670 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	699b      	ldr	r3, [r3, #24]
 800a66e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d008      	beq.n	800a688 <osThreadNew+0x6e>
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	2b38      	cmp	r3, #56	; 0x38
 800a67a:	d805      	bhi.n	800a688 <osThreadNew+0x6e>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	f003 0301 	and.w	r3, r3, #1
 800a684:	2b00      	cmp	r3, #0
 800a686:	d001      	beq.n	800a68c <osThreadNew+0x72>
        return (NULL);
 800a688:	2300      	movs	r3, #0
 800a68a:	e054      	b.n	800a736 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	695b      	ldr	r3, [r3, #20]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d003      	beq.n	800a69c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	695b      	ldr	r3, [r3, #20]
 800a698:	089b      	lsrs	r3, r3, #2
 800a69a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	689b      	ldr	r3, [r3, #8]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00e      	beq.n	800a6c2 <osThreadNew+0xa8>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	2b5b      	cmp	r3, #91	; 0x5b
 800a6aa:	d90a      	bls.n	800a6c2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d006      	beq.n	800a6c2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	695b      	ldr	r3, [r3, #20]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <osThreadNew+0xa8>
        mem = 1;
 800a6bc:	2301      	movs	r3, #1
 800a6be:	61bb      	str	r3, [r7, #24]
 800a6c0:	e010      	b.n	800a6e4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	689b      	ldr	r3, [r3, #8]
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10c      	bne.n	800a6e4 <osThreadNew+0xca>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	68db      	ldr	r3, [r3, #12]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d108      	bne.n	800a6e4 <osThreadNew+0xca>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	691b      	ldr	r3, [r3, #16]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d104      	bne.n	800a6e4 <osThreadNew+0xca>
          mem = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	61bb      	str	r3, [r7, #24]
 800a6de:	e001      	b.n	800a6e4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a6e4:	69bb      	ldr	r3, [r7, #24]
 800a6e6:	2b01      	cmp	r3, #1
 800a6e8:	d110      	bne.n	800a70c <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a6f2:	9202      	str	r2, [sp, #8]
 800a6f4:	9301      	str	r3, [sp, #4]
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	6a3a      	ldr	r2, [r7, #32]
 800a6fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f000 fff7 	bl	800b6f4 <xTaskCreateStatic>
 800a706:	4603      	mov	r3, r0
 800a708:	613b      	str	r3, [r7, #16]
 800a70a:	e013      	b.n	800a734 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d110      	bne.n	800a734 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a712:	6a3b      	ldr	r3, [r7, #32]
 800a714:	b29a      	uxth	r2, r3
 800a716:	f107 0310 	add.w	r3, r7, #16
 800a71a:	9301      	str	r3, [sp, #4]
 800a71c:	69fb      	ldr	r3, [r7, #28]
 800a71e:	9300      	str	r3, [sp, #0]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f001 f842 	bl	800b7ae <xTaskCreate>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d001      	beq.n	800a734 <osThreadNew+0x11a>
            hTask = NULL;
 800a730:	2300      	movs	r3, #0
 800a732:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a734:	693b      	ldr	r3, [r7, #16]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3728      	adds	r7, #40	; 0x28
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a746:	f3ef 8305 	mrs	r3, IPSR
 800a74a:	60bb      	str	r3, [r7, #8]
  return(result);
 800a74c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d003      	beq.n	800a75a <osDelay+0x1c>
    stat = osErrorISR;
 800a752:	f06f 0305 	mvn.w	r3, #5
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	e007      	b.n	800a76a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a75a:	2300      	movs	r3, #0
 800a75c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d002      	beq.n	800a76a <osDelay+0x2c>
      vTaskDelay(ticks);
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f001 f967 	bl	800ba38 <vTaskDelay>
    }
  }

  return (stat);
 800a76a:	68fb      	ldr	r3, [r7, #12]
}
 800a76c:	4618      	mov	r0, r3
 800a76e:	3710      	adds	r7, #16
 800a770:	46bd      	mov	sp, r7
 800a772:	bd80      	pop	{r7, pc}

0800a774 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a774:	b580      	push	{r7, lr}
 800a776:	b08a      	sub	sp, #40	; 0x28
 800a778:	af02      	add	r7, sp, #8
 800a77a:	60f8      	str	r0, [r7, #12]
 800a77c:	60b9      	str	r1, [r7, #8]
 800a77e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a780:	2300      	movs	r3, #0
 800a782:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a784:	f3ef 8305 	mrs	r3, IPSR
 800a788:	613b      	str	r3, [r7, #16]
  return(result);
 800a78a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d15f      	bne.n	800a850 <osMessageQueueNew+0xdc>
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d05c      	beq.n	800a850 <osMessageQueueNew+0xdc>
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d059      	beq.n	800a850 <osMessageQueueNew+0xdc>
    mem = -1;
 800a79c:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d029      	beq.n	800a7fc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d012      	beq.n	800a7d6 <osMessageQueueNew+0x62>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	2b4f      	cmp	r3, #79	; 0x4f
 800a7b6:	d90e      	bls.n	800a7d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d00a      	beq.n	800a7d6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	695a      	ldr	r2, [r3, #20]
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	68b9      	ldr	r1, [r7, #8]
 800a7c8:	fb01 f303 	mul.w	r3, r1, r3
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d302      	bcc.n	800a7d6 <osMessageQueueNew+0x62>
        mem = 1;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	61bb      	str	r3, [r7, #24]
 800a7d4:	e014      	b.n	800a800 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d110      	bne.n	800a800 <osMessageQueueNew+0x8c>
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	68db      	ldr	r3, [r3, #12]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10c      	bne.n	800a800 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d108      	bne.n	800a800 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	695b      	ldr	r3, [r3, #20]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d104      	bne.n	800a800 <osMessageQueueNew+0x8c>
          mem = 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	61bb      	str	r3, [r7, #24]
 800a7fa:	e001      	b.n	800a800 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	2b01      	cmp	r3, #1
 800a804:	d10b      	bne.n	800a81e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	691a      	ldr	r2, [r3, #16]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	689b      	ldr	r3, [r3, #8]
 800a80e:	2100      	movs	r1, #0
 800a810:	9100      	str	r1, [sp, #0]
 800a812:	68b9      	ldr	r1, [r7, #8]
 800a814:	68f8      	ldr	r0, [r7, #12]
 800a816:	f000 fa2f 	bl	800ac78 <xQueueGenericCreateStatic>
 800a81a:	61f8      	str	r0, [r7, #28]
 800a81c:	e008      	b.n	800a830 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a81e:	69bb      	ldr	r3, [r7, #24]
 800a820:	2b00      	cmp	r3, #0
 800a822:	d105      	bne.n	800a830 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a824:	2200      	movs	r2, #0
 800a826:	68b9      	ldr	r1, [r7, #8]
 800a828:	68f8      	ldr	r0, [r7, #12]
 800a82a:	f000 fa9d 	bl	800ad68 <xQueueGenericCreate>
 800a82e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a830:	69fb      	ldr	r3, [r7, #28]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00c      	beq.n	800a850 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d003      	beq.n	800a844 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	617b      	str	r3, [r7, #20]
 800a842:	e001      	b.n	800a848 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a844:	2300      	movs	r3, #0
 800a846:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a848:	6979      	ldr	r1, [r7, #20]
 800a84a:	69f8      	ldr	r0, [r7, #28]
 800a84c:	f000 fef4 	bl	800b638 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a850:	69fb      	ldr	r3, [r7, #28]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3720      	adds	r7, #32
 800a856:	46bd      	mov	sp, r7
 800a858:	bd80      	pop	{r7, pc}
	...

0800a85c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b088      	sub	sp, #32
 800a860:	af00      	add	r7, sp, #0
 800a862:	60f8      	str	r0, [r7, #12]
 800a864:	60b9      	str	r1, [r7, #8]
 800a866:	603b      	str	r3, [r7, #0]
 800a868:	4613      	mov	r3, r2
 800a86a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a870:	2300      	movs	r3, #0
 800a872:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a874:	f3ef 8305 	mrs	r3, IPSR
 800a878:	617b      	str	r3, [r7, #20]
  return(result);
 800a87a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d028      	beq.n	800a8d2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a880:	69bb      	ldr	r3, [r7, #24]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d005      	beq.n	800a892 <osMessageQueuePut+0x36>
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d002      	beq.n	800a892 <osMessageQueuePut+0x36>
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d003      	beq.n	800a89a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a892:	f06f 0303 	mvn.w	r3, #3
 800a896:	61fb      	str	r3, [r7, #28]
 800a898:	e038      	b.n	800a90c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a89a:	2300      	movs	r3, #0
 800a89c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a89e:	f107 0210 	add.w	r2, r7, #16
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	68b9      	ldr	r1, [r7, #8]
 800a8a6:	69b8      	ldr	r0, [r7, #24]
 800a8a8:	f000 fbba 	bl	800b020 <xQueueGenericSendFromISR>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	d003      	beq.n	800a8ba <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a8b2:	f06f 0302 	mvn.w	r3, #2
 800a8b6:	61fb      	str	r3, [r7, #28]
 800a8b8:	e028      	b.n	800a90c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d025      	beq.n	800a90c <osMessageQueuePut+0xb0>
 800a8c0:	4b15      	ldr	r3, [pc, #84]	; (800a918 <osMessageQueuePut+0xbc>)
 800a8c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8c6:	601a      	str	r2, [r3, #0]
 800a8c8:	f3bf 8f4f 	dsb	sy
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	e01c      	b.n	800a90c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <osMessageQueuePut+0x82>
 800a8d8:	68bb      	ldr	r3, [r7, #8]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d103      	bne.n	800a8e6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a8de:	f06f 0303 	mvn.w	r3, #3
 800a8e2:	61fb      	str	r3, [r7, #28]
 800a8e4:	e012      	b.n	800a90c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	683a      	ldr	r2, [r7, #0]
 800a8ea:	68b9      	ldr	r1, [r7, #8]
 800a8ec:	69b8      	ldr	r0, [r7, #24]
 800a8ee:	f000 fa99 	bl	800ae24 <xQueueGenericSend>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b01      	cmp	r3, #1
 800a8f6:	d009      	beq.n	800a90c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d003      	beq.n	800a906 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a8fe:	f06f 0301 	mvn.w	r3, #1
 800a902:	61fb      	str	r3, [r7, #28]
 800a904:	e002      	b.n	800a90c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a906:	f06f 0302 	mvn.w	r3, #2
 800a90a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a90c:	69fb      	ldr	r3, [r7, #28]
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3720      	adds	r7, #32
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	e000ed04 	.word	0xe000ed04

0800a91c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b088      	sub	sp, #32
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	60b9      	str	r1, [r7, #8]
 800a926:	607a      	str	r2, [r7, #4]
 800a928:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a92e:	2300      	movs	r3, #0
 800a930:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a932:	f3ef 8305 	mrs	r3, IPSR
 800a936:	617b      	str	r3, [r7, #20]
  return(result);
 800a938:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d028      	beq.n	800a990 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a93e:	69bb      	ldr	r3, [r7, #24]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d005      	beq.n	800a950 <osMessageQueueGet+0x34>
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d002      	beq.n	800a950 <osMessageQueueGet+0x34>
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d003      	beq.n	800a958 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a950:	f06f 0303 	mvn.w	r3, #3
 800a954:	61fb      	str	r3, [r7, #28]
 800a956:	e037      	b.n	800a9c8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a958:	2300      	movs	r3, #0
 800a95a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a95c:	f107 0310 	add.w	r3, r7, #16
 800a960:	461a      	mov	r2, r3
 800a962:	68b9      	ldr	r1, [r7, #8]
 800a964:	69b8      	ldr	r0, [r7, #24]
 800a966:	f000 fcd7 	bl	800b318 <xQueueReceiveFromISR>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b01      	cmp	r3, #1
 800a96e:	d003      	beq.n	800a978 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a970:	f06f 0302 	mvn.w	r3, #2
 800a974:	61fb      	str	r3, [r7, #28]
 800a976:	e027      	b.n	800a9c8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a978:	693b      	ldr	r3, [r7, #16]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d024      	beq.n	800a9c8 <osMessageQueueGet+0xac>
 800a97e:	4b15      	ldr	r3, [pc, #84]	; (800a9d4 <osMessageQueueGet+0xb8>)
 800a980:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a984:	601a      	str	r2, [r3, #0]
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	e01b      	b.n	800a9c8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d002      	beq.n	800a99c <osMessageQueueGet+0x80>
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d103      	bne.n	800a9a4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a99c:	f06f 0303 	mvn.w	r3, #3
 800a9a0:	61fb      	str	r3, [r7, #28]
 800a9a2:	e011      	b.n	800a9c8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	68b9      	ldr	r1, [r7, #8]
 800a9a8:	69b8      	ldr	r0, [r7, #24]
 800a9aa:	f000 fbd5 	bl	800b158 <xQueueReceive>
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d009      	beq.n	800a9c8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d003      	beq.n	800a9c2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a9ba:	f06f 0301 	mvn.w	r3, #1
 800a9be:	61fb      	str	r3, [r7, #28]
 800a9c0:	e002      	b.n	800a9c8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a9c2:	f06f 0302 	mvn.w	r3, #2
 800a9c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a9c8:	69fb      	ldr	r3, [r7, #28]
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3720      	adds	r7, #32
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	e000ed04 	.word	0xe000ed04

0800a9d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a9d8:	b480      	push	{r7}
 800a9da:	b085      	sub	sp, #20
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4a07      	ldr	r2, [pc, #28]	; (800aa04 <vApplicationGetIdleTaskMemory+0x2c>)
 800a9e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	4a06      	ldr	r2, [pc, #24]	; (800aa08 <vApplicationGetIdleTaskMemory+0x30>)
 800a9ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	2280      	movs	r2, #128	; 0x80
 800a9f4:	601a      	str	r2, [r3, #0]
}
 800a9f6:	bf00      	nop
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	20000444 	.word	0x20000444
 800aa08:	200004a0 	.word	0x200004a0

0800aa0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800aa0c:	b480      	push	{r7}
 800aa0e:	b085      	sub	sp, #20
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	60f8      	str	r0, [r7, #12]
 800aa14:	60b9      	str	r1, [r7, #8]
 800aa16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	4a07      	ldr	r2, [pc, #28]	; (800aa38 <vApplicationGetTimerTaskMemory+0x2c>)
 800aa1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	4a06      	ldr	r2, [pc, #24]	; (800aa3c <vApplicationGetTimerTaskMemory+0x30>)
 800aa22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aa2a:	601a      	str	r2, [r3, #0]
}
 800aa2c:	bf00      	nop
 800aa2e:	3714      	adds	r7, #20
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr
 800aa38:	200006a0 	.word	0x200006a0
 800aa3c:	200006fc 	.word	0x200006fc

0800aa40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	f103 0208 	add.w	r2, r3, #8
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f04f 32ff 	mov.w	r2, #4294967295
 800aa58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f103 0208 	add.w	r2, r3, #8
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f103 0208 	add.w	r2, r3, #8
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800aa8e:	bf00      	nop
 800aa90:	370c      	adds	r7, #12
 800aa92:	46bd      	mov	sp, r7
 800aa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa98:	4770      	bx	lr

0800aa9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa9a:	b480      	push	{r7}
 800aa9c:	b085      	sub	sp, #20
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
 800aaa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800aaaa:	683b      	ldr	r3, [r7, #0]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	689a      	ldr	r2, [r3, #8]
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	683a      	ldr	r2, [r7, #0]
 800aabe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	601a      	str	r2, [r3, #0]
}
 800aad6:	bf00      	nop
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr

0800aae2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aae2:	b480      	push	{r7}
 800aae4:	b085      	sub	sp, #20
 800aae6:	af00      	add	r7, sp, #0
 800aae8:	6078      	str	r0, [r7, #4]
 800aaea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaf8:	d103      	bne.n	800ab02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	60fb      	str	r3, [r7, #12]
 800ab00:	e00c      	b.n	800ab1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	3308      	adds	r3, #8
 800ab06:	60fb      	str	r3, [r7, #12]
 800ab08:	e002      	b.n	800ab10 <vListInsert+0x2e>
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	685b      	ldr	r3, [r3, #4]
 800ab0e:	60fb      	str	r3, [r7, #12]
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	68ba      	ldr	r2, [r7, #8]
 800ab18:	429a      	cmp	r2, r3
 800ab1a:	d2f6      	bcs.n	800ab0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	685a      	ldr	r2, [r3, #4]
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	683a      	ldr	r2, [r7, #0]
 800ab2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	601a      	str	r2, [r3, #0]
}
 800ab48:	bf00      	nop
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	691b      	ldr	r3, [r3, #16]
 800ab60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	687a      	ldr	r2, [r7, #4]
 800ab68:	6892      	ldr	r2, [r2, #8]
 800ab6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	6852      	ldr	r2, [r2, #4]
 800ab74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	685b      	ldr	r3, [r3, #4]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d103      	bne.n	800ab88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	689a      	ldr	r2, [r3, #8]
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	1e5a      	subs	r2, r3, #1
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d10a      	bne.n	800abd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800abbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc0:	f383 8811 	msr	BASEPRI, r3
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	f3bf 8f4f 	dsb	sy
 800abcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800abce:	bf00      	nop
 800abd0:	e7fe      	b.n	800abd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800abd2:	f002 f917 	bl	800ce04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681a      	ldr	r2, [r3, #0]
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abde:	68f9      	ldr	r1, [r7, #12]
 800abe0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800abe2:	fb01 f303 	mul.w	r3, r1, r3
 800abe6:	441a      	add	r2, r3
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681a      	ldr	r2, [r3, #0]
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	681a      	ldr	r2, [r3, #0]
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac02:	3b01      	subs	r3, #1
 800ac04:	68f9      	ldr	r1, [r7, #12]
 800ac06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ac08:	fb01 f303 	mul.w	r3, r1, r3
 800ac0c:	441a      	add	r2, r3
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	22ff      	movs	r2, #255	; 0xff
 800ac16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	22ff      	movs	r2, #255	; 0xff
 800ac1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d114      	bne.n	800ac52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d01a      	beq.n	800ac66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	3310      	adds	r3, #16
 800ac34:	4618      	mov	r0, r3
 800ac36:	f001 f9cf 	bl	800bfd8 <xTaskRemoveFromEventList>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d012      	beq.n	800ac66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ac40:	4b0c      	ldr	r3, [pc, #48]	; (800ac74 <xQueueGenericReset+0xcc>)
 800ac42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac46:	601a      	str	r2, [r3, #0]
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	f3bf 8f6f 	isb	sy
 800ac50:	e009      	b.n	800ac66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3310      	adds	r3, #16
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7ff fef2 	bl	800aa40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	3324      	adds	r3, #36	; 0x24
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7ff feed 	bl	800aa40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ac66:	f002 f8fd 	bl	800ce64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ac6a:	2301      	movs	r3, #1
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3710      	adds	r7, #16
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}
 800ac74:	e000ed04 	.word	0xe000ed04

0800ac78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b08e      	sub	sp, #56	; 0x38
 800ac7c:	af02      	add	r7, sp, #8
 800ac7e:	60f8      	str	r0, [r7, #12]
 800ac80:	60b9      	str	r1, [r7, #8]
 800ac82:	607a      	str	r2, [r7, #4]
 800ac84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10a      	bne.n	800aca2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800ac8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac90:	f383 8811 	msr	BASEPRI, r3
 800ac94:	f3bf 8f6f 	isb	sy
 800ac98:	f3bf 8f4f 	dsb	sy
 800ac9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ac9e:	bf00      	nop
 800aca0:	e7fe      	b.n	800aca0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10a      	bne.n	800acbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800acba:	bf00      	nop
 800acbc:	e7fe      	b.n	800acbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d002      	beq.n	800acca <xQueueGenericCreateStatic+0x52>
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d001      	beq.n	800acce <xQueueGenericCreateStatic+0x56>
 800acca:	2301      	movs	r3, #1
 800accc:	e000      	b.n	800acd0 <xQueueGenericCreateStatic+0x58>
 800acce:	2300      	movs	r3, #0
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d10a      	bne.n	800acea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	623b      	str	r3, [r7, #32]
}
 800ace6:	bf00      	nop
 800ace8:	e7fe      	b.n	800ace8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d102      	bne.n	800acf6 <xQueueGenericCreateStatic+0x7e>
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d101      	bne.n	800acfa <xQueueGenericCreateStatic+0x82>
 800acf6:	2301      	movs	r3, #1
 800acf8:	e000      	b.n	800acfc <xQueueGenericCreateStatic+0x84>
 800acfa:	2300      	movs	r3, #0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10a      	bne.n	800ad16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800ad00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad04:	f383 8811 	msr	BASEPRI, r3
 800ad08:	f3bf 8f6f 	isb	sy
 800ad0c:	f3bf 8f4f 	dsb	sy
 800ad10:	61fb      	str	r3, [r7, #28]
}
 800ad12:	bf00      	nop
 800ad14:	e7fe      	b.n	800ad14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ad16:	2350      	movs	r3, #80	; 0x50
 800ad18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	2b50      	cmp	r3, #80	; 0x50
 800ad1e:	d00a      	beq.n	800ad36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	61bb      	str	r3, [r7, #24]
}
 800ad32:	bf00      	nop
 800ad34:	e7fe      	b.n	800ad34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ad36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ad3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d00d      	beq.n	800ad5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ad42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ad4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ad4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad50:	9300      	str	r3, [sp, #0]
 800ad52:	4613      	mov	r3, r2
 800ad54:	687a      	ldr	r2, [r7, #4]
 800ad56:	68b9      	ldr	r1, [r7, #8]
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	f000 f83f 	bl	800addc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ad5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ad60:	4618      	mov	r0, r3
 800ad62:	3730      	adds	r7, #48	; 0x30
 800ad64:	46bd      	mov	sp, r7
 800ad66:	bd80      	pop	{r7, pc}

0800ad68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b08a      	sub	sp, #40	; 0x28
 800ad6c:	af02      	add	r7, sp, #8
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	4613      	mov	r3, r2
 800ad74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d10a      	bne.n	800ad92 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ad7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad80:	f383 8811 	msr	BASEPRI, r3
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	613b      	str	r3, [r7, #16]
}
 800ad8e:	bf00      	nop
 800ad90:	e7fe      	b.n	800ad90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	68ba      	ldr	r2, [r7, #8]
 800ad96:	fb02 f303 	mul.w	r3, r2, r3
 800ad9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	3350      	adds	r3, #80	; 0x50
 800ada0:	4618      	mov	r0, r3
 800ada2:	f002 f951 	bl	800d048 <pvPortMalloc>
 800ada6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d011      	beq.n	800add2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	3350      	adds	r3, #80	; 0x50
 800adb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800adc0:	79fa      	ldrb	r2, [r7, #7]
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	9300      	str	r3, [sp, #0]
 800adc6:	4613      	mov	r3, r2
 800adc8:	697a      	ldr	r2, [r7, #20]
 800adca:	68b9      	ldr	r1, [r7, #8]
 800adcc:	68f8      	ldr	r0, [r7, #12]
 800adce:	f000 f805 	bl	800addc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800add2:	69bb      	ldr	r3, [r7, #24]
	}
 800add4:	4618      	mov	r0, r3
 800add6:	3720      	adds	r7, #32
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
 800ade8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d103      	bne.n	800adf8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800adf0:	69bb      	ldr	r3, [r7, #24]
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	601a      	str	r2, [r3, #0]
 800adf6:	e002      	b.n	800adfe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	687a      	ldr	r2, [r7, #4]
 800adfc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	68fa      	ldr	r2, [r7, #12]
 800ae02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	68ba      	ldr	r2, [r7, #8]
 800ae08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ae0a:	2101      	movs	r1, #1
 800ae0c:	69b8      	ldr	r0, [r7, #24]
 800ae0e:	f7ff fecb 	bl	800aba8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	78fa      	ldrb	r2, [r7, #3]
 800ae16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ae1a:	bf00      	nop
 800ae1c:	3710      	adds	r7, #16
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}
	...

0800ae24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b08e      	sub	sp, #56	; 0x38
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	60b9      	str	r1, [r7, #8]
 800ae2e:	607a      	str	r2, [r7, #4]
 800ae30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ae32:	2300      	movs	r3, #0
 800ae34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ae3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10a      	bne.n	800ae56 <xQueueGenericSend+0x32>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ae52:	bf00      	nop
 800ae54:	e7fe      	b.n	800ae54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d103      	bne.n	800ae64 <xQueueGenericSend+0x40>
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d101      	bne.n	800ae68 <xQueueGenericSend+0x44>
 800ae64:	2301      	movs	r3, #1
 800ae66:	e000      	b.n	800ae6a <xQueueGenericSend+0x46>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10a      	bne.n	800ae84 <xQueueGenericSend+0x60>
	__asm volatile
 800ae6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae72:	f383 8811 	msr	BASEPRI, r3
 800ae76:	f3bf 8f6f 	isb	sy
 800ae7a:	f3bf 8f4f 	dsb	sy
 800ae7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ae80:	bf00      	nop
 800ae82:	e7fe      	b.n	800ae82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	2b02      	cmp	r3, #2
 800ae88:	d103      	bne.n	800ae92 <xQueueGenericSend+0x6e>
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d101      	bne.n	800ae96 <xQueueGenericSend+0x72>
 800ae92:	2301      	movs	r3, #1
 800ae94:	e000      	b.n	800ae98 <xQueueGenericSend+0x74>
 800ae96:	2300      	movs	r3, #0
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d10a      	bne.n	800aeb2 <xQueueGenericSend+0x8e>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	623b      	str	r3, [r7, #32]
}
 800aeae:	bf00      	nop
 800aeb0:	e7fe      	b.n	800aeb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aeb2:	f001 fa4f 	bl	800c354 <xTaskGetSchedulerState>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d102      	bne.n	800aec2 <xQueueGenericSend+0x9e>
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d101      	bne.n	800aec6 <xQueueGenericSend+0xa2>
 800aec2:	2301      	movs	r3, #1
 800aec4:	e000      	b.n	800aec8 <xQueueGenericSend+0xa4>
 800aec6:	2300      	movs	r3, #0
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d10a      	bne.n	800aee2 <xQueueGenericSend+0xbe>
	__asm volatile
 800aecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed0:	f383 8811 	msr	BASEPRI, r3
 800aed4:	f3bf 8f6f 	isb	sy
 800aed8:	f3bf 8f4f 	dsb	sy
 800aedc:	61fb      	str	r3, [r7, #28]
}
 800aede:	bf00      	nop
 800aee0:	e7fe      	b.n	800aee0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aee2:	f001 ff8f 	bl	800ce04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d302      	bcc.n	800aef8 <xQueueGenericSend+0xd4>
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	d129      	bne.n	800af4c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aef8:	683a      	ldr	r2, [r7, #0]
 800aefa:	68b9      	ldr	r1, [r7, #8]
 800aefc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aefe:	f000 fa8b 	bl	800b418 <prvCopyDataToQueue>
 800af02:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d010      	beq.n	800af2e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0e:	3324      	adds	r3, #36	; 0x24
 800af10:	4618      	mov	r0, r3
 800af12:	f001 f861 	bl	800bfd8 <xTaskRemoveFromEventList>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d013      	beq.n	800af44 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800af1c:	4b3f      	ldr	r3, [pc, #252]	; (800b01c <xQueueGenericSend+0x1f8>)
 800af1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	e00a      	b.n	800af44 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800af2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af30:	2b00      	cmp	r3, #0
 800af32:	d007      	beq.n	800af44 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800af34:	4b39      	ldr	r3, [pc, #228]	; (800b01c <xQueueGenericSend+0x1f8>)
 800af36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af3a:	601a      	str	r2, [r3, #0]
 800af3c:	f3bf 8f4f 	dsb	sy
 800af40:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800af44:	f001 ff8e 	bl	800ce64 <vPortExitCritical>
				return pdPASS;
 800af48:	2301      	movs	r3, #1
 800af4a:	e063      	b.n	800b014 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d103      	bne.n	800af5a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800af52:	f001 ff87 	bl	800ce64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800af56:	2300      	movs	r3, #0
 800af58:	e05c      	b.n	800b014 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800af5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d106      	bne.n	800af6e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800af60:	f107 0314 	add.w	r3, r7, #20
 800af64:	4618      	mov	r0, r3
 800af66:	f001 f89b 	bl	800c0a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800af6a:	2301      	movs	r3, #1
 800af6c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800af6e:	f001 ff79 	bl	800ce64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800af72:	f000 fdfb 	bl	800bb6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800af76:	f001 ff45 	bl	800ce04 <vPortEnterCritical>
 800af7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af80:	b25b      	sxtb	r3, r3
 800af82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af86:	d103      	bne.n	800af90 <xQueueGenericSend+0x16c>
 800af88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af96:	b25b      	sxtb	r3, r3
 800af98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af9c:	d103      	bne.n	800afa6 <xQueueGenericSend+0x182>
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	2200      	movs	r2, #0
 800afa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afa6:	f001 ff5d 	bl	800ce64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800afaa:	1d3a      	adds	r2, r7, #4
 800afac:	f107 0314 	add.w	r3, r7, #20
 800afb0:	4611      	mov	r1, r2
 800afb2:	4618      	mov	r0, r3
 800afb4:	f001 f88a 	bl	800c0cc <xTaskCheckForTimeOut>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d124      	bne.n	800b008 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800afbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afc0:	f000 fb22 	bl	800b608 <prvIsQueueFull>
 800afc4:	4603      	mov	r3, r0
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d018      	beq.n	800affc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800afca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afcc:	3310      	adds	r3, #16
 800afce:	687a      	ldr	r2, [r7, #4]
 800afd0:	4611      	mov	r1, r2
 800afd2:	4618      	mov	r0, r3
 800afd4:	f000 ffb0 	bl	800bf38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800afd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800afda:	f000 faad 	bl	800b538 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800afde:	f000 fdd3 	bl	800bb88 <xTaskResumeAll>
 800afe2:	4603      	mov	r3, r0
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	f47f af7c 	bne.w	800aee2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800afea:	4b0c      	ldr	r3, [pc, #48]	; (800b01c <xQueueGenericSend+0x1f8>)
 800afec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aff0:	601a      	str	r2, [r3, #0]
 800aff2:	f3bf 8f4f 	dsb	sy
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	e772      	b.n	800aee2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800affc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800affe:	f000 fa9b 	bl	800b538 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b002:	f000 fdc1 	bl	800bb88 <xTaskResumeAll>
 800b006:	e76c      	b.n	800aee2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b008:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b00a:	f000 fa95 	bl	800b538 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b00e:	f000 fdbb 	bl	800bb88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b012:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b014:	4618      	mov	r0, r3
 800b016:	3738      	adds	r7, #56	; 0x38
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	e000ed04 	.word	0xe000ed04

0800b020 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b090      	sub	sp, #64	; 0x40
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
 800b02c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800b032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b034:	2b00      	cmp	r3, #0
 800b036:	d10a      	bne.n	800b04e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800b038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b03c:	f383 8811 	msr	BASEPRI, r3
 800b040:	f3bf 8f6f 	isb	sy
 800b044:	f3bf 8f4f 	dsb	sy
 800b048:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b04a:	bf00      	nop
 800b04c:	e7fe      	b.n	800b04c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d103      	bne.n	800b05c <xQueueGenericSendFromISR+0x3c>
 800b054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d101      	bne.n	800b060 <xQueueGenericSendFromISR+0x40>
 800b05c:	2301      	movs	r3, #1
 800b05e:	e000      	b.n	800b062 <xQueueGenericSendFromISR+0x42>
 800b060:	2300      	movs	r3, #0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d10a      	bne.n	800b07c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800b066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b06a:	f383 8811 	msr	BASEPRI, r3
 800b06e:	f3bf 8f6f 	isb	sy
 800b072:	f3bf 8f4f 	dsb	sy
 800b076:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b078:	bf00      	nop
 800b07a:	e7fe      	b.n	800b07a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d103      	bne.n	800b08a <xQueueGenericSendFromISR+0x6a>
 800b082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b086:	2b01      	cmp	r3, #1
 800b088:	d101      	bne.n	800b08e <xQueueGenericSendFromISR+0x6e>
 800b08a:	2301      	movs	r3, #1
 800b08c:	e000      	b.n	800b090 <xQueueGenericSendFromISR+0x70>
 800b08e:	2300      	movs	r3, #0
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10a      	bne.n	800b0aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800b094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	623b      	str	r3, [r7, #32]
}
 800b0a6:	bf00      	nop
 800b0a8:	e7fe      	b.n	800b0a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0aa:	f001 ff8d 	bl	800cfc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b0ae:	f3ef 8211 	mrs	r2, BASEPRI
 800b0b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	61fa      	str	r2, [r7, #28]
 800b0c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b0c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b0c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d302      	bcc.n	800b0dc <xQueueGenericSendFromISR+0xbc>
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	2b02      	cmp	r3, #2
 800b0da:	d12f      	bne.n	800b13c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b0dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b0ec:	683a      	ldr	r2, [r7, #0]
 800b0ee:	68b9      	ldr	r1, [r7, #8]
 800b0f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b0f2:	f000 f991 	bl	800b418 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b0f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800b0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0fe:	d112      	bne.n	800b126 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b104:	2b00      	cmp	r3, #0
 800b106:	d016      	beq.n	800b136 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b10a:	3324      	adds	r3, #36	; 0x24
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 ff63 	bl	800bfd8 <xTaskRemoveFromEventList>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00e      	beq.n	800b136 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00b      	beq.n	800b136 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	601a      	str	r2, [r3, #0]
 800b124:	e007      	b.n	800b136 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b126:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800b12a:	3301      	adds	r3, #1
 800b12c:	b2db      	uxtb	r3, r3
 800b12e:	b25a      	sxtb	r2, r3
 800b130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b132:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b136:	2301      	movs	r3, #1
 800b138:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800b13a:	e001      	b.n	800b140 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b13c:	2300      	movs	r3, #0
 800b13e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b142:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b14a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b14c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3740      	adds	r7, #64	; 0x40
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
	...

0800b158 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b08c      	sub	sp, #48	; 0x30
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b164:	2300      	movs	r3, #0
 800b166:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b16c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d10a      	bne.n	800b188 <xQueueReceive+0x30>
	__asm volatile
 800b172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b176:	f383 8811 	msr	BASEPRI, r3
 800b17a:	f3bf 8f6f 	isb	sy
 800b17e:	f3bf 8f4f 	dsb	sy
 800b182:	623b      	str	r3, [r7, #32]
}
 800b184:	bf00      	nop
 800b186:	e7fe      	b.n	800b186 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d103      	bne.n	800b196 <xQueueReceive+0x3e>
 800b18e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <xQueueReceive+0x42>
 800b196:	2301      	movs	r3, #1
 800b198:	e000      	b.n	800b19c <xQueueReceive+0x44>
 800b19a:	2300      	movs	r3, #0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d10a      	bne.n	800b1b6 <xQueueReceive+0x5e>
	__asm volatile
 800b1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a4:	f383 8811 	msr	BASEPRI, r3
 800b1a8:	f3bf 8f6f 	isb	sy
 800b1ac:	f3bf 8f4f 	dsb	sy
 800b1b0:	61fb      	str	r3, [r7, #28]
}
 800b1b2:	bf00      	nop
 800b1b4:	e7fe      	b.n	800b1b4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1b6:	f001 f8cd 	bl	800c354 <xTaskGetSchedulerState>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d102      	bne.n	800b1c6 <xQueueReceive+0x6e>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d101      	bne.n	800b1ca <xQueueReceive+0x72>
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	e000      	b.n	800b1cc <xQueueReceive+0x74>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10a      	bne.n	800b1e6 <xQueueReceive+0x8e>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	61bb      	str	r3, [r7, #24]
}
 800b1e2:	bf00      	nop
 800b1e4:	e7fe      	b.n	800b1e4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1e6:	f001 fe0d 	bl	800ce04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ee:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d01f      	beq.n	800b236 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b1f6:	68b9      	ldr	r1, [r7, #8]
 800b1f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b1fa:	f000 f977 	bl	800b4ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b200:	1e5a      	subs	r2, r3, #1
 800b202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b204:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d00f      	beq.n	800b22e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b210:	3310      	adds	r3, #16
 800b212:	4618      	mov	r0, r3
 800b214:	f000 fee0 	bl	800bfd8 <xTaskRemoveFromEventList>
 800b218:	4603      	mov	r3, r0
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d007      	beq.n	800b22e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b21e:	4b3d      	ldr	r3, [pc, #244]	; (800b314 <xQueueReceive+0x1bc>)
 800b220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b224:	601a      	str	r2, [r3, #0]
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b22e:	f001 fe19 	bl	800ce64 <vPortExitCritical>
				return pdPASS;
 800b232:	2301      	movs	r3, #1
 800b234:	e069      	b.n	800b30a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d103      	bne.n	800b244 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b23c:	f001 fe12 	bl	800ce64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b240:	2300      	movs	r3, #0
 800b242:	e062      	b.n	800b30a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b246:	2b00      	cmp	r3, #0
 800b248:	d106      	bne.n	800b258 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b24a:	f107 0310 	add.w	r3, r7, #16
 800b24e:	4618      	mov	r0, r3
 800b250:	f000 ff26 	bl	800c0a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b254:	2301      	movs	r3, #1
 800b256:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b258:	f001 fe04 	bl	800ce64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b25c:	f000 fc86 	bl	800bb6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b260:	f001 fdd0 	bl	800ce04 <vPortEnterCritical>
 800b264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b266:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b26a:	b25b      	sxtb	r3, r3
 800b26c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b270:	d103      	bne.n	800b27a <xQueueReceive+0x122>
 800b272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b274:	2200      	movs	r2, #0
 800b276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b27a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b280:	b25b      	sxtb	r3, r3
 800b282:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b286:	d103      	bne.n	800b290 <xQueueReceive+0x138>
 800b288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28a:	2200      	movs	r2, #0
 800b28c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b290:	f001 fde8 	bl	800ce64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b294:	1d3a      	adds	r2, r7, #4
 800b296:	f107 0310 	add.w	r3, r7, #16
 800b29a:	4611      	mov	r1, r2
 800b29c:	4618      	mov	r0, r3
 800b29e:	f000 ff15 	bl	800c0cc <xTaskCheckForTimeOut>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d123      	bne.n	800b2f0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2aa:	f000 f997 	bl	800b5dc <prvIsQueueEmpty>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d017      	beq.n	800b2e4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2b6:	3324      	adds	r3, #36	; 0x24
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f000 fe3b 	bl	800bf38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2c4:	f000 f938 	bl	800b538 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2c8:	f000 fc5e 	bl	800bb88 <xTaskResumeAll>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d189      	bne.n	800b1e6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b2d2:	4b10      	ldr	r3, [pc, #64]	; (800b314 <xQueueReceive+0x1bc>)
 800b2d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2d8:	601a      	str	r2, [r3, #0]
 800b2da:	f3bf 8f4f 	dsb	sy
 800b2de:	f3bf 8f6f 	isb	sy
 800b2e2:	e780      	b.n	800b1e6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b2e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2e6:	f000 f927 	bl	800b538 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2ea:	f000 fc4d 	bl	800bb88 <xTaskResumeAll>
 800b2ee:	e77a      	b.n	800b1e6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2f2:	f000 f921 	bl	800b538 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2f6:	f000 fc47 	bl	800bb88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b2fc:	f000 f96e 	bl	800b5dc <prvIsQueueEmpty>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	f43f af6f 	beq.w	800b1e6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b308:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3730      	adds	r7, #48	; 0x30
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	e000ed04 	.word	0xe000ed04

0800b318 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b08e      	sub	sp, #56	; 0x38
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d10a      	bne.n	800b344 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b332:	f383 8811 	msr	BASEPRI, r3
 800b336:	f3bf 8f6f 	isb	sy
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	623b      	str	r3, [r7, #32]
}
 800b340:	bf00      	nop
 800b342:	e7fe      	b.n	800b342 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d103      	bne.n	800b352 <xQueueReceiveFromISR+0x3a>
 800b34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d101      	bne.n	800b356 <xQueueReceiveFromISR+0x3e>
 800b352:	2301      	movs	r3, #1
 800b354:	e000      	b.n	800b358 <xQueueReceiveFromISR+0x40>
 800b356:	2300      	movs	r3, #0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d10a      	bne.n	800b372 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b360:	f383 8811 	msr	BASEPRI, r3
 800b364:	f3bf 8f6f 	isb	sy
 800b368:	f3bf 8f4f 	dsb	sy
 800b36c:	61fb      	str	r3, [r7, #28]
}
 800b36e:	bf00      	nop
 800b370:	e7fe      	b.n	800b370 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b372:	f001 fe29 	bl	800cfc8 <vPortValidateInterruptPriority>
	__asm volatile
 800b376:	f3ef 8211 	mrs	r2, BASEPRI
 800b37a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b37e:	f383 8811 	msr	BASEPRI, r3
 800b382:	f3bf 8f6f 	isb	sy
 800b386:	f3bf 8f4f 	dsb	sy
 800b38a:	61ba      	str	r2, [r7, #24]
 800b38c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b38e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b390:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b396:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d02f      	beq.n	800b3fe <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b3a8:	68b9      	ldr	r1, [r7, #8]
 800b3aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3ac:	f000 f89e 	bl	800b4ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b3b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3b2:	1e5a      	subs	r2, r3, #1
 800b3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b3b8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c0:	d112      	bne.n	800b3e8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c4:	691b      	ldr	r3, [r3, #16]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d016      	beq.n	800b3f8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3cc:	3310      	adds	r3, #16
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f000 fe02 	bl	800bfd8 <xTaskRemoveFromEventList>
 800b3d4:	4603      	mov	r3, r0
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d00e      	beq.n	800b3f8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d00b      	beq.n	800b3f8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	601a      	str	r2, [r3, #0]
 800b3e6:	e007      	b.n	800b3f8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b3e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	b25a      	sxtb	r2, r3
 800b3f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	637b      	str	r3, [r7, #52]	; 0x34
 800b3fc:	e001      	b.n	800b402 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b3fe:	2300      	movs	r3, #0
 800b400:	637b      	str	r3, [r7, #52]	; 0x34
 800b402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b404:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	f383 8811 	msr	BASEPRI, r3
}
 800b40c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b40e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b410:	4618      	mov	r0, r3
 800b412:	3738      	adds	r7, #56	; 0x38
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b424:	2300      	movs	r3, #0
 800b426:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b42c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b432:	2b00      	cmp	r3, #0
 800b434:	d10d      	bne.n	800b452 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d14d      	bne.n	800b4da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	4618      	mov	r0, r3
 800b444:	f000 ffa4 	bl	800c390 <xTaskPriorityDisinherit>
 800b448:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	2200      	movs	r2, #0
 800b44e:	609a      	str	r2, [r3, #8]
 800b450:	e043      	b.n	800b4da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d119      	bne.n	800b48c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	6858      	ldr	r0, [r3, #4]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b460:	461a      	mov	r2, r3
 800b462:	68b9      	ldr	r1, [r7, #8]
 800b464:	f002 fcf4 	bl	800de50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	685a      	ldr	r2, [r3, #4]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b470:	441a      	add	r2, r3
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	685a      	ldr	r2, [r3, #4]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	429a      	cmp	r2, r3
 800b480:	d32b      	bcc.n	800b4da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	605a      	str	r2, [r3, #4]
 800b48a:	e026      	b.n	800b4da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	68d8      	ldr	r0, [r3, #12]
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b494:	461a      	mov	r2, r3
 800b496:	68b9      	ldr	r1, [r7, #8]
 800b498:	f002 fcda 	bl	800de50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	68da      	ldr	r2, [r3, #12]
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4a4:	425b      	negs	r3, r3
 800b4a6:	441a      	add	r2, r3
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	68da      	ldr	r2, [r3, #12]
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d207      	bcs.n	800b4c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	689a      	ldr	r2, [r3, #8]
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c0:	425b      	negs	r3, r3
 800b4c2:	441a      	add	r2, r3
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2b02      	cmp	r3, #2
 800b4cc:	d105      	bne.n	800b4da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d002      	beq.n	800b4da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	1c5a      	adds	r2, r3, #1
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b4e2:	697b      	ldr	r3, [r7, #20]
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3718      	adds	r7, #24
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b082      	sub	sp, #8
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d018      	beq.n	800b530 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	68da      	ldr	r2, [r3, #12]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b506:	441a      	add	r2, r3
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	68da      	ldr	r2, [r3, #12]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	429a      	cmp	r2, r3
 800b516:	d303      	bcc.n	800b520 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681a      	ldr	r2, [r3, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	68d9      	ldr	r1, [r3, #12]
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b528:	461a      	mov	r2, r3
 800b52a:	6838      	ldr	r0, [r7, #0]
 800b52c:	f002 fc90 	bl	800de50 <memcpy>
	}
}
 800b530:	bf00      	nop
 800b532:	3708      	adds	r7, #8
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b540:	f001 fc60 	bl	800ce04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b54a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b54c:	e011      	b.n	800b572 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b552:	2b00      	cmp	r3, #0
 800b554:	d012      	beq.n	800b57c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	3324      	adds	r3, #36	; 0x24
 800b55a:	4618      	mov	r0, r3
 800b55c:	f000 fd3c 	bl	800bfd8 <xTaskRemoveFromEventList>
 800b560:	4603      	mov	r3, r0
 800b562:	2b00      	cmp	r3, #0
 800b564:	d001      	beq.n	800b56a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b566:	f000 fe13 	bl	800c190 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b56a:	7bfb      	ldrb	r3, [r7, #15]
 800b56c:	3b01      	subs	r3, #1
 800b56e:	b2db      	uxtb	r3, r3
 800b570:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b576:	2b00      	cmp	r3, #0
 800b578:	dce9      	bgt.n	800b54e <prvUnlockQueue+0x16>
 800b57a:	e000      	b.n	800b57e <prvUnlockQueue+0x46>
					break;
 800b57c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	22ff      	movs	r2, #255	; 0xff
 800b582:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b586:	f001 fc6d 	bl	800ce64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b58a:	f001 fc3b 	bl	800ce04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b594:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b596:	e011      	b.n	800b5bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d012      	beq.n	800b5c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	3310      	adds	r3, #16
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 fd17 	bl	800bfd8 <xTaskRemoveFromEventList>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d001      	beq.n	800b5b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b5b0:	f000 fdee 	bl	800c190 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b5b4:	7bbb      	ldrb	r3, [r7, #14]
 800b5b6:	3b01      	subs	r3, #1
 800b5b8:	b2db      	uxtb	r3, r3
 800b5ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b5bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	dce9      	bgt.n	800b598 <prvUnlockQueue+0x60>
 800b5c4:	e000      	b.n	800b5c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b5c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	22ff      	movs	r2, #255	; 0xff
 800b5cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b5d0:	f001 fc48 	bl	800ce64 <vPortExitCritical>
}
 800b5d4:	bf00      	nop
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b084      	sub	sp, #16
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b5e4:	f001 fc0e 	bl	800ce04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d102      	bne.n	800b5f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	60fb      	str	r3, [r7, #12]
 800b5f4:	e001      	b.n	800b5fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b5fa:	f001 fc33 	bl	800ce64 <vPortExitCritical>

	return xReturn;
 800b5fe:	68fb      	ldr	r3, [r7, #12]
}
 800b600:	4618      	mov	r0, r3
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	b084      	sub	sp, #16
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b610:	f001 fbf8 	bl	800ce04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d102      	bne.n	800b626 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b620:	2301      	movs	r3, #1
 800b622:	60fb      	str	r3, [r7, #12]
 800b624:	e001      	b.n	800b62a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b626:	2300      	movs	r3, #0
 800b628:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b62a:	f001 fc1b 	bl	800ce64 <vPortExitCritical>

	return xReturn;
 800b62e:	68fb      	ldr	r3, [r7, #12]
}
 800b630:	4618      	mov	r0, r3
 800b632:	3710      	adds	r7, #16
 800b634:	46bd      	mov	sp, r7
 800b636:	bd80      	pop	{r7, pc}

0800b638 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b638:	b480      	push	{r7}
 800b63a:	b085      	sub	sp, #20
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b642:	2300      	movs	r3, #0
 800b644:	60fb      	str	r3, [r7, #12]
 800b646:	e014      	b.n	800b672 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b648:	4a0f      	ldr	r2, [pc, #60]	; (800b688 <vQueueAddToRegistry+0x50>)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d10b      	bne.n	800b66c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b654:	490c      	ldr	r1, [pc, #48]	; (800b688 <vQueueAddToRegistry+0x50>)
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	683a      	ldr	r2, [r7, #0]
 800b65a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b65e:	4a0a      	ldr	r2, [pc, #40]	; (800b688 <vQueueAddToRegistry+0x50>)
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	00db      	lsls	r3, r3, #3
 800b664:	4413      	add	r3, r2
 800b666:	687a      	ldr	r2, [r7, #4]
 800b668:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b66a:	e006      	b.n	800b67a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	3301      	adds	r3, #1
 800b670:	60fb      	str	r3, [r7, #12]
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2b07      	cmp	r3, #7
 800b676:	d9e7      	bls.n	800b648 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b678:	bf00      	nop
 800b67a:	bf00      	nop
 800b67c:	3714      	adds	r7, #20
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop
 800b688:	20000afc 	.word	0x20000afc

0800b68c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	60f8      	str	r0, [r7, #12]
 800b694:	60b9      	str	r1, [r7, #8]
 800b696:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b69c:	f001 fbb2 	bl	800ce04 <vPortEnterCritical>
 800b6a0:	697b      	ldr	r3, [r7, #20]
 800b6a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6a6:	b25b      	sxtb	r3, r3
 800b6a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6ac:	d103      	bne.n	800b6b6 <vQueueWaitForMessageRestricted+0x2a>
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b6bc:	b25b      	sxtb	r3, r3
 800b6be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c2:	d103      	bne.n	800b6cc <vQueueWaitForMessageRestricted+0x40>
 800b6c4:	697b      	ldr	r3, [r7, #20]
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6cc:	f001 fbca 	bl	800ce64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d106      	bne.n	800b6e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	3324      	adds	r3, #36	; 0x24
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	68b9      	ldr	r1, [r7, #8]
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f000 fc4d 	bl	800bf80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b6e6:	6978      	ldr	r0, [r7, #20]
 800b6e8:	f7ff ff26 	bl	800b538 <prvUnlockQueue>
	}
 800b6ec:	bf00      	nop
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b08e      	sub	sp, #56	; 0x38
 800b6f8:	af04      	add	r7, sp, #16
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
 800b700:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b704:	2b00      	cmp	r3, #0
 800b706:	d10a      	bne.n	800b71e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b70c:	f383 8811 	msr	BASEPRI, r3
 800b710:	f3bf 8f6f 	isb	sy
 800b714:	f3bf 8f4f 	dsb	sy
 800b718:	623b      	str	r3, [r7, #32]
}
 800b71a:	bf00      	nop
 800b71c:	e7fe      	b.n	800b71c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10a      	bne.n	800b73a <xTaskCreateStatic+0x46>
	__asm volatile
 800b724:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b728:	f383 8811 	msr	BASEPRI, r3
 800b72c:	f3bf 8f6f 	isb	sy
 800b730:	f3bf 8f4f 	dsb	sy
 800b734:	61fb      	str	r3, [r7, #28]
}
 800b736:	bf00      	nop
 800b738:	e7fe      	b.n	800b738 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b73a:	235c      	movs	r3, #92	; 0x5c
 800b73c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	2b5c      	cmp	r3, #92	; 0x5c
 800b742:	d00a      	beq.n	800b75a <xTaskCreateStatic+0x66>
	__asm volatile
 800b744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b748:	f383 8811 	msr	BASEPRI, r3
 800b74c:	f3bf 8f6f 	isb	sy
 800b750:	f3bf 8f4f 	dsb	sy
 800b754:	61bb      	str	r3, [r7, #24]
}
 800b756:	bf00      	nop
 800b758:	e7fe      	b.n	800b758 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b75a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d01e      	beq.n	800b7a0 <xTaskCreateStatic+0xac>
 800b762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b764:	2b00      	cmp	r3, #0
 800b766:	d01b      	beq.n	800b7a0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b76a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b76e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b770:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b774:	2202      	movs	r2, #2
 800b776:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b77a:	2300      	movs	r3, #0
 800b77c:	9303      	str	r3, [sp, #12]
 800b77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b780:	9302      	str	r3, [sp, #8]
 800b782:	f107 0314 	add.w	r3, r7, #20
 800b786:	9301      	str	r3, [sp, #4]
 800b788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b78a:	9300      	str	r3, [sp, #0]
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	68b9      	ldr	r1, [r7, #8]
 800b792:	68f8      	ldr	r0, [r7, #12]
 800b794:	f000 f850 	bl	800b838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b79a:	f000 f8dd 	bl	800b958 <prvAddNewTaskToReadyList>
 800b79e:	e001      	b.n	800b7a4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b7a4:	697b      	ldr	r3, [r7, #20]
	}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3728      	adds	r7, #40	; 0x28
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}

0800b7ae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b7ae:	b580      	push	{r7, lr}
 800b7b0:	b08c      	sub	sp, #48	; 0x30
 800b7b2:	af04      	add	r7, sp, #16
 800b7b4:	60f8      	str	r0, [r7, #12]
 800b7b6:	60b9      	str	r1, [r7, #8]
 800b7b8:	603b      	str	r3, [r7, #0]
 800b7ba:	4613      	mov	r3, r2
 800b7bc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b7be:	88fb      	ldrh	r3, [r7, #6]
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f001 fc40 	bl	800d048 <pvPortMalloc>
 800b7c8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d00e      	beq.n	800b7ee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b7d0:	205c      	movs	r0, #92	; 0x5c
 800b7d2:	f001 fc39 	bl	800d048 <pvPortMalloc>
 800b7d6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d003      	beq.n	800b7e6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b7de:	69fb      	ldr	r3, [r7, #28]
 800b7e0:	697a      	ldr	r2, [r7, #20]
 800b7e2:	631a      	str	r2, [r3, #48]	; 0x30
 800b7e4:	e005      	b.n	800b7f2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b7e6:	6978      	ldr	r0, [r7, #20]
 800b7e8:	f001 fcfa 	bl	800d1e0 <vPortFree>
 800b7ec:	e001      	b.n	800b7f2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b7ee:	2300      	movs	r3, #0
 800b7f0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b7f2:	69fb      	ldr	r3, [r7, #28]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d017      	beq.n	800b828 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b7f8:	69fb      	ldr	r3, [r7, #28]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b800:	88fa      	ldrh	r2, [r7, #6]
 800b802:	2300      	movs	r3, #0
 800b804:	9303      	str	r3, [sp, #12]
 800b806:	69fb      	ldr	r3, [r7, #28]
 800b808:	9302      	str	r3, [sp, #8]
 800b80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b80c:	9301      	str	r3, [sp, #4]
 800b80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	68b9      	ldr	r1, [r7, #8]
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f000 f80e 	bl	800b838 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b81c:	69f8      	ldr	r0, [r7, #28]
 800b81e:	f000 f89b 	bl	800b958 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b822:	2301      	movs	r3, #1
 800b824:	61bb      	str	r3, [r7, #24]
 800b826:	e002      	b.n	800b82e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b828:	f04f 33ff 	mov.w	r3, #4294967295
 800b82c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b82e:	69bb      	ldr	r3, [r7, #24]
	}
 800b830:	4618      	mov	r0, r3
 800b832:	3720      	adds	r7, #32
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b088      	sub	sp, #32
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
 800b844:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b848:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	009b      	lsls	r3, r3, #2
 800b84e:	461a      	mov	r2, r3
 800b850:	21a5      	movs	r1, #165	; 0xa5
 800b852:	f002 fb0b 	bl	800de6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b860:	3b01      	subs	r3, #1
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	4413      	add	r3, r2
 800b866:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b868:	69bb      	ldr	r3, [r7, #24]
 800b86a:	f023 0307 	bic.w	r3, r3, #7
 800b86e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	f003 0307 	and.w	r3, r3, #7
 800b876:	2b00      	cmp	r3, #0
 800b878:	d00a      	beq.n	800b890 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87e:	f383 8811 	msr	BASEPRI, r3
 800b882:	f3bf 8f6f 	isb	sy
 800b886:	f3bf 8f4f 	dsb	sy
 800b88a:	617b      	str	r3, [r7, #20]
}
 800b88c:	bf00      	nop
 800b88e:	e7fe      	b.n	800b88e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d01f      	beq.n	800b8d6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b896:	2300      	movs	r3, #0
 800b898:	61fb      	str	r3, [r7, #28]
 800b89a:	e012      	b.n	800b8c2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	4413      	add	r3, r2
 800b8a2:	7819      	ldrb	r1, [r3, #0]
 800b8a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	3334      	adds	r3, #52	; 0x34
 800b8ac:	460a      	mov	r2, r1
 800b8ae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b8b0:	68ba      	ldr	r2, [r7, #8]
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	4413      	add	r3, r2
 800b8b6:	781b      	ldrb	r3, [r3, #0]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d006      	beq.n	800b8ca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	61fb      	str	r3, [r7, #28]
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	2b0f      	cmp	r3, #15
 800b8c6:	d9e9      	bls.n	800b89c <prvInitialiseNewTask+0x64>
 800b8c8:	e000      	b.n	800b8cc <prvInitialiseNewTask+0x94>
			{
				break;
 800b8ca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b8d4:	e003      	b.n	800b8de <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	2200      	movs	r2, #0
 800b8da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8e0:	2b37      	cmp	r3, #55	; 0x37
 800b8e2:	d901      	bls.n	800b8e8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b8e4:	2337      	movs	r3, #55	; 0x37
 800b8e6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8ec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b8fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8fc:	3304      	adds	r3, #4
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7ff f8be 	bl	800aa80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b906:	3318      	adds	r3, #24
 800b908:	4618      	mov	r0, r3
 800b90a:	f7ff f8b9 	bl	800aa80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b912:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b916:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b91c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b922:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b926:	2200      	movs	r2, #0
 800b928:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b92a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	68f9      	ldr	r1, [r7, #12]
 800b936:	69b8      	ldr	r0, [r7, #24]
 800b938:	f001 f93a 	bl	800cbb0 <pxPortInitialiseStack>
 800b93c:	4602      	mov	r2, r0
 800b93e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b940:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b944:	2b00      	cmp	r3, #0
 800b946:	d002      	beq.n	800b94e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b94c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b94e:	bf00      	nop
 800b950:	3720      	adds	r7, #32
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
	...

0800b958 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b960:	f001 fa50 	bl	800ce04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b964:	4b2d      	ldr	r3, [pc, #180]	; (800ba1c <prvAddNewTaskToReadyList+0xc4>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	3301      	adds	r3, #1
 800b96a:	4a2c      	ldr	r2, [pc, #176]	; (800ba1c <prvAddNewTaskToReadyList+0xc4>)
 800b96c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b96e:	4b2c      	ldr	r3, [pc, #176]	; (800ba20 <prvAddNewTaskToReadyList+0xc8>)
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d109      	bne.n	800b98a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b976:	4a2a      	ldr	r2, [pc, #168]	; (800ba20 <prvAddNewTaskToReadyList+0xc8>)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b97c:	4b27      	ldr	r3, [pc, #156]	; (800ba1c <prvAddNewTaskToReadyList+0xc4>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d110      	bne.n	800b9a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b984:	f000 fc28 	bl	800c1d8 <prvInitialiseTaskLists>
 800b988:	e00d      	b.n	800b9a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b98a:	4b26      	ldr	r3, [pc, #152]	; (800ba24 <prvAddNewTaskToReadyList+0xcc>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d109      	bne.n	800b9a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b992:	4b23      	ldr	r3, [pc, #140]	; (800ba20 <prvAddNewTaskToReadyList+0xc8>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d802      	bhi.n	800b9a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b9a0:	4a1f      	ldr	r2, [pc, #124]	; (800ba20 <prvAddNewTaskToReadyList+0xc8>)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b9a6:	4b20      	ldr	r3, [pc, #128]	; (800ba28 <prvAddNewTaskToReadyList+0xd0>)
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	4a1e      	ldr	r2, [pc, #120]	; (800ba28 <prvAddNewTaskToReadyList+0xd0>)
 800b9ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b9b0:	4b1d      	ldr	r3, [pc, #116]	; (800ba28 <prvAddNewTaskToReadyList+0xd0>)
 800b9b2:	681a      	ldr	r2, [r3, #0]
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9bc:	4b1b      	ldr	r3, [pc, #108]	; (800ba2c <prvAddNewTaskToReadyList+0xd4>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	429a      	cmp	r2, r3
 800b9c2:	d903      	bls.n	800b9cc <prvAddNewTaskToReadyList+0x74>
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c8:	4a18      	ldr	r2, [pc, #96]	; (800ba2c <prvAddNewTaskToReadyList+0xd4>)
 800b9ca:	6013      	str	r3, [r2, #0]
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	009b      	lsls	r3, r3, #2
 800b9d4:	4413      	add	r3, r2
 800b9d6:	009b      	lsls	r3, r3, #2
 800b9d8:	4a15      	ldr	r2, [pc, #84]	; (800ba30 <prvAddNewTaskToReadyList+0xd8>)
 800b9da:	441a      	add	r2, r3
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	3304      	adds	r3, #4
 800b9e0:	4619      	mov	r1, r3
 800b9e2:	4610      	mov	r0, r2
 800b9e4:	f7ff f859 	bl	800aa9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b9e8:	f001 fa3c 	bl	800ce64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b9ec:	4b0d      	ldr	r3, [pc, #52]	; (800ba24 <prvAddNewTaskToReadyList+0xcc>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00e      	beq.n	800ba12 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b9f4:	4b0a      	ldr	r3, [pc, #40]	; (800ba20 <prvAddNewTaskToReadyList+0xc8>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d207      	bcs.n	800ba12 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ba02:	4b0c      	ldr	r3, [pc, #48]	; (800ba34 <prvAddNewTaskToReadyList+0xdc>)
 800ba04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba08:	601a      	str	r2, [r3, #0]
 800ba0a:	f3bf 8f4f 	dsb	sy
 800ba0e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba12:	bf00      	nop
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	20001010 	.word	0x20001010
 800ba20:	20000b3c 	.word	0x20000b3c
 800ba24:	2000101c 	.word	0x2000101c
 800ba28:	2000102c 	.word	0x2000102c
 800ba2c:	20001018 	.word	0x20001018
 800ba30:	20000b40 	.word	0x20000b40
 800ba34:	e000ed04 	.word	0xe000ed04

0800ba38 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d017      	beq.n	800ba7a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ba4a:	4b13      	ldr	r3, [pc, #76]	; (800ba98 <vTaskDelay+0x60>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00a      	beq.n	800ba68 <vTaskDelay+0x30>
	__asm volatile
 800ba52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba56:	f383 8811 	msr	BASEPRI, r3
 800ba5a:	f3bf 8f6f 	isb	sy
 800ba5e:	f3bf 8f4f 	dsb	sy
 800ba62:	60bb      	str	r3, [r7, #8]
}
 800ba64:	bf00      	nop
 800ba66:	e7fe      	b.n	800ba66 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ba68:	f000 f880 	bl	800bb6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ba6c:	2100      	movs	r1, #0
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 fcfc 	bl	800c46c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ba74:	f000 f888 	bl	800bb88 <xTaskResumeAll>
 800ba78:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d107      	bne.n	800ba90 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ba80:	4b06      	ldr	r3, [pc, #24]	; (800ba9c <vTaskDelay+0x64>)
 800ba82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba86:	601a      	str	r2, [r3, #0]
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ba90:	bf00      	nop
 800ba92:	3710      	adds	r7, #16
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}
 800ba98:	20001038 	.word	0x20001038
 800ba9c:	e000ed04 	.word	0xe000ed04

0800baa0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b08a      	sub	sp, #40	; 0x28
 800baa4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800baa6:	2300      	movs	r3, #0
 800baa8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800baaa:	2300      	movs	r3, #0
 800baac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800baae:	463a      	mov	r2, r7
 800bab0:	1d39      	adds	r1, r7, #4
 800bab2:	f107 0308 	add.w	r3, r7, #8
 800bab6:	4618      	mov	r0, r3
 800bab8:	f7fe ff8e 	bl	800a9d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800babc:	6839      	ldr	r1, [r7, #0]
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	68ba      	ldr	r2, [r7, #8]
 800bac2:	9202      	str	r2, [sp, #8]
 800bac4:	9301      	str	r3, [sp, #4]
 800bac6:	2300      	movs	r3, #0
 800bac8:	9300      	str	r3, [sp, #0]
 800baca:	2300      	movs	r3, #0
 800bacc:	460a      	mov	r2, r1
 800bace:	4921      	ldr	r1, [pc, #132]	; (800bb54 <vTaskStartScheduler+0xb4>)
 800bad0:	4821      	ldr	r0, [pc, #132]	; (800bb58 <vTaskStartScheduler+0xb8>)
 800bad2:	f7ff fe0f 	bl	800b6f4 <xTaskCreateStatic>
 800bad6:	4603      	mov	r3, r0
 800bad8:	4a20      	ldr	r2, [pc, #128]	; (800bb5c <vTaskStartScheduler+0xbc>)
 800bada:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800badc:	4b1f      	ldr	r3, [pc, #124]	; (800bb5c <vTaskStartScheduler+0xbc>)
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d002      	beq.n	800baea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bae4:	2301      	movs	r3, #1
 800bae6:	617b      	str	r3, [r7, #20]
 800bae8:	e001      	b.n	800baee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800baea:	2300      	movs	r3, #0
 800baec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800baee:	697b      	ldr	r3, [r7, #20]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	d102      	bne.n	800bafa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800baf4:	f000 fd0e 	bl	800c514 <xTimerCreateTimerTask>
 800baf8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bafa:	697b      	ldr	r3, [r7, #20]
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d116      	bne.n	800bb2e <vTaskStartScheduler+0x8e>
	__asm volatile
 800bb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb04:	f383 8811 	msr	BASEPRI, r3
 800bb08:	f3bf 8f6f 	isb	sy
 800bb0c:	f3bf 8f4f 	dsb	sy
 800bb10:	613b      	str	r3, [r7, #16]
}
 800bb12:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bb14:	4b12      	ldr	r3, [pc, #72]	; (800bb60 <vTaskStartScheduler+0xc0>)
 800bb16:	f04f 32ff 	mov.w	r2, #4294967295
 800bb1a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bb1c:	4b11      	ldr	r3, [pc, #68]	; (800bb64 <vTaskStartScheduler+0xc4>)
 800bb1e:	2201      	movs	r2, #1
 800bb20:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bb22:	4b11      	ldr	r3, [pc, #68]	; (800bb68 <vTaskStartScheduler+0xc8>)
 800bb24:	2200      	movs	r2, #0
 800bb26:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bb28:	f001 f8ca 	bl	800ccc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bb2c:	e00e      	b.n	800bb4c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bb2e:	697b      	ldr	r3, [r7, #20]
 800bb30:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb34:	d10a      	bne.n	800bb4c <vTaskStartScheduler+0xac>
	__asm volatile
 800bb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb3a:	f383 8811 	msr	BASEPRI, r3
 800bb3e:	f3bf 8f6f 	isb	sy
 800bb42:	f3bf 8f4f 	dsb	sy
 800bb46:	60fb      	str	r3, [r7, #12]
}
 800bb48:	bf00      	nop
 800bb4a:	e7fe      	b.n	800bb4a <vTaskStartScheduler+0xaa>
}
 800bb4c:	bf00      	nop
 800bb4e:	3718      	adds	r7, #24
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	0800dea0 	.word	0x0800dea0
 800bb58:	0800c1a9 	.word	0x0800c1a9
 800bb5c:	20001034 	.word	0x20001034
 800bb60:	20001030 	.word	0x20001030
 800bb64:	2000101c 	.word	0x2000101c
 800bb68:	20001014 	.word	0x20001014

0800bb6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bb70:	4b04      	ldr	r3, [pc, #16]	; (800bb84 <vTaskSuspendAll+0x18>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	3301      	adds	r3, #1
 800bb76:	4a03      	ldr	r2, [pc, #12]	; (800bb84 <vTaskSuspendAll+0x18>)
 800bb78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bb7a:	bf00      	nop
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb82:	4770      	bx	lr
 800bb84:	20001038 	.word	0x20001038

0800bb88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b084      	sub	sp, #16
 800bb8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bb8e:	2300      	movs	r3, #0
 800bb90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bb92:	2300      	movs	r3, #0
 800bb94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bb96:	4b42      	ldr	r3, [pc, #264]	; (800bca0 <xTaskResumeAll+0x118>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10a      	bne.n	800bbb4 <xTaskResumeAll+0x2c>
	__asm volatile
 800bb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba2:	f383 8811 	msr	BASEPRI, r3
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	603b      	str	r3, [r7, #0]
}
 800bbb0:	bf00      	nop
 800bbb2:	e7fe      	b.n	800bbb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bbb4:	f001 f926 	bl	800ce04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bbb8:	4b39      	ldr	r3, [pc, #228]	; (800bca0 <xTaskResumeAll+0x118>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	4a38      	ldr	r2, [pc, #224]	; (800bca0 <xTaskResumeAll+0x118>)
 800bbc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bbc2:	4b37      	ldr	r3, [pc, #220]	; (800bca0 <xTaskResumeAll+0x118>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d162      	bne.n	800bc90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bbca:	4b36      	ldr	r3, [pc, #216]	; (800bca4 <xTaskResumeAll+0x11c>)
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d05e      	beq.n	800bc90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bbd2:	e02f      	b.n	800bc34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbd4:	4b34      	ldr	r3, [pc, #208]	; (800bca8 <xTaskResumeAll+0x120>)
 800bbd6:	68db      	ldr	r3, [r3, #12]
 800bbd8:	68db      	ldr	r3, [r3, #12]
 800bbda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	3318      	adds	r3, #24
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fe ffb7 	bl	800ab54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bbe6:	68fb      	ldr	r3, [r7, #12]
 800bbe8:	3304      	adds	r3, #4
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fe ffb2 	bl	800ab54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bbf4:	4b2d      	ldr	r3, [pc, #180]	; (800bcac <xTaskResumeAll+0x124>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	429a      	cmp	r2, r3
 800bbfa:	d903      	bls.n	800bc04 <xTaskResumeAll+0x7c>
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc00:	4a2a      	ldr	r2, [pc, #168]	; (800bcac <xTaskResumeAll+0x124>)
 800bc02:	6013      	str	r3, [r2, #0]
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc08:	4613      	mov	r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	4413      	add	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	4a27      	ldr	r2, [pc, #156]	; (800bcb0 <xTaskResumeAll+0x128>)
 800bc12:	441a      	add	r2, r3
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	3304      	adds	r3, #4
 800bc18:	4619      	mov	r1, r3
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	f7fe ff3d 	bl	800aa9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc24:	4b23      	ldr	r3, [pc, #140]	; (800bcb4 <xTaskResumeAll+0x12c>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d302      	bcc.n	800bc34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800bc2e:	4b22      	ldr	r3, [pc, #136]	; (800bcb8 <xTaskResumeAll+0x130>)
 800bc30:	2201      	movs	r2, #1
 800bc32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc34:	4b1c      	ldr	r3, [pc, #112]	; (800bca8 <xTaskResumeAll+0x120>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d1cb      	bne.n	800bbd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d001      	beq.n	800bc46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bc42:	f000 fb67 	bl	800c314 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bc46:	4b1d      	ldr	r3, [pc, #116]	; (800bcbc <xTaskResumeAll+0x134>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d010      	beq.n	800bc74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bc52:	f000 f859 	bl	800bd08 <xTaskIncrementTick>
 800bc56:	4603      	mov	r3, r0
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d002      	beq.n	800bc62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800bc5c:	4b16      	ldr	r3, [pc, #88]	; (800bcb8 <xTaskResumeAll+0x130>)
 800bc5e:	2201      	movs	r2, #1
 800bc60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	3b01      	subs	r3, #1
 800bc66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d1f1      	bne.n	800bc52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800bc6e:	4b13      	ldr	r3, [pc, #76]	; (800bcbc <xTaskResumeAll+0x134>)
 800bc70:	2200      	movs	r2, #0
 800bc72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bc74:	4b10      	ldr	r3, [pc, #64]	; (800bcb8 <xTaskResumeAll+0x130>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d009      	beq.n	800bc90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bc7c:	2301      	movs	r3, #1
 800bc7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bc80:	4b0f      	ldr	r3, [pc, #60]	; (800bcc0 <xTaskResumeAll+0x138>)
 800bc82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc86:	601a      	str	r2, [r3, #0]
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bc90:	f001 f8e8 	bl	800ce64 <vPortExitCritical>

	return xAlreadyYielded;
 800bc94:	68bb      	ldr	r3, [r7, #8]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	20001038 	.word	0x20001038
 800bca4:	20001010 	.word	0x20001010
 800bca8:	20000fd0 	.word	0x20000fd0
 800bcac:	20001018 	.word	0x20001018
 800bcb0:	20000b40 	.word	0x20000b40
 800bcb4:	20000b3c 	.word	0x20000b3c
 800bcb8:	20001024 	.word	0x20001024
 800bcbc:	20001020 	.word	0x20001020
 800bcc0:	e000ed04 	.word	0xe000ed04

0800bcc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bcca:	4b05      	ldr	r3, [pc, #20]	; (800bce0 <xTaskGetTickCount+0x1c>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bcd0:	687b      	ldr	r3, [r7, #4]
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	370c      	adds	r7, #12
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	20001014 	.word	0x20001014

0800bce4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b082      	sub	sp, #8
 800bce8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bcea:	f001 f96d 	bl	800cfc8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bcee:	2300      	movs	r3, #0
 800bcf0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bcf2:	4b04      	ldr	r3, [pc, #16]	; (800bd04 <xTaskGetTickCountFromISR+0x20>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bcf8:	683b      	ldr	r3, [r7, #0]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
 800bd02:	bf00      	nop
 800bd04:	20001014 	.word	0x20001014

0800bd08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b086      	sub	sp, #24
 800bd0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bd0e:	2300      	movs	r3, #0
 800bd10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd12:	4b4f      	ldr	r3, [pc, #316]	; (800be50 <xTaskIncrementTick+0x148>)
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	f040 808f 	bne.w	800be3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd1c:	4b4d      	ldr	r3, [pc, #308]	; (800be54 <xTaskIncrementTick+0x14c>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	3301      	adds	r3, #1
 800bd22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bd24:	4a4b      	ldr	r2, [pc, #300]	; (800be54 <xTaskIncrementTick+0x14c>)
 800bd26:	693b      	ldr	r3, [r7, #16]
 800bd28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d120      	bne.n	800bd72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bd30:	4b49      	ldr	r3, [pc, #292]	; (800be58 <xTaskIncrementTick+0x150>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d00a      	beq.n	800bd50 <xTaskIncrementTick+0x48>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	603b      	str	r3, [r7, #0]
}
 800bd4c:	bf00      	nop
 800bd4e:	e7fe      	b.n	800bd4e <xTaskIncrementTick+0x46>
 800bd50:	4b41      	ldr	r3, [pc, #260]	; (800be58 <xTaskIncrementTick+0x150>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	60fb      	str	r3, [r7, #12]
 800bd56:	4b41      	ldr	r3, [pc, #260]	; (800be5c <xTaskIncrementTick+0x154>)
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4a3f      	ldr	r2, [pc, #252]	; (800be58 <xTaskIncrementTick+0x150>)
 800bd5c:	6013      	str	r3, [r2, #0]
 800bd5e:	4a3f      	ldr	r2, [pc, #252]	; (800be5c <xTaskIncrementTick+0x154>)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	6013      	str	r3, [r2, #0]
 800bd64:	4b3e      	ldr	r3, [pc, #248]	; (800be60 <xTaskIncrementTick+0x158>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	3301      	adds	r3, #1
 800bd6a:	4a3d      	ldr	r2, [pc, #244]	; (800be60 <xTaskIncrementTick+0x158>)
 800bd6c:	6013      	str	r3, [r2, #0]
 800bd6e:	f000 fad1 	bl	800c314 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd72:	4b3c      	ldr	r3, [pc, #240]	; (800be64 <xTaskIncrementTick+0x15c>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	693a      	ldr	r2, [r7, #16]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d349      	bcc.n	800be10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd7c:	4b36      	ldr	r3, [pc, #216]	; (800be58 <xTaskIncrementTick+0x150>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d104      	bne.n	800bd90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd86:	4b37      	ldr	r3, [pc, #220]	; (800be64 <xTaskIncrementTick+0x15c>)
 800bd88:	f04f 32ff 	mov.w	r2, #4294967295
 800bd8c:	601a      	str	r2, [r3, #0]
					break;
 800bd8e:	e03f      	b.n	800be10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd90:	4b31      	ldr	r3, [pc, #196]	; (800be58 <xTaskIncrementTick+0x150>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	68db      	ldr	r3, [r3, #12]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd9a:	68bb      	ldr	r3, [r7, #8]
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bda0:	693a      	ldr	r2, [r7, #16]
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d203      	bcs.n	800bdb0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bda8:	4a2e      	ldr	r2, [pc, #184]	; (800be64 <xTaskIncrementTick+0x15c>)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bdae:	e02f      	b.n	800be10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	3304      	adds	r3, #4
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7fe fecd 	bl	800ab54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d004      	beq.n	800bdcc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	3318      	adds	r3, #24
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7fe fec4 	bl	800ab54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdd0:	4b25      	ldr	r3, [pc, #148]	; (800be68 <xTaskIncrementTick+0x160>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d903      	bls.n	800bde0 <xTaskIncrementTick+0xd8>
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bddc:	4a22      	ldr	r2, [pc, #136]	; (800be68 <xTaskIncrementTick+0x160>)
 800bdde:	6013      	str	r3, [r2, #0]
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bde4:	4613      	mov	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	4413      	add	r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	4a1f      	ldr	r2, [pc, #124]	; (800be6c <xTaskIncrementTick+0x164>)
 800bdee:	441a      	add	r2, r3
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	3304      	adds	r3, #4
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	4610      	mov	r0, r2
 800bdf8:	f7fe fe4f 	bl	800aa9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be00:	4b1b      	ldr	r3, [pc, #108]	; (800be70 <xTaskIncrementTick+0x168>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be06:	429a      	cmp	r2, r3
 800be08:	d3b8      	bcc.n	800bd7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800be0a:	2301      	movs	r3, #1
 800be0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be0e:	e7b5      	b.n	800bd7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800be10:	4b17      	ldr	r3, [pc, #92]	; (800be70 <xTaskIncrementTick+0x168>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be16:	4915      	ldr	r1, [pc, #84]	; (800be6c <xTaskIncrementTick+0x164>)
 800be18:	4613      	mov	r3, r2
 800be1a:	009b      	lsls	r3, r3, #2
 800be1c:	4413      	add	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	440b      	add	r3, r1
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b01      	cmp	r3, #1
 800be26:	d901      	bls.n	800be2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800be28:	2301      	movs	r3, #1
 800be2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800be2c:	4b11      	ldr	r3, [pc, #68]	; (800be74 <xTaskIncrementTick+0x16c>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d007      	beq.n	800be44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800be34:	2301      	movs	r3, #1
 800be36:	617b      	str	r3, [r7, #20]
 800be38:	e004      	b.n	800be44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800be3a:	4b0f      	ldr	r3, [pc, #60]	; (800be78 <xTaskIncrementTick+0x170>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	3301      	adds	r3, #1
 800be40:	4a0d      	ldr	r2, [pc, #52]	; (800be78 <xTaskIncrementTick+0x170>)
 800be42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800be44:	697b      	ldr	r3, [r7, #20]
}
 800be46:	4618      	mov	r0, r3
 800be48:	3718      	adds	r7, #24
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	20001038 	.word	0x20001038
 800be54:	20001014 	.word	0x20001014
 800be58:	20000fc8 	.word	0x20000fc8
 800be5c:	20000fcc 	.word	0x20000fcc
 800be60:	20001028 	.word	0x20001028
 800be64:	20001030 	.word	0x20001030
 800be68:	20001018 	.word	0x20001018
 800be6c:	20000b40 	.word	0x20000b40
 800be70:	20000b3c 	.word	0x20000b3c
 800be74:	20001024 	.word	0x20001024
 800be78:	20001020 	.word	0x20001020

0800be7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be82:	4b28      	ldr	r3, [pc, #160]	; (800bf24 <vTaskSwitchContext+0xa8>)
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d003      	beq.n	800be92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be8a:	4b27      	ldr	r3, [pc, #156]	; (800bf28 <vTaskSwitchContext+0xac>)
 800be8c:	2201      	movs	r2, #1
 800be8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800be90:	e041      	b.n	800bf16 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800be92:	4b25      	ldr	r3, [pc, #148]	; (800bf28 <vTaskSwitchContext+0xac>)
 800be94:	2200      	movs	r2, #0
 800be96:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be98:	4b24      	ldr	r3, [pc, #144]	; (800bf2c <vTaskSwitchContext+0xb0>)
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	60fb      	str	r3, [r7, #12]
 800be9e:	e010      	b.n	800bec2 <vTaskSwitchContext+0x46>
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d10a      	bne.n	800bebc <vTaskSwitchContext+0x40>
	__asm volatile
 800bea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beaa:	f383 8811 	msr	BASEPRI, r3
 800beae:	f3bf 8f6f 	isb	sy
 800beb2:	f3bf 8f4f 	dsb	sy
 800beb6:	607b      	str	r3, [r7, #4]
}
 800beb8:	bf00      	nop
 800beba:	e7fe      	b.n	800beba <vTaskSwitchContext+0x3e>
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	3b01      	subs	r3, #1
 800bec0:	60fb      	str	r3, [r7, #12]
 800bec2:	491b      	ldr	r1, [pc, #108]	; (800bf30 <vTaskSwitchContext+0xb4>)
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	4613      	mov	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	440b      	add	r3, r1
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d0e4      	beq.n	800bea0 <vTaskSwitchContext+0x24>
 800bed6:	68fa      	ldr	r2, [r7, #12]
 800bed8:	4613      	mov	r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4413      	add	r3, r2
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4a13      	ldr	r2, [pc, #76]	; (800bf30 <vTaskSwitchContext+0xb4>)
 800bee2:	4413      	add	r3, r2
 800bee4:	60bb      	str	r3, [r7, #8]
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	685b      	ldr	r3, [r3, #4]
 800beea:	685a      	ldr	r2, [r3, #4]
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	605a      	str	r2, [r3, #4]
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	685a      	ldr	r2, [r3, #4]
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	3308      	adds	r3, #8
 800bef8:	429a      	cmp	r2, r3
 800befa:	d104      	bne.n	800bf06 <vTaskSwitchContext+0x8a>
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	685b      	ldr	r3, [r3, #4]
 800bf00:	685a      	ldr	r2, [r3, #4]
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	605a      	str	r2, [r3, #4]
 800bf06:	68bb      	ldr	r3, [r7, #8]
 800bf08:	685b      	ldr	r3, [r3, #4]
 800bf0a:	68db      	ldr	r3, [r3, #12]
 800bf0c:	4a09      	ldr	r2, [pc, #36]	; (800bf34 <vTaskSwitchContext+0xb8>)
 800bf0e:	6013      	str	r3, [r2, #0]
 800bf10:	4a06      	ldr	r2, [pc, #24]	; (800bf2c <vTaskSwitchContext+0xb0>)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	6013      	str	r3, [r2, #0]
}
 800bf16:	bf00      	nop
 800bf18:	3714      	adds	r7, #20
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	20001038 	.word	0x20001038
 800bf28:	20001024 	.word	0x20001024
 800bf2c:	20001018 	.word	0x20001018
 800bf30:	20000b40 	.word	0x20000b40
 800bf34:	20000b3c 	.word	0x20000b3c

0800bf38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b084      	sub	sp, #16
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
 800bf40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d10a      	bne.n	800bf5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bf48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4c:	f383 8811 	msr	BASEPRI, r3
 800bf50:	f3bf 8f6f 	isb	sy
 800bf54:	f3bf 8f4f 	dsb	sy
 800bf58:	60fb      	str	r3, [r7, #12]
}
 800bf5a:	bf00      	nop
 800bf5c:	e7fe      	b.n	800bf5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf5e:	4b07      	ldr	r3, [pc, #28]	; (800bf7c <vTaskPlaceOnEventList+0x44>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	3318      	adds	r3, #24
 800bf64:	4619      	mov	r1, r3
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f7fe fdbb 	bl	800aae2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf6c:	2101      	movs	r1, #1
 800bf6e:	6838      	ldr	r0, [r7, #0]
 800bf70:	f000 fa7c 	bl	800c46c <prvAddCurrentTaskToDelayedList>
}
 800bf74:	bf00      	nop
 800bf76:	3710      	adds	r7, #16
 800bf78:	46bd      	mov	sp, r7
 800bf7a:	bd80      	pop	{r7, pc}
 800bf7c:	20000b3c 	.word	0x20000b3c

0800bf80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10a      	bne.n	800bfa8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	617b      	str	r3, [r7, #20]
}
 800bfa4:	bf00      	nop
 800bfa6:	e7fe      	b.n	800bfa6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bfa8:	4b0a      	ldr	r3, [pc, #40]	; (800bfd4 <vTaskPlaceOnEventListRestricted+0x54>)
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	3318      	adds	r3, #24
 800bfae:	4619      	mov	r1, r3
 800bfb0:	68f8      	ldr	r0, [r7, #12]
 800bfb2:	f7fe fd72 	bl	800aa9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d002      	beq.n	800bfc2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bfbc:	f04f 33ff 	mov.w	r3, #4294967295
 800bfc0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bfc2:	6879      	ldr	r1, [r7, #4]
 800bfc4:	68b8      	ldr	r0, [r7, #8]
 800bfc6:	f000 fa51 	bl	800c46c <prvAddCurrentTaskToDelayedList>
	}
 800bfca:	bf00      	nop
 800bfcc:	3718      	adds	r7, #24
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	20000b3c 	.word	0x20000b3c

0800bfd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b086      	sub	sp, #24
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10a      	bne.n	800c004 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	60fb      	str	r3, [r7, #12]
}
 800c000:	bf00      	nop
 800c002:	e7fe      	b.n	800c002 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	3318      	adds	r3, #24
 800c008:	4618      	mov	r0, r3
 800c00a:	f7fe fda3 	bl	800ab54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c00e:	4b1e      	ldr	r3, [pc, #120]	; (800c088 <xTaskRemoveFromEventList+0xb0>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d11d      	bne.n	800c052 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c016:	693b      	ldr	r3, [r7, #16]
 800c018:	3304      	adds	r3, #4
 800c01a:	4618      	mov	r0, r3
 800c01c:	f7fe fd9a 	bl	800ab54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c024:	4b19      	ldr	r3, [pc, #100]	; (800c08c <xTaskRemoveFromEventList+0xb4>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d903      	bls.n	800c034 <xTaskRemoveFromEventList+0x5c>
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c030:	4a16      	ldr	r2, [pc, #88]	; (800c08c <xTaskRemoveFromEventList+0xb4>)
 800c032:	6013      	str	r3, [r2, #0]
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c038:	4613      	mov	r3, r2
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	4413      	add	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4a13      	ldr	r2, [pc, #76]	; (800c090 <xTaskRemoveFromEventList+0xb8>)
 800c042:	441a      	add	r2, r3
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	3304      	adds	r3, #4
 800c048:	4619      	mov	r1, r3
 800c04a:	4610      	mov	r0, r2
 800c04c:	f7fe fd25 	bl	800aa9a <vListInsertEnd>
 800c050:	e005      	b.n	800c05e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	3318      	adds	r3, #24
 800c056:	4619      	mov	r1, r3
 800c058:	480e      	ldr	r0, [pc, #56]	; (800c094 <xTaskRemoveFromEventList+0xbc>)
 800c05a:	f7fe fd1e 	bl	800aa9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c062:	4b0d      	ldr	r3, [pc, #52]	; (800c098 <xTaskRemoveFromEventList+0xc0>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c068:	429a      	cmp	r2, r3
 800c06a:	d905      	bls.n	800c078 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c06c:	2301      	movs	r3, #1
 800c06e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c070:	4b0a      	ldr	r3, [pc, #40]	; (800c09c <xTaskRemoveFromEventList+0xc4>)
 800c072:	2201      	movs	r2, #1
 800c074:	601a      	str	r2, [r3, #0]
 800c076:	e001      	b.n	800c07c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c078:	2300      	movs	r3, #0
 800c07a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c07c:	697b      	ldr	r3, [r7, #20]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	20001038 	.word	0x20001038
 800c08c:	20001018 	.word	0x20001018
 800c090:	20000b40 	.word	0x20000b40
 800c094:	20000fd0 	.word	0x20000fd0
 800c098:	20000b3c 	.word	0x20000b3c
 800c09c:	20001024 	.word	0x20001024

0800c0a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c0a8:	4b06      	ldr	r3, [pc, #24]	; (800c0c4 <vTaskInternalSetTimeOutState+0x24>)
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c0b0:	4b05      	ldr	r3, [pc, #20]	; (800c0c8 <vTaskInternalSetTimeOutState+0x28>)
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	605a      	str	r2, [r3, #4]
}
 800c0b8:	bf00      	nop
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr
 800c0c4:	20001028 	.word	0x20001028
 800c0c8:	20001014 	.word	0x20001014

0800c0cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b088      	sub	sp, #32
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d10a      	bne.n	800c0f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0e0:	f383 8811 	msr	BASEPRI, r3
 800c0e4:	f3bf 8f6f 	isb	sy
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	613b      	str	r3, [r7, #16]
}
 800c0ee:	bf00      	nop
 800c0f0:	e7fe      	b.n	800c0f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d10a      	bne.n	800c10e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fc:	f383 8811 	msr	BASEPRI, r3
 800c100:	f3bf 8f6f 	isb	sy
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	60fb      	str	r3, [r7, #12]
}
 800c10a:	bf00      	nop
 800c10c:	e7fe      	b.n	800c10c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c10e:	f000 fe79 	bl	800ce04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c112:	4b1d      	ldr	r3, [pc, #116]	; (800c188 <xTaskCheckForTimeOut+0xbc>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	69ba      	ldr	r2, [r7, #24]
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c122:	683b      	ldr	r3, [r7, #0]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c12a:	d102      	bne.n	800c132 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c12c:	2300      	movs	r3, #0
 800c12e:	61fb      	str	r3, [r7, #28]
 800c130:	e023      	b.n	800c17a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	681a      	ldr	r2, [r3, #0]
 800c136:	4b15      	ldr	r3, [pc, #84]	; (800c18c <xTaskCheckForTimeOut+0xc0>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d007      	beq.n	800c14e <xTaskCheckForTimeOut+0x82>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	69ba      	ldr	r2, [r7, #24]
 800c144:	429a      	cmp	r2, r3
 800c146:	d302      	bcc.n	800c14e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c148:	2301      	movs	r3, #1
 800c14a:	61fb      	str	r3, [r7, #28]
 800c14c:	e015      	b.n	800c17a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c14e:	683b      	ldr	r3, [r7, #0]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	697a      	ldr	r2, [r7, #20]
 800c154:	429a      	cmp	r2, r3
 800c156:	d20b      	bcs.n	800c170 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c158:	683b      	ldr	r3, [r7, #0]
 800c15a:	681a      	ldr	r2, [r3, #0]
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	1ad2      	subs	r2, r2, r3
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c164:	6878      	ldr	r0, [r7, #4]
 800c166:	f7ff ff9b 	bl	800c0a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c16a:	2300      	movs	r3, #0
 800c16c:	61fb      	str	r3, [r7, #28]
 800c16e:	e004      	b.n	800c17a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c170:	683b      	ldr	r3, [r7, #0]
 800c172:	2200      	movs	r2, #0
 800c174:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c176:	2301      	movs	r3, #1
 800c178:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c17a:	f000 fe73 	bl	800ce64 <vPortExitCritical>

	return xReturn;
 800c17e:	69fb      	ldr	r3, [r7, #28]
}
 800c180:	4618      	mov	r0, r3
 800c182:	3720      	adds	r7, #32
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}
 800c188:	20001014 	.word	0x20001014
 800c18c:	20001028 	.word	0x20001028

0800c190 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c190:	b480      	push	{r7}
 800c192:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c194:	4b03      	ldr	r3, [pc, #12]	; (800c1a4 <vTaskMissedYield+0x14>)
 800c196:	2201      	movs	r2, #1
 800c198:	601a      	str	r2, [r3, #0]
}
 800c19a:	bf00      	nop
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr
 800c1a4:	20001024 	.word	0x20001024

0800c1a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c1a8:	b580      	push	{r7, lr}
 800c1aa:	b082      	sub	sp, #8
 800c1ac:	af00      	add	r7, sp, #0
 800c1ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c1b0:	f000 f852 	bl	800c258 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c1b4:	4b06      	ldr	r3, [pc, #24]	; (800c1d0 <prvIdleTask+0x28>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d9f9      	bls.n	800c1b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c1bc:	4b05      	ldr	r3, [pc, #20]	; (800c1d4 <prvIdleTask+0x2c>)
 800c1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1c2:	601a      	str	r2, [r3, #0]
 800c1c4:	f3bf 8f4f 	dsb	sy
 800c1c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c1cc:	e7f0      	b.n	800c1b0 <prvIdleTask+0x8>
 800c1ce:	bf00      	nop
 800c1d0:	20000b40 	.word	0x20000b40
 800c1d4:	e000ed04 	.word	0xe000ed04

0800c1d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c1de:	2300      	movs	r3, #0
 800c1e0:	607b      	str	r3, [r7, #4]
 800c1e2:	e00c      	b.n	800c1fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	009b      	lsls	r3, r3, #2
 800c1ea:	4413      	add	r3, r2
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	4a12      	ldr	r2, [pc, #72]	; (800c238 <prvInitialiseTaskLists+0x60>)
 800c1f0:	4413      	add	r3, r2
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fe fc24 	bl	800aa40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	3301      	adds	r3, #1
 800c1fc:	607b      	str	r3, [r7, #4]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b37      	cmp	r3, #55	; 0x37
 800c202:	d9ef      	bls.n	800c1e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c204:	480d      	ldr	r0, [pc, #52]	; (800c23c <prvInitialiseTaskLists+0x64>)
 800c206:	f7fe fc1b 	bl	800aa40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c20a:	480d      	ldr	r0, [pc, #52]	; (800c240 <prvInitialiseTaskLists+0x68>)
 800c20c:	f7fe fc18 	bl	800aa40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c210:	480c      	ldr	r0, [pc, #48]	; (800c244 <prvInitialiseTaskLists+0x6c>)
 800c212:	f7fe fc15 	bl	800aa40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c216:	480c      	ldr	r0, [pc, #48]	; (800c248 <prvInitialiseTaskLists+0x70>)
 800c218:	f7fe fc12 	bl	800aa40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c21c:	480b      	ldr	r0, [pc, #44]	; (800c24c <prvInitialiseTaskLists+0x74>)
 800c21e:	f7fe fc0f 	bl	800aa40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c222:	4b0b      	ldr	r3, [pc, #44]	; (800c250 <prvInitialiseTaskLists+0x78>)
 800c224:	4a05      	ldr	r2, [pc, #20]	; (800c23c <prvInitialiseTaskLists+0x64>)
 800c226:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c228:	4b0a      	ldr	r3, [pc, #40]	; (800c254 <prvInitialiseTaskLists+0x7c>)
 800c22a:	4a05      	ldr	r2, [pc, #20]	; (800c240 <prvInitialiseTaskLists+0x68>)
 800c22c:	601a      	str	r2, [r3, #0]
}
 800c22e:	bf00      	nop
 800c230:	3708      	adds	r7, #8
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	20000b40 	.word	0x20000b40
 800c23c:	20000fa0 	.word	0x20000fa0
 800c240:	20000fb4 	.word	0x20000fb4
 800c244:	20000fd0 	.word	0x20000fd0
 800c248:	20000fe4 	.word	0x20000fe4
 800c24c:	20000ffc 	.word	0x20000ffc
 800c250:	20000fc8 	.word	0x20000fc8
 800c254:	20000fcc 	.word	0x20000fcc

0800c258 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c25e:	e019      	b.n	800c294 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c260:	f000 fdd0 	bl	800ce04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c264:	4b10      	ldr	r3, [pc, #64]	; (800c2a8 <prvCheckTasksWaitingTermination+0x50>)
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	68db      	ldr	r3, [r3, #12]
 800c26a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	3304      	adds	r3, #4
 800c270:	4618      	mov	r0, r3
 800c272:	f7fe fc6f 	bl	800ab54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c276:	4b0d      	ldr	r3, [pc, #52]	; (800c2ac <prvCheckTasksWaitingTermination+0x54>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	3b01      	subs	r3, #1
 800c27c:	4a0b      	ldr	r2, [pc, #44]	; (800c2ac <prvCheckTasksWaitingTermination+0x54>)
 800c27e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c280:	4b0b      	ldr	r3, [pc, #44]	; (800c2b0 <prvCheckTasksWaitingTermination+0x58>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	3b01      	subs	r3, #1
 800c286:	4a0a      	ldr	r2, [pc, #40]	; (800c2b0 <prvCheckTasksWaitingTermination+0x58>)
 800c288:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c28a:	f000 fdeb 	bl	800ce64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f810 	bl	800c2b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c294:	4b06      	ldr	r3, [pc, #24]	; (800c2b0 <prvCheckTasksWaitingTermination+0x58>)
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1e1      	bne.n	800c260 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c29c:	bf00      	nop
 800c29e:	bf00      	nop
 800c2a0:	3708      	adds	r7, #8
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	bd80      	pop	{r7, pc}
 800c2a6:	bf00      	nop
 800c2a8:	20000fe4 	.word	0x20000fe4
 800c2ac:	20001010 	.word	0x20001010
 800c2b0:	20000ff8 	.word	0x20000ff8

0800c2b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d108      	bne.n	800c2d8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	f000 ff88 	bl	800d1e0 <vPortFree>
				vPortFree( pxTCB );
 800c2d0:	6878      	ldr	r0, [r7, #4]
 800c2d2:	f000 ff85 	bl	800d1e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c2d6:	e018      	b.n	800c30a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d103      	bne.n	800c2ea <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f000 ff7c 	bl	800d1e0 <vPortFree>
	}
 800c2e8:	e00f      	b.n	800c30a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800c2f0:	2b02      	cmp	r3, #2
 800c2f2:	d00a      	beq.n	800c30a <prvDeleteTCB+0x56>
	__asm volatile
 800c2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2f8:	f383 8811 	msr	BASEPRI, r3
 800c2fc:	f3bf 8f6f 	isb	sy
 800c300:	f3bf 8f4f 	dsb	sy
 800c304:	60fb      	str	r3, [r7, #12]
}
 800c306:	bf00      	nop
 800c308:	e7fe      	b.n	800c308 <prvDeleteTCB+0x54>
	}
 800c30a:	bf00      	nop
 800c30c:	3710      	adds	r7, #16
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}
	...

0800c314 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c314:	b480      	push	{r7}
 800c316:	b083      	sub	sp, #12
 800c318:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c31a:	4b0c      	ldr	r3, [pc, #48]	; (800c34c <prvResetNextTaskUnblockTime+0x38>)
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d104      	bne.n	800c32e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c324:	4b0a      	ldr	r3, [pc, #40]	; (800c350 <prvResetNextTaskUnblockTime+0x3c>)
 800c326:	f04f 32ff 	mov.w	r2, #4294967295
 800c32a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c32c:	e008      	b.n	800c340 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c32e:	4b07      	ldr	r3, [pc, #28]	; (800c34c <prvResetNextTaskUnblockTime+0x38>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68db      	ldr	r3, [r3, #12]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	685b      	ldr	r3, [r3, #4]
 800c33c:	4a04      	ldr	r2, [pc, #16]	; (800c350 <prvResetNextTaskUnblockTime+0x3c>)
 800c33e:	6013      	str	r3, [r2, #0]
}
 800c340:	bf00      	nop
 800c342:	370c      	adds	r7, #12
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr
 800c34c:	20000fc8 	.word	0x20000fc8
 800c350:	20001030 	.word	0x20001030

0800c354 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c354:	b480      	push	{r7}
 800c356:	b083      	sub	sp, #12
 800c358:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c35a:	4b0b      	ldr	r3, [pc, #44]	; (800c388 <xTaskGetSchedulerState+0x34>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d102      	bne.n	800c368 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c362:	2301      	movs	r3, #1
 800c364:	607b      	str	r3, [r7, #4]
 800c366:	e008      	b.n	800c37a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c368:	4b08      	ldr	r3, [pc, #32]	; (800c38c <xTaskGetSchedulerState+0x38>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d102      	bne.n	800c376 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c370:	2302      	movs	r3, #2
 800c372:	607b      	str	r3, [r7, #4]
 800c374:	e001      	b.n	800c37a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c376:	2300      	movs	r3, #0
 800c378:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c37a:	687b      	ldr	r3, [r7, #4]
	}
 800c37c:	4618      	mov	r0, r3
 800c37e:	370c      	adds	r7, #12
 800c380:	46bd      	mov	sp, r7
 800c382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c386:	4770      	bx	lr
 800c388:	2000101c 	.word	0x2000101c
 800c38c:	20001038 	.word	0x20001038

0800c390 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c390:	b580      	push	{r7, lr}
 800c392:	b086      	sub	sp, #24
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c39c:	2300      	movs	r3, #0
 800c39e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d056      	beq.n	800c454 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c3a6:	4b2e      	ldr	r3, [pc, #184]	; (800c460 <xTaskPriorityDisinherit+0xd0>)
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	693a      	ldr	r2, [r7, #16]
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d00a      	beq.n	800c3c6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c3b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	60fb      	str	r3, [r7, #12]
}
 800c3c2:	bf00      	nop
 800c3c4:	e7fe      	b.n	800c3c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c3c6:	693b      	ldr	r3, [r7, #16]
 800c3c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10a      	bne.n	800c3e4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c3ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3d2:	f383 8811 	msr	BASEPRI, r3
 800c3d6:	f3bf 8f6f 	isb	sy
 800c3da:	f3bf 8f4f 	dsb	sy
 800c3de:	60bb      	str	r3, [r7, #8]
}
 800c3e0:	bf00      	nop
 800c3e2:	e7fe      	b.n	800c3e2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3e8:	1e5a      	subs	r2, r3, #1
 800c3ea:	693b      	ldr	r3, [r7, #16]
 800c3ec:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d02c      	beq.n	800c454 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d128      	bne.n	800c454 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	3304      	adds	r3, #4
 800c406:	4618      	mov	r0, r3
 800c408:	f7fe fba4 	bl	800ab54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c40c:	693b      	ldr	r3, [r7, #16]
 800c40e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c410:	693b      	ldr	r3, [r7, #16]
 800c412:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c418:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c41c:	693b      	ldr	r3, [r7, #16]
 800c41e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c424:	4b0f      	ldr	r3, [pc, #60]	; (800c464 <xTaskPriorityDisinherit+0xd4>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	429a      	cmp	r2, r3
 800c42a:	d903      	bls.n	800c434 <xTaskPriorityDisinherit+0xa4>
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c430:	4a0c      	ldr	r2, [pc, #48]	; (800c464 <xTaskPriorityDisinherit+0xd4>)
 800c432:	6013      	str	r3, [r2, #0]
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c438:	4613      	mov	r3, r2
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	4413      	add	r3, r2
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	4a09      	ldr	r2, [pc, #36]	; (800c468 <xTaskPriorityDisinherit+0xd8>)
 800c442:	441a      	add	r2, r3
 800c444:	693b      	ldr	r3, [r7, #16]
 800c446:	3304      	adds	r3, #4
 800c448:	4619      	mov	r1, r3
 800c44a:	4610      	mov	r0, r2
 800c44c:	f7fe fb25 	bl	800aa9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c450:	2301      	movs	r3, #1
 800c452:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c454:	697b      	ldr	r3, [r7, #20]
	}
 800c456:	4618      	mov	r0, r3
 800c458:	3718      	adds	r7, #24
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}
 800c45e:	bf00      	nop
 800c460:	20000b3c 	.word	0x20000b3c
 800c464:	20001018 	.word	0x20001018
 800c468:	20000b40 	.word	0x20000b40

0800c46c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
 800c474:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c476:	4b21      	ldr	r3, [pc, #132]	; (800c4fc <prvAddCurrentTaskToDelayedList+0x90>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c47c:	4b20      	ldr	r3, [pc, #128]	; (800c500 <prvAddCurrentTaskToDelayedList+0x94>)
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	3304      	adds	r3, #4
 800c482:	4618      	mov	r0, r3
 800c484:	f7fe fb66 	bl	800ab54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c48e:	d10a      	bne.n	800c4a6 <prvAddCurrentTaskToDelayedList+0x3a>
 800c490:	683b      	ldr	r3, [r7, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d007      	beq.n	800c4a6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c496:	4b1a      	ldr	r3, [pc, #104]	; (800c500 <prvAddCurrentTaskToDelayedList+0x94>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	3304      	adds	r3, #4
 800c49c:	4619      	mov	r1, r3
 800c49e:	4819      	ldr	r0, [pc, #100]	; (800c504 <prvAddCurrentTaskToDelayedList+0x98>)
 800c4a0:	f7fe fafb 	bl	800aa9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c4a4:	e026      	b.n	800c4f4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c4a6:	68fa      	ldr	r2, [r7, #12]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4413      	add	r3, r2
 800c4ac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c4ae:	4b14      	ldr	r3, [pc, #80]	; (800c500 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	68ba      	ldr	r2, [r7, #8]
 800c4b4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c4b6:	68ba      	ldr	r2, [r7, #8]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d209      	bcs.n	800c4d2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4be:	4b12      	ldr	r3, [pc, #72]	; (800c508 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c4c0:	681a      	ldr	r2, [r3, #0]
 800c4c2:	4b0f      	ldr	r3, [pc, #60]	; (800c500 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	4619      	mov	r1, r3
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	f7fe fb09 	bl	800aae2 <vListInsert>
}
 800c4d0:	e010      	b.n	800c4f4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4d2:	4b0e      	ldr	r3, [pc, #56]	; (800c50c <prvAddCurrentTaskToDelayedList+0xa0>)
 800c4d4:	681a      	ldr	r2, [r3, #0]
 800c4d6:	4b0a      	ldr	r3, [pc, #40]	; (800c500 <prvAddCurrentTaskToDelayedList+0x94>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	3304      	adds	r3, #4
 800c4dc:	4619      	mov	r1, r3
 800c4de:	4610      	mov	r0, r2
 800c4e0:	f7fe faff 	bl	800aae2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c4e4:	4b0a      	ldr	r3, [pc, #40]	; (800c510 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	68ba      	ldr	r2, [r7, #8]
 800c4ea:	429a      	cmp	r2, r3
 800c4ec:	d202      	bcs.n	800c4f4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c4ee:	4a08      	ldr	r2, [pc, #32]	; (800c510 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	6013      	str	r3, [r2, #0]
}
 800c4f4:	bf00      	nop
 800c4f6:	3710      	adds	r7, #16
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	20001014 	.word	0x20001014
 800c500:	20000b3c 	.word	0x20000b3c
 800c504:	20000ffc 	.word	0x20000ffc
 800c508:	20000fcc 	.word	0x20000fcc
 800c50c:	20000fc8 	.word	0x20000fc8
 800c510:	20001030 	.word	0x20001030

0800c514 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b08a      	sub	sp, #40	; 0x28
 800c518:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c51a:	2300      	movs	r3, #0
 800c51c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c51e:	f000 fb07 	bl	800cb30 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c522:	4b1c      	ldr	r3, [pc, #112]	; (800c594 <xTimerCreateTimerTask+0x80>)
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d021      	beq.n	800c56e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c52a:	2300      	movs	r3, #0
 800c52c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c52e:	2300      	movs	r3, #0
 800c530:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c532:	1d3a      	adds	r2, r7, #4
 800c534:	f107 0108 	add.w	r1, r7, #8
 800c538:	f107 030c 	add.w	r3, r7, #12
 800c53c:	4618      	mov	r0, r3
 800c53e:	f7fe fa65 	bl	800aa0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c542:	6879      	ldr	r1, [r7, #4]
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	68fa      	ldr	r2, [r7, #12]
 800c548:	9202      	str	r2, [sp, #8]
 800c54a:	9301      	str	r3, [sp, #4]
 800c54c:	2302      	movs	r3, #2
 800c54e:	9300      	str	r3, [sp, #0]
 800c550:	2300      	movs	r3, #0
 800c552:	460a      	mov	r2, r1
 800c554:	4910      	ldr	r1, [pc, #64]	; (800c598 <xTimerCreateTimerTask+0x84>)
 800c556:	4811      	ldr	r0, [pc, #68]	; (800c59c <xTimerCreateTimerTask+0x88>)
 800c558:	f7ff f8cc 	bl	800b6f4 <xTaskCreateStatic>
 800c55c:	4603      	mov	r3, r0
 800c55e:	4a10      	ldr	r2, [pc, #64]	; (800c5a0 <xTimerCreateTimerTask+0x8c>)
 800c560:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c562:	4b0f      	ldr	r3, [pc, #60]	; (800c5a0 <xTimerCreateTimerTask+0x8c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d001      	beq.n	800c56e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c56a:	2301      	movs	r3, #1
 800c56c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c56e:	697b      	ldr	r3, [r7, #20]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d10a      	bne.n	800c58a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c574:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c578:	f383 8811 	msr	BASEPRI, r3
 800c57c:	f3bf 8f6f 	isb	sy
 800c580:	f3bf 8f4f 	dsb	sy
 800c584:	613b      	str	r3, [r7, #16]
}
 800c586:	bf00      	nop
 800c588:	e7fe      	b.n	800c588 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c58a:	697b      	ldr	r3, [r7, #20]
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	2000106c 	.word	0x2000106c
 800c598:	0800dea8 	.word	0x0800dea8
 800c59c:	0800c6d9 	.word	0x0800c6d9
 800c5a0:	20001070 	.word	0x20001070

0800c5a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b08a      	sub	sp, #40	; 0x28
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	60f8      	str	r0, [r7, #12]
 800c5ac:	60b9      	str	r1, [r7, #8]
 800c5ae:	607a      	str	r2, [r7, #4]
 800c5b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d10a      	bne.n	800c5d2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800c5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c0:	f383 8811 	msr	BASEPRI, r3
 800c5c4:	f3bf 8f6f 	isb	sy
 800c5c8:	f3bf 8f4f 	dsb	sy
 800c5cc:	623b      	str	r3, [r7, #32]
}
 800c5ce:	bf00      	nop
 800c5d0:	e7fe      	b.n	800c5d0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c5d2:	4b1a      	ldr	r3, [pc, #104]	; (800c63c <xTimerGenericCommand+0x98>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d02a      	beq.n	800c630 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	2b05      	cmp	r3, #5
 800c5ea:	dc18      	bgt.n	800c61e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c5ec:	f7ff feb2 	bl	800c354 <xTaskGetSchedulerState>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	d109      	bne.n	800c60a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c5f6:	4b11      	ldr	r3, [pc, #68]	; (800c63c <xTimerGenericCommand+0x98>)
 800c5f8:	6818      	ldr	r0, [r3, #0]
 800c5fa:	f107 0110 	add.w	r1, r7, #16
 800c5fe:	2300      	movs	r3, #0
 800c600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c602:	f7fe fc0f 	bl	800ae24 <xQueueGenericSend>
 800c606:	6278      	str	r0, [r7, #36]	; 0x24
 800c608:	e012      	b.n	800c630 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c60a:	4b0c      	ldr	r3, [pc, #48]	; (800c63c <xTimerGenericCommand+0x98>)
 800c60c:	6818      	ldr	r0, [r3, #0]
 800c60e:	f107 0110 	add.w	r1, r7, #16
 800c612:	2300      	movs	r3, #0
 800c614:	2200      	movs	r2, #0
 800c616:	f7fe fc05 	bl	800ae24 <xQueueGenericSend>
 800c61a:	6278      	str	r0, [r7, #36]	; 0x24
 800c61c:	e008      	b.n	800c630 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c61e:	4b07      	ldr	r3, [pc, #28]	; (800c63c <xTimerGenericCommand+0x98>)
 800c620:	6818      	ldr	r0, [r3, #0]
 800c622:	f107 0110 	add.w	r1, r7, #16
 800c626:	2300      	movs	r3, #0
 800c628:	683a      	ldr	r2, [r7, #0]
 800c62a:	f7fe fcf9 	bl	800b020 <xQueueGenericSendFromISR>
 800c62e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c632:	4618      	mov	r0, r3
 800c634:	3728      	adds	r7, #40	; 0x28
 800c636:	46bd      	mov	sp, r7
 800c638:	bd80      	pop	{r7, pc}
 800c63a:	bf00      	nop
 800c63c:	2000106c 	.word	0x2000106c

0800c640 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b088      	sub	sp, #32
 800c644:	af02      	add	r7, sp, #8
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c64a:	4b22      	ldr	r3, [pc, #136]	; (800c6d4 <prvProcessExpiredTimer+0x94>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	68db      	ldr	r3, [r3, #12]
 800c652:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c654:	697b      	ldr	r3, [r7, #20]
 800c656:	3304      	adds	r3, #4
 800c658:	4618      	mov	r0, r3
 800c65a:	f7fe fa7b 	bl	800ab54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c664:	f003 0304 	and.w	r3, r3, #4
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d022      	beq.n	800c6b2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	699a      	ldr	r2, [r3, #24]
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	18d1      	adds	r1, r2, r3
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	683a      	ldr	r2, [r7, #0]
 800c678:	6978      	ldr	r0, [r7, #20]
 800c67a:	f000 f8d1 	bl	800c820 <prvInsertTimerInActiveList>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d01f      	beq.n	800c6c4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c684:	2300      	movs	r3, #0
 800c686:	9300      	str	r3, [sp, #0]
 800c688:	2300      	movs	r3, #0
 800c68a:	687a      	ldr	r2, [r7, #4]
 800c68c:	2100      	movs	r1, #0
 800c68e:	6978      	ldr	r0, [r7, #20]
 800c690:	f7ff ff88 	bl	800c5a4 <xTimerGenericCommand>
 800c694:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d113      	bne.n	800c6c4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c69c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6a0:	f383 8811 	msr	BASEPRI, r3
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	60fb      	str	r3, [r7, #12]
}
 800c6ae:	bf00      	nop
 800c6b0:	e7fe      	b.n	800c6b0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c6b8:	f023 0301 	bic.w	r3, r3, #1
 800c6bc:	b2da      	uxtb	r2, r3
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	6a1b      	ldr	r3, [r3, #32]
 800c6c8:	6978      	ldr	r0, [r7, #20]
 800c6ca:	4798      	blx	r3
}
 800c6cc:	bf00      	nop
 800c6ce:	3718      	adds	r7, #24
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	20001064 	.word	0x20001064

0800c6d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6e0:	f107 0308 	add.w	r3, r7, #8
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f000 f857 	bl	800c798 <prvGetNextExpireTime>
 800c6ea:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c6ec:	68bb      	ldr	r3, [r7, #8]
 800c6ee:	4619      	mov	r1, r3
 800c6f0:	68f8      	ldr	r0, [r7, #12]
 800c6f2:	f000 f803 	bl	800c6fc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c6f6:	f000 f8d5 	bl	800c8a4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c6fa:	e7f1      	b.n	800c6e0 <prvTimerTask+0x8>

0800c6fc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c706:	f7ff fa31 	bl	800bb6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c70a:	f107 0308 	add.w	r3, r7, #8
 800c70e:	4618      	mov	r0, r3
 800c710:	f000 f866 	bl	800c7e0 <prvSampleTimeNow>
 800c714:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d130      	bne.n	800c77e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d10a      	bne.n	800c738 <prvProcessTimerOrBlockTask+0x3c>
 800c722:	687a      	ldr	r2, [r7, #4]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	429a      	cmp	r2, r3
 800c728:	d806      	bhi.n	800c738 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c72a:	f7ff fa2d 	bl	800bb88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c72e:	68f9      	ldr	r1, [r7, #12]
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f7ff ff85 	bl	800c640 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c736:	e024      	b.n	800c782 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d008      	beq.n	800c750 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c73e:	4b13      	ldr	r3, [pc, #76]	; (800c78c <prvProcessTimerOrBlockTask+0x90>)
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d101      	bne.n	800c74c <prvProcessTimerOrBlockTask+0x50>
 800c748:	2301      	movs	r3, #1
 800c74a:	e000      	b.n	800c74e <prvProcessTimerOrBlockTask+0x52>
 800c74c:	2300      	movs	r3, #0
 800c74e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c750:	4b0f      	ldr	r3, [pc, #60]	; (800c790 <prvProcessTimerOrBlockTask+0x94>)
 800c752:	6818      	ldr	r0, [r3, #0]
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	1ad3      	subs	r3, r2, r3
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	4619      	mov	r1, r3
 800c75e:	f7fe ff95 	bl	800b68c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c762:	f7ff fa11 	bl	800bb88 <xTaskResumeAll>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d10a      	bne.n	800c782 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c76c:	4b09      	ldr	r3, [pc, #36]	; (800c794 <prvProcessTimerOrBlockTask+0x98>)
 800c76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c772:	601a      	str	r2, [r3, #0]
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	f3bf 8f6f 	isb	sy
}
 800c77c:	e001      	b.n	800c782 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c77e:	f7ff fa03 	bl	800bb88 <xTaskResumeAll>
}
 800c782:	bf00      	nop
 800c784:	3710      	adds	r7, #16
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}
 800c78a:	bf00      	nop
 800c78c:	20001068 	.word	0x20001068
 800c790:	2000106c 	.word	0x2000106c
 800c794:	e000ed04 	.word	0xe000ed04

0800c798 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c798:	b480      	push	{r7}
 800c79a:	b085      	sub	sp, #20
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c7a0:	4b0e      	ldr	r3, [pc, #56]	; (800c7dc <prvGetNextExpireTime+0x44>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d101      	bne.n	800c7ae <prvGetNextExpireTime+0x16>
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	e000      	b.n	800c7b0 <prvGetNextExpireTime+0x18>
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d105      	bne.n	800c7c8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c7bc:	4b07      	ldr	r3, [pc, #28]	; (800c7dc <prvGetNextExpireTime+0x44>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	68db      	ldr	r3, [r3, #12]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	60fb      	str	r3, [r7, #12]
 800c7c6:	e001      	b.n	800c7cc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	3714      	adds	r7, #20
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr
 800c7da:	bf00      	nop
 800c7dc:	20001064 	.word	0x20001064

0800c7e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b084      	sub	sp, #16
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c7e8:	f7ff fa6c 	bl	800bcc4 <xTaskGetTickCount>
 800c7ec:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c7ee:	4b0b      	ldr	r3, [pc, #44]	; (800c81c <prvSampleTimeNow+0x3c>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	68fa      	ldr	r2, [r7, #12]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d205      	bcs.n	800c804 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c7f8:	f000 f936 	bl	800ca68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2201      	movs	r2, #1
 800c800:	601a      	str	r2, [r3, #0]
 800c802:	e002      	b.n	800c80a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2200      	movs	r2, #0
 800c808:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c80a:	4a04      	ldr	r2, [pc, #16]	; (800c81c <prvSampleTimeNow+0x3c>)
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c810:	68fb      	ldr	r3, [r7, #12]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3710      	adds	r7, #16
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	20001074 	.word	0x20001074

0800c820 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b086      	sub	sp, #24
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	60b9      	str	r1, [r7, #8]
 800c82a:	607a      	str	r2, [r7, #4]
 800c82c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c82e:	2300      	movs	r3, #0
 800c830:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	68ba      	ldr	r2, [r7, #8]
 800c836:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	68fa      	ldr	r2, [r7, #12]
 800c83c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c83e:	68ba      	ldr	r2, [r7, #8]
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	429a      	cmp	r2, r3
 800c844:	d812      	bhi.n	800c86c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c846:	687a      	ldr	r2, [r7, #4]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	1ad2      	subs	r2, r2, r3
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	699b      	ldr	r3, [r3, #24]
 800c850:	429a      	cmp	r2, r3
 800c852:	d302      	bcc.n	800c85a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c854:	2301      	movs	r3, #1
 800c856:	617b      	str	r3, [r7, #20]
 800c858:	e01b      	b.n	800c892 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c85a:	4b10      	ldr	r3, [pc, #64]	; (800c89c <prvInsertTimerInActiveList+0x7c>)
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3304      	adds	r3, #4
 800c862:	4619      	mov	r1, r3
 800c864:	4610      	mov	r0, r2
 800c866:	f7fe f93c 	bl	800aae2 <vListInsert>
 800c86a:	e012      	b.n	800c892 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c86c:	687a      	ldr	r2, [r7, #4]
 800c86e:	683b      	ldr	r3, [r7, #0]
 800c870:	429a      	cmp	r2, r3
 800c872:	d206      	bcs.n	800c882 <prvInsertTimerInActiveList+0x62>
 800c874:	68ba      	ldr	r2, [r7, #8]
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	429a      	cmp	r2, r3
 800c87a:	d302      	bcc.n	800c882 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c87c:	2301      	movs	r3, #1
 800c87e:	617b      	str	r3, [r7, #20]
 800c880:	e007      	b.n	800c892 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c882:	4b07      	ldr	r3, [pc, #28]	; (800c8a0 <prvInsertTimerInActiveList+0x80>)
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	3304      	adds	r3, #4
 800c88a:	4619      	mov	r1, r3
 800c88c:	4610      	mov	r0, r2
 800c88e:	f7fe f928 	bl	800aae2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c892:	697b      	ldr	r3, [r7, #20]
}
 800c894:	4618      	mov	r0, r3
 800c896:	3718      	adds	r7, #24
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}
 800c89c:	20001068 	.word	0x20001068
 800c8a0:	20001064 	.word	0x20001064

0800c8a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c8a4:	b580      	push	{r7, lr}
 800c8a6:	b08e      	sub	sp, #56	; 0x38
 800c8a8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8aa:	e0ca      	b.n	800ca42 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	da18      	bge.n	800c8e4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c8b2:	1d3b      	adds	r3, r7, #4
 800c8b4:	3304      	adds	r3, #4
 800c8b6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d10a      	bne.n	800c8d4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8c2:	f383 8811 	msr	BASEPRI, r3
 800c8c6:	f3bf 8f6f 	isb	sy
 800c8ca:	f3bf 8f4f 	dsb	sy
 800c8ce:	61fb      	str	r3, [r7, #28]
}
 800c8d0:	bf00      	nop
 800c8d2:	e7fe      	b.n	800c8d2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8da:	6850      	ldr	r0, [r2, #4]
 800c8dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8de:	6892      	ldr	r2, [r2, #8]
 800c8e0:	4611      	mov	r1, r2
 800c8e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	f2c0 80aa 	blt.w	800ca40 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f2:	695b      	ldr	r3, [r3, #20]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d004      	beq.n	800c902 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fa:	3304      	adds	r3, #4
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f7fe f929 	bl	800ab54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c902:	463b      	mov	r3, r7
 800c904:	4618      	mov	r0, r3
 800c906:	f7ff ff6b 	bl	800c7e0 <prvSampleTimeNow>
 800c90a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b09      	cmp	r3, #9
 800c910:	f200 8097 	bhi.w	800ca42 <prvProcessReceivedCommands+0x19e>
 800c914:	a201      	add	r2, pc, #4	; (adr r2, 800c91c <prvProcessReceivedCommands+0x78>)
 800c916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c91a:	bf00      	nop
 800c91c:	0800c945 	.word	0x0800c945
 800c920:	0800c945 	.word	0x0800c945
 800c924:	0800c945 	.word	0x0800c945
 800c928:	0800c9b9 	.word	0x0800c9b9
 800c92c:	0800c9cd 	.word	0x0800c9cd
 800c930:	0800ca17 	.word	0x0800ca17
 800c934:	0800c945 	.word	0x0800c945
 800c938:	0800c945 	.word	0x0800c945
 800c93c:	0800c9b9 	.word	0x0800c9b9
 800c940:	0800c9cd 	.word	0x0800c9cd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c94a:	f043 0301 	orr.w	r3, r3, #1
 800c94e:	b2da      	uxtb	r2, r3
 800c950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c956:	68ba      	ldr	r2, [r7, #8]
 800c958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c95a:	699b      	ldr	r3, [r3, #24]
 800c95c:	18d1      	adds	r1, r2, r3
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c962:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c964:	f7ff ff5c 	bl	800c820 <prvInsertTimerInActiveList>
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d069      	beq.n	800ca42 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c970:	6a1b      	ldr	r3, [r3, #32]
 800c972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c974:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c97c:	f003 0304 	and.w	r3, r3, #4
 800c980:	2b00      	cmp	r3, #0
 800c982:	d05e      	beq.n	800ca42 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c984:	68ba      	ldr	r2, [r7, #8]
 800c986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c988:	699b      	ldr	r3, [r3, #24]
 800c98a:	441a      	add	r2, r3
 800c98c:	2300      	movs	r3, #0
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	2300      	movs	r3, #0
 800c992:	2100      	movs	r1, #0
 800c994:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c996:	f7ff fe05 	bl	800c5a4 <xTimerGenericCommand>
 800c99a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c99c:	6a3b      	ldr	r3, [r7, #32]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d14f      	bne.n	800ca42 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c9a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a6:	f383 8811 	msr	BASEPRI, r3
 800c9aa:	f3bf 8f6f 	isb	sy
 800c9ae:	f3bf 8f4f 	dsb	sy
 800c9b2:	61bb      	str	r3, [r7, #24]
}
 800c9b4:	bf00      	nop
 800c9b6:	e7fe      	b.n	800c9b6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9be:	f023 0301 	bic.w	r3, r3, #1
 800c9c2:	b2da      	uxtb	r2, r3
 800c9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c9ca:	e03a      	b.n	800ca42 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c9d2:	f043 0301 	orr.w	r3, r3, #1
 800c9d6:	b2da      	uxtb	r2, r3
 800c9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c9de:	68ba      	ldr	r2, [r7, #8]
 800c9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e6:	699b      	ldr	r3, [r3, #24]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d10a      	bne.n	800ca02 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f0:	f383 8811 	msr	BASEPRI, r3
 800c9f4:	f3bf 8f6f 	isb	sy
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	617b      	str	r3, [r7, #20]
}
 800c9fe:	bf00      	nop
 800ca00:	e7fe      	b.n	800ca00 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ca02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca04:	699a      	ldr	r2, [r3, #24]
 800ca06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca08:	18d1      	adds	r1, r2, r3
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca10:	f7ff ff06 	bl	800c820 <prvInsertTimerInActiveList>
					break;
 800ca14:	e015      	b.n	800ca42 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ca16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca1c:	f003 0302 	and.w	r3, r3, #2
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d103      	bne.n	800ca2c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ca24:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca26:	f000 fbdb 	bl	800d1e0 <vPortFree>
 800ca2a:	e00a      	b.n	800ca42 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ca2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca32:	f023 0301 	bic.w	r3, r3, #1
 800ca36:	b2da      	uxtb	r2, r3
 800ca38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ca3e:	e000      	b.n	800ca42 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ca40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca42:	4b08      	ldr	r3, [pc, #32]	; (800ca64 <prvProcessReceivedCommands+0x1c0>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	1d39      	adds	r1, r7, #4
 800ca48:	2200      	movs	r2, #0
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f7fe fb84 	bl	800b158 <xQueueReceive>
 800ca50:	4603      	mov	r3, r0
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	f47f af2a 	bne.w	800c8ac <prvProcessReceivedCommands+0x8>
	}
}
 800ca58:	bf00      	nop
 800ca5a:	bf00      	nop
 800ca5c:	3730      	adds	r7, #48	; 0x30
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	2000106c 	.word	0x2000106c

0800ca68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	b088      	sub	sp, #32
 800ca6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca6e:	e048      	b.n	800cb02 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ca70:	4b2d      	ldr	r3, [pc, #180]	; (800cb28 <prvSwitchTimerLists+0xc0>)
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca7a:	4b2b      	ldr	r3, [pc, #172]	; (800cb28 <prvSwitchTimerLists+0xc0>)
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	3304      	adds	r3, #4
 800ca88:	4618      	mov	r0, r3
 800ca8a:	f7fe f863 	bl	800ab54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	6a1b      	ldr	r3, [r3, #32]
 800ca92:	68f8      	ldr	r0, [r7, #12]
 800ca94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ca9c:	f003 0304 	and.w	r3, r3, #4
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d02e      	beq.n	800cb02 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	699b      	ldr	r3, [r3, #24]
 800caa8:	693a      	ldr	r2, [r7, #16]
 800caaa:	4413      	add	r3, r2
 800caac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800caae:	68ba      	ldr	r2, [r7, #8]
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d90e      	bls.n	800cad4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	68ba      	ldr	r2, [r7, #8]
 800caba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	68fa      	ldr	r2, [r7, #12]
 800cac0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cac2:	4b19      	ldr	r3, [pc, #100]	; (800cb28 <prvSwitchTimerLists+0xc0>)
 800cac4:	681a      	ldr	r2, [r3, #0]
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	3304      	adds	r3, #4
 800caca:	4619      	mov	r1, r3
 800cacc:	4610      	mov	r0, r2
 800cace:	f7fe f808 	bl	800aae2 <vListInsert>
 800cad2:	e016      	b.n	800cb02 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cad4:	2300      	movs	r3, #0
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	2300      	movs	r3, #0
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	2100      	movs	r1, #0
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f7ff fd60 	bl	800c5a4 <xTimerGenericCommand>
 800cae4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d10a      	bne.n	800cb02 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800caec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caf0:	f383 8811 	msr	BASEPRI, r3
 800caf4:	f3bf 8f6f 	isb	sy
 800caf8:	f3bf 8f4f 	dsb	sy
 800cafc:	603b      	str	r3, [r7, #0]
}
 800cafe:	bf00      	nop
 800cb00:	e7fe      	b.n	800cb00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cb02:	4b09      	ldr	r3, [pc, #36]	; (800cb28 <prvSwitchTimerLists+0xc0>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d1b1      	bne.n	800ca70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800cb0c:	4b06      	ldr	r3, [pc, #24]	; (800cb28 <prvSwitchTimerLists+0xc0>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cb12:	4b06      	ldr	r3, [pc, #24]	; (800cb2c <prvSwitchTimerLists+0xc4>)
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	4a04      	ldr	r2, [pc, #16]	; (800cb28 <prvSwitchTimerLists+0xc0>)
 800cb18:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cb1a:	4a04      	ldr	r2, [pc, #16]	; (800cb2c <prvSwitchTimerLists+0xc4>)
 800cb1c:	697b      	ldr	r3, [r7, #20]
 800cb1e:	6013      	str	r3, [r2, #0]
}
 800cb20:	bf00      	nop
 800cb22:	3718      	adds	r7, #24
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	20001064 	.word	0x20001064
 800cb2c:	20001068 	.word	0x20001068

0800cb30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cb36:	f000 f965 	bl	800ce04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cb3a:	4b15      	ldr	r3, [pc, #84]	; (800cb90 <prvCheckForValidListAndQueue+0x60>)
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d120      	bne.n	800cb84 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cb42:	4814      	ldr	r0, [pc, #80]	; (800cb94 <prvCheckForValidListAndQueue+0x64>)
 800cb44:	f7fd ff7c 	bl	800aa40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cb48:	4813      	ldr	r0, [pc, #76]	; (800cb98 <prvCheckForValidListAndQueue+0x68>)
 800cb4a:	f7fd ff79 	bl	800aa40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cb4e:	4b13      	ldr	r3, [pc, #76]	; (800cb9c <prvCheckForValidListAndQueue+0x6c>)
 800cb50:	4a10      	ldr	r2, [pc, #64]	; (800cb94 <prvCheckForValidListAndQueue+0x64>)
 800cb52:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cb54:	4b12      	ldr	r3, [pc, #72]	; (800cba0 <prvCheckForValidListAndQueue+0x70>)
 800cb56:	4a10      	ldr	r2, [pc, #64]	; (800cb98 <prvCheckForValidListAndQueue+0x68>)
 800cb58:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	9300      	str	r3, [sp, #0]
 800cb5e:	4b11      	ldr	r3, [pc, #68]	; (800cba4 <prvCheckForValidListAndQueue+0x74>)
 800cb60:	4a11      	ldr	r2, [pc, #68]	; (800cba8 <prvCheckForValidListAndQueue+0x78>)
 800cb62:	2110      	movs	r1, #16
 800cb64:	200a      	movs	r0, #10
 800cb66:	f7fe f887 	bl	800ac78 <xQueueGenericCreateStatic>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	4a08      	ldr	r2, [pc, #32]	; (800cb90 <prvCheckForValidListAndQueue+0x60>)
 800cb6e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cb70:	4b07      	ldr	r3, [pc, #28]	; (800cb90 <prvCheckForValidListAndQueue+0x60>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d005      	beq.n	800cb84 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cb78:	4b05      	ldr	r3, [pc, #20]	; (800cb90 <prvCheckForValidListAndQueue+0x60>)
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	490b      	ldr	r1, [pc, #44]	; (800cbac <prvCheckForValidListAndQueue+0x7c>)
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fe fd5a 	bl	800b638 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb84:	f000 f96e 	bl	800ce64 <vPortExitCritical>
}
 800cb88:	bf00      	nop
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	2000106c 	.word	0x2000106c
 800cb94:	2000103c 	.word	0x2000103c
 800cb98:	20001050 	.word	0x20001050
 800cb9c:	20001064 	.word	0x20001064
 800cba0:	20001068 	.word	0x20001068
 800cba4:	20001118 	.word	0x20001118
 800cba8:	20001078 	.word	0x20001078
 800cbac:	0800deb0 	.word	0x0800deb0

0800cbb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cbb0:	b480      	push	{r7}
 800cbb2:	b085      	sub	sp, #20
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60f8      	str	r0, [r7, #12]
 800cbb8:	60b9      	str	r1, [r7, #8]
 800cbba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	3b04      	subs	r3, #4
 800cbc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800cbc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	3b04      	subs	r3, #4
 800cbce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	f023 0201 	bic.w	r2, r3, #1
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	3b04      	subs	r3, #4
 800cbde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cbe0:	4a0c      	ldr	r2, [pc, #48]	; (800cc14 <pxPortInitialiseStack+0x64>)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	3b14      	subs	r3, #20
 800cbea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	3b04      	subs	r3, #4
 800cbf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	f06f 0202 	mvn.w	r2, #2
 800cbfe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	3b20      	subs	r3, #32
 800cc04:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc06:	68fb      	ldr	r3, [r7, #12]
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3714      	adds	r7, #20
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc12:	4770      	bx	lr
 800cc14:	0800cc19 	.word	0x0800cc19

0800cc18 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cc22:	4b12      	ldr	r3, [pc, #72]	; (800cc6c <prvTaskExitError+0x54>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc2a:	d00a      	beq.n	800cc42 <prvTaskExitError+0x2a>
	__asm volatile
 800cc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc30:	f383 8811 	msr	BASEPRI, r3
 800cc34:	f3bf 8f6f 	isb	sy
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	60fb      	str	r3, [r7, #12]
}
 800cc3e:	bf00      	nop
 800cc40:	e7fe      	b.n	800cc40 <prvTaskExitError+0x28>
	__asm volatile
 800cc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc46:	f383 8811 	msr	BASEPRI, r3
 800cc4a:	f3bf 8f6f 	isb	sy
 800cc4e:	f3bf 8f4f 	dsb	sy
 800cc52:	60bb      	str	r3, [r7, #8]
}
 800cc54:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cc56:	bf00      	nop
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d0fc      	beq.n	800cc58 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cc5e:	bf00      	nop
 800cc60:	bf00      	nop
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr
 800cc6c:	20000098 	.word	0x20000098

0800cc70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cc70:	4b07      	ldr	r3, [pc, #28]	; (800cc90 <pxCurrentTCBConst2>)
 800cc72:	6819      	ldr	r1, [r3, #0]
 800cc74:	6808      	ldr	r0, [r1, #0]
 800cc76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7a:	f380 8809 	msr	PSP, r0
 800cc7e:	f3bf 8f6f 	isb	sy
 800cc82:	f04f 0000 	mov.w	r0, #0
 800cc86:	f380 8811 	msr	BASEPRI, r0
 800cc8a:	4770      	bx	lr
 800cc8c:	f3af 8000 	nop.w

0800cc90 <pxCurrentTCBConst2>:
 800cc90:	20000b3c 	.word	0x20000b3c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop

0800cc98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cc98:	4808      	ldr	r0, [pc, #32]	; (800ccbc <prvPortStartFirstTask+0x24>)
 800cc9a:	6800      	ldr	r0, [r0, #0]
 800cc9c:	6800      	ldr	r0, [r0, #0]
 800cc9e:	f380 8808 	msr	MSP, r0
 800cca2:	f04f 0000 	mov.w	r0, #0
 800cca6:	f380 8814 	msr	CONTROL, r0
 800ccaa:	b662      	cpsie	i
 800ccac:	b661      	cpsie	f
 800ccae:	f3bf 8f4f 	dsb	sy
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	df00      	svc	0
 800ccb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ccba:	bf00      	nop
 800ccbc:	e000ed08 	.word	0xe000ed08

0800ccc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ccc6:	4b46      	ldr	r3, [pc, #280]	; (800cde0 <xPortStartScheduler+0x120>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	4a46      	ldr	r2, [pc, #280]	; (800cde4 <xPortStartScheduler+0x124>)
 800cccc:	4293      	cmp	r3, r2
 800ccce:	d10a      	bne.n	800cce6 <xPortStartScheduler+0x26>
	__asm volatile
 800ccd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd4:	f383 8811 	msr	BASEPRI, r3
 800ccd8:	f3bf 8f6f 	isb	sy
 800ccdc:	f3bf 8f4f 	dsb	sy
 800cce0:	613b      	str	r3, [r7, #16]
}
 800cce2:	bf00      	nop
 800cce4:	e7fe      	b.n	800cce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cce6:	4b3e      	ldr	r3, [pc, #248]	; (800cde0 <xPortStartScheduler+0x120>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	4a3f      	ldr	r2, [pc, #252]	; (800cde8 <xPortStartScheduler+0x128>)
 800ccec:	4293      	cmp	r3, r2
 800ccee:	d10a      	bne.n	800cd06 <xPortStartScheduler+0x46>
	__asm volatile
 800ccf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf4:	f383 8811 	msr	BASEPRI, r3
 800ccf8:	f3bf 8f6f 	isb	sy
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	60fb      	str	r3, [r7, #12]
}
 800cd02:	bf00      	nop
 800cd04:	e7fe      	b.n	800cd04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cd06:	4b39      	ldr	r3, [pc, #228]	; (800cdec <xPortStartScheduler+0x12c>)
 800cd08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	781b      	ldrb	r3, [r3, #0]
 800cd0e:	b2db      	uxtb	r3, r3
 800cd10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	22ff      	movs	r2, #255	; 0xff
 800cd16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cd18:	697b      	ldr	r3, [r7, #20]
 800cd1a:	781b      	ldrb	r3, [r3, #0]
 800cd1c:	b2db      	uxtb	r3, r3
 800cd1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cd20:	78fb      	ldrb	r3, [r7, #3]
 800cd22:	b2db      	uxtb	r3, r3
 800cd24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cd28:	b2da      	uxtb	r2, r3
 800cd2a:	4b31      	ldr	r3, [pc, #196]	; (800cdf0 <xPortStartScheduler+0x130>)
 800cd2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cd2e:	4b31      	ldr	r3, [pc, #196]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd30:	2207      	movs	r2, #7
 800cd32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd34:	e009      	b.n	800cd4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cd36:	4b2f      	ldr	r3, [pc, #188]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	3b01      	subs	r3, #1
 800cd3c:	4a2d      	ldr	r2, [pc, #180]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cd40:	78fb      	ldrb	r3, [r7, #3]
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	005b      	lsls	r3, r3, #1
 800cd46:	b2db      	uxtb	r3, r3
 800cd48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cd4a:	78fb      	ldrb	r3, [r7, #3]
 800cd4c:	b2db      	uxtb	r3, r3
 800cd4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cd52:	2b80      	cmp	r3, #128	; 0x80
 800cd54:	d0ef      	beq.n	800cd36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cd56:	4b27      	ldr	r3, [pc, #156]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f1c3 0307 	rsb	r3, r3, #7
 800cd5e:	2b04      	cmp	r3, #4
 800cd60:	d00a      	beq.n	800cd78 <xPortStartScheduler+0xb8>
	__asm volatile
 800cd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd66:	f383 8811 	msr	BASEPRI, r3
 800cd6a:	f3bf 8f6f 	isb	sy
 800cd6e:	f3bf 8f4f 	dsb	sy
 800cd72:	60bb      	str	r3, [r7, #8]
}
 800cd74:	bf00      	nop
 800cd76:	e7fe      	b.n	800cd76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cd78:	4b1e      	ldr	r3, [pc, #120]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	021b      	lsls	r3, r3, #8
 800cd7e:	4a1d      	ldr	r2, [pc, #116]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cd82:	4b1c      	ldr	r3, [pc, #112]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cd8a:	4a1a      	ldr	r2, [pc, #104]	; (800cdf4 <xPortStartScheduler+0x134>)
 800cd8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	b2da      	uxtb	r2, r3
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cd96:	4b18      	ldr	r3, [pc, #96]	; (800cdf8 <xPortStartScheduler+0x138>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a17      	ldr	r2, [pc, #92]	; (800cdf8 <xPortStartScheduler+0x138>)
 800cd9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cda0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cda2:	4b15      	ldr	r3, [pc, #84]	; (800cdf8 <xPortStartScheduler+0x138>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	4a14      	ldr	r2, [pc, #80]	; (800cdf8 <xPortStartScheduler+0x138>)
 800cda8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cdac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cdae:	f000 f8dd 	bl	800cf6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cdb2:	4b12      	ldr	r3, [pc, #72]	; (800cdfc <xPortStartScheduler+0x13c>)
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cdb8:	f000 f8fc 	bl	800cfb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cdbc:	4b10      	ldr	r3, [pc, #64]	; (800ce00 <xPortStartScheduler+0x140>)
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	4a0f      	ldr	r2, [pc, #60]	; (800ce00 <xPortStartScheduler+0x140>)
 800cdc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cdc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cdc8:	f7ff ff66 	bl	800cc98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cdcc:	f7ff f856 	bl	800be7c <vTaskSwitchContext>
	prvTaskExitError();
 800cdd0:	f7ff ff22 	bl	800cc18 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cdd4:	2300      	movs	r3, #0
}
 800cdd6:	4618      	mov	r0, r3
 800cdd8:	3718      	adds	r7, #24
 800cdda:	46bd      	mov	sp, r7
 800cddc:	bd80      	pop	{r7, pc}
 800cdde:	bf00      	nop
 800cde0:	e000ed00 	.word	0xe000ed00
 800cde4:	410fc271 	.word	0x410fc271
 800cde8:	410fc270 	.word	0x410fc270
 800cdec:	e000e400 	.word	0xe000e400
 800cdf0:	20001168 	.word	0x20001168
 800cdf4:	2000116c 	.word	0x2000116c
 800cdf8:	e000ed20 	.word	0xe000ed20
 800cdfc:	20000098 	.word	0x20000098
 800ce00:	e000ef34 	.word	0xe000ef34

0800ce04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
	__asm volatile
 800ce0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0e:	f383 8811 	msr	BASEPRI, r3
 800ce12:	f3bf 8f6f 	isb	sy
 800ce16:	f3bf 8f4f 	dsb	sy
 800ce1a:	607b      	str	r3, [r7, #4]
}
 800ce1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ce1e:	4b0f      	ldr	r3, [pc, #60]	; (800ce5c <vPortEnterCritical+0x58>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	3301      	adds	r3, #1
 800ce24:	4a0d      	ldr	r2, [pc, #52]	; (800ce5c <vPortEnterCritical+0x58>)
 800ce26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ce28:	4b0c      	ldr	r3, [pc, #48]	; (800ce5c <vPortEnterCritical+0x58>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d10f      	bne.n	800ce50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ce30:	4b0b      	ldr	r3, [pc, #44]	; (800ce60 <vPortEnterCritical+0x5c>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d00a      	beq.n	800ce50 <vPortEnterCritical+0x4c>
	__asm volatile
 800ce3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3e:	f383 8811 	msr	BASEPRI, r3
 800ce42:	f3bf 8f6f 	isb	sy
 800ce46:	f3bf 8f4f 	dsb	sy
 800ce4a:	603b      	str	r3, [r7, #0]
}
 800ce4c:	bf00      	nop
 800ce4e:	e7fe      	b.n	800ce4e <vPortEnterCritical+0x4a>
	}
}
 800ce50:	bf00      	nop
 800ce52:	370c      	adds	r7, #12
 800ce54:	46bd      	mov	sp, r7
 800ce56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5a:	4770      	bx	lr
 800ce5c:	20000098 	.word	0x20000098
 800ce60:	e000ed04 	.word	0xe000ed04

0800ce64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ce64:	b480      	push	{r7}
 800ce66:	b083      	sub	sp, #12
 800ce68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ce6a:	4b12      	ldr	r3, [pc, #72]	; (800ceb4 <vPortExitCritical+0x50>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d10a      	bne.n	800ce88 <vPortExitCritical+0x24>
	__asm volatile
 800ce72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	607b      	str	r3, [r7, #4]
}
 800ce84:	bf00      	nop
 800ce86:	e7fe      	b.n	800ce86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ce88:	4b0a      	ldr	r3, [pc, #40]	; (800ceb4 <vPortExitCritical+0x50>)
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	4a09      	ldr	r2, [pc, #36]	; (800ceb4 <vPortExitCritical+0x50>)
 800ce90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ce92:	4b08      	ldr	r3, [pc, #32]	; (800ceb4 <vPortExitCritical+0x50>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d105      	bne.n	800cea6 <vPortExitCritical+0x42>
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	f383 8811 	msr	BASEPRI, r3
}
 800cea4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cea6:	bf00      	nop
 800cea8:	370c      	adds	r7, #12
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	20000098 	.word	0x20000098
	...

0800cec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cec0:	f3ef 8009 	mrs	r0, PSP
 800cec4:	f3bf 8f6f 	isb	sy
 800cec8:	4b15      	ldr	r3, [pc, #84]	; (800cf20 <pxCurrentTCBConst>)
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	f01e 0f10 	tst.w	lr, #16
 800ced0:	bf08      	it	eq
 800ced2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ced6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceda:	6010      	str	r0, [r2, #0]
 800cedc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cee4:	f380 8811 	msr	BASEPRI, r0
 800cee8:	f3bf 8f4f 	dsb	sy
 800ceec:	f3bf 8f6f 	isb	sy
 800cef0:	f7fe ffc4 	bl	800be7c <vTaskSwitchContext>
 800cef4:	f04f 0000 	mov.w	r0, #0
 800cef8:	f380 8811 	msr	BASEPRI, r0
 800cefc:	bc09      	pop	{r0, r3}
 800cefe:	6819      	ldr	r1, [r3, #0]
 800cf00:	6808      	ldr	r0, [r1, #0]
 800cf02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf06:	f01e 0f10 	tst.w	lr, #16
 800cf0a:	bf08      	it	eq
 800cf0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cf10:	f380 8809 	msr	PSP, r0
 800cf14:	f3bf 8f6f 	isb	sy
 800cf18:	4770      	bx	lr
 800cf1a:	bf00      	nop
 800cf1c:	f3af 8000 	nop.w

0800cf20 <pxCurrentTCBConst>:
 800cf20:	20000b3c 	.word	0x20000b3c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cf24:	bf00      	nop
 800cf26:	bf00      	nop

0800cf28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
	__asm volatile
 800cf2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf32:	f383 8811 	msr	BASEPRI, r3
 800cf36:	f3bf 8f6f 	isb	sy
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	607b      	str	r3, [r7, #4]
}
 800cf40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cf42:	f7fe fee1 	bl	800bd08 <xTaskIncrementTick>
 800cf46:	4603      	mov	r3, r0
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d003      	beq.n	800cf54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cf4c:	4b06      	ldr	r3, [pc, #24]	; (800cf68 <xPortSysTickHandler+0x40>)
 800cf4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf52:	601a      	str	r2, [r3, #0]
 800cf54:	2300      	movs	r3, #0
 800cf56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	f383 8811 	msr	BASEPRI, r3
}
 800cf5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cf60:	bf00      	nop
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	e000ed04 	.word	0xe000ed04

0800cf6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cf70:	4b0b      	ldr	r3, [pc, #44]	; (800cfa0 <vPortSetupTimerInterrupt+0x34>)
 800cf72:	2200      	movs	r2, #0
 800cf74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cf76:	4b0b      	ldr	r3, [pc, #44]	; (800cfa4 <vPortSetupTimerInterrupt+0x38>)
 800cf78:	2200      	movs	r2, #0
 800cf7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cf7c:	4b0a      	ldr	r3, [pc, #40]	; (800cfa8 <vPortSetupTimerInterrupt+0x3c>)
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a0a      	ldr	r2, [pc, #40]	; (800cfac <vPortSetupTimerInterrupt+0x40>)
 800cf82:	fba2 2303 	umull	r2, r3, r2, r3
 800cf86:	099b      	lsrs	r3, r3, #6
 800cf88:	4a09      	ldr	r2, [pc, #36]	; (800cfb0 <vPortSetupTimerInterrupt+0x44>)
 800cf8a:	3b01      	subs	r3, #1
 800cf8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cf8e:	4b04      	ldr	r3, [pc, #16]	; (800cfa0 <vPortSetupTimerInterrupt+0x34>)
 800cf90:	2207      	movs	r2, #7
 800cf92:	601a      	str	r2, [r3, #0]
}
 800cf94:	bf00      	nop
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr
 800cf9e:	bf00      	nop
 800cfa0:	e000e010 	.word	0xe000e010
 800cfa4:	e000e018 	.word	0xe000e018
 800cfa8:	20000000 	.word	0x20000000
 800cfac:	10624dd3 	.word	0x10624dd3
 800cfb0:	e000e014 	.word	0xe000e014

0800cfb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cfb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cfc4 <vPortEnableVFP+0x10>
 800cfb8:	6801      	ldr	r1, [r0, #0]
 800cfba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cfbe:	6001      	str	r1, [r0, #0]
 800cfc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cfc2:	bf00      	nop
 800cfc4:	e000ed88 	.word	0xe000ed88

0800cfc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cfc8:	b480      	push	{r7}
 800cfca:	b085      	sub	sp, #20
 800cfcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cfce:	f3ef 8305 	mrs	r3, IPSR
 800cfd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	2b0f      	cmp	r3, #15
 800cfd8:	d914      	bls.n	800d004 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cfda:	4a17      	ldr	r2, [pc, #92]	; (800d038 <vPortValidateInterruptPriority+0x70>)
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	4413      	add	r3, r2
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cfe4:	4b15      	ldr	r3, [pc, #84]	; (800d03c <vPortValidateInterruptPriority+0x74>)
 800cfe6:	781b      	ldrb	r3, [r3, #0]
 800cfe8:	7afa      	ldrb	r2, [r7, #11]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d20a      	bcs.n	800d004 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff2:	f383 8811 	msr	BASEPRI, r3
 800cff6:	f3bf 8f6f 	isb	sy
 800cffa:	f3bf 8f4f 	dsb	sy
 800cffe:	607b      	str	r3, [r7, #4]
}
 800d000:	bf00      	nop
 800d002:	e7fe      	b.n	800d002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d004:	4b0e      	ldr	r3, [pc, #56]	; (800d040 <vPortValidateInterruptPriority+0x78>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800d00c:	4b0d      	ldr	r3, [pc, #52]	; (800d044 <vPortValidateInterruptPriority+0x7c>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	429a      	cmp	r2, r3
 800d012:	d90a      	bls.n	800d02a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800d014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d018:	f383 8811 	msr	BASEPRI, r3
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	f3bf 8f4f 	dsb	sy
 800d024:	603b      	str	r3, [r7, #0]
}
 800d026:	bf00      	nop
 800d028:	e7fe      	b.n	800d028 <vPortValidateInterruptPriority+0x60>
	}
 800d02a:	bf00      	nop
 800d02c:	3714      	adds	r7, #20
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr
 800d036:	bf00      	nop
 800d038:	e000e3f0 	.word	0xe000e3f0
 800d03c:	20001168 	.word	0x20001168
 800d040:	e000ed0c 	.word	0xe000ed0c
 800d044:	2000116c 	.word	0x2000116c

0800d048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b08a      	sub	sp, #40	; 0x28
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d050:	2300      	movs	r3, #0
 800d052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d054:	f7fe fd8a 	bl	800bb6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d058:	4b5b      	ldr	r3, [pc, #364]	; (800d1c8 <pvPortMalloc+0x180>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d101      	bne.n	800d064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d060:	f000 f920 	bl	800d2a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d064:	4b59      	ldr	r3, [pc, #356]	; (800d1cc <pvPortMalloc+0x184>)
 800d066:	681a      	ldr	r2, [r3, #0]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	4013      	ands	r3, r2
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	f040 8093 	bne.w	800d198 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d01d      	beq.n	800d0b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800d078:	2208      	movs	r2, #8
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	4413      	add	r3, r2
 800d07e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f003 0307 	and.w	r3, r3, #7
 800d086:	2b00      	cmp	r3, #0
 800d088:	d014      	beq.n	800d0b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f023 0307 	bic.w	r3, r3, #7
 800d090:	3308      	adds	r3, #8
 800d092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f003 0307 	and.w	r3, r3, #7
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00a      	beq.n	800d0b4 <pvPortMalloc+0x6c>
	__asm volatile
 800d09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0a2:	f383 8811 	msr	BASEPRI, r3
 800d0a6:	f3bf 8f6f 	isb	sy
 800d0aa:	f3bf 8f4f 	dsb	sy
 800d0ae:	617b      	str	r3, [r7, #20]
}
 800d0b0:	bf00      	nop
 800d0b2:	e7fe      	b.n	800d0b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d06e      	beq.n	800d198 <pvPortMalloc+0x150>
 800d0ba:	4b45      	ldr	r3, [pc, #276]	; (800d1d0 <pvPortMalloc+0x188>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d869      	bhi.n	800d198 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d0c4:	4b43      	ldr	r3, [pc, #268]	; (800d1d4 <pvPortMalloc+0x18c>)
 800d0c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d0c8:	4b42      	ldr	r3, [pc, #264]	; (800d1d4 <pvPortMalloc+0x18c>)
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0ce:	e004      	b.n	800d0da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800d0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	687a      	ldr	r2, [r7, #4]
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d903      	bls.n	800d0ec <pvPortMalloc+0xa4>
 800d0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d1f1      	bne.n	800d0d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d0ec:	4b36      	ldr	r3, [pc, #216]	; (800d1c8 <pvPortMalloc+0x180>)
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0f2:	429a      	cmp	r2, r3
 800d0f4:	d050      	beq.n	800d198 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d0f6:	6a3b      	ldr	r3, [r7, #32]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	2208      	movs	r2, #8
 800d0fc:	4413      	add	r3, r2
 800d0fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d102:	681a      	ldr	r2, [r3, #0]
 800d104:	6a3b      	ldr	r3, [r7, #32]
 800d106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10a:	685a      	ldr	r2, [r3, #4]
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	1ad2      	subs	r2, r2, r3
 800d110:	2308      	movs	r3, #8
 800d112:	005b      	lsls	r3, r3, #1
 800d114:	429a      	cmp	r2, r3
 800d116:	d91f      	bls.n	800d158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4413      	add	r3, r2
 800d11e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d120:	69bb      	ldr	r3, [r7, #24]
 800d122:	f003 0307 	and.w	r3, r3, #7
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00a      	beq.n	800d140 <pvPortMalloc+0xf8>
	__asm volatile
 800d12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d12e:	f383 8811 	msr	BASEPRI, r3
 800d132:	f3bf 8f6f 	isb	sy
 800d136:	f3bf 8f4f 	dsb	sy
 800d13a:	613b      	str	r3, [r7, #16]
}
 800d13c:	bf00      	nop
 800d13e:	e7fe      	b.n	800d13e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d142:	685a      	ldr	r2, [r3, #4]
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	1ad2      	subs	r2, r2, r3
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14e:	687a      	ldr	r2, [r7, #4]
 800d150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d152:	69b8      	ldr	r0, [r7, #24]
 800d154:	f000 f908 	bl	800d368 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d158:	4b1d      	ldr	r3, [pc, #116]	; (800d1d0 <pvPortMalloc+0x188>)
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	1ad3      	subs	r3, r2, r3
 800d162:	4a1b      	ldr	r2, [pc, #108]	; (800d1d0 <pvPortMalloc+0x188>)
 800d164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d166:	4b1a      	ldr	r3, [pc, #104]	; (800d1d0 <pvPortMalloc+0x188>)
 800d168:	681a      	ldr	r2, [r3, #0]
 800d16a:	4b1b      	ldr	r3, [pc, #108]	; (800d1d8 <pvPortMalloc+0x190>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	429a      	cmp	r2, r3
 800d170:	d203      	bcs.n	800d17a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d172:	4b17      	ldr	r3, [pc, #92]	; (800d1d0 <pvPortMalloc+0x188>)
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	4a18      	ldr	r2, [pc, #96]	; (800d1d8 <pvPortMalloc+0x190>)
 800d178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	685a      	ldr	r2, [r3, #4]
 800d17e:	4b13      	ldr	r3, [pc, #76]	; (800d1cc <pvPortMalloc+0x184>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	431a      	orrs	r2, r3
 800d184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18a:	2200      	movs	r2, #0
 800d18c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d18e:	4b13      	ldr	r3, [pc, #76]	; (800d1dc <pvPortMalloc+0x194>)
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	3301      	adds	r3, #1
 800d194:	4a11      	ldr	r2, [pc, #68]	; (800d1dc <pvPortMalloc+0x194>)
 800d196:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d198:	f7fe fcf6 	bl	800bb88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d19c:	69fb      	ldr	r3, [r7, #28]
 800d19e:	f003 0307 	and.w	r3, r3, #7
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d00a      	beq.n	800d1bc <pvPortMalloc+0x174>
	__asm volatile
 800d1a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1aa:	f383 8811 	msr	BASEPRI, r3
 800d1ae:	f3bf 8f6f 	isb	sy
 800d1b2:	f3bf 8f4f 	dsb	sy
 800d1b6:	60fb      	str	r3, [r7, #12]
}
 800d1b8:	bf00      	nop
 800d1ba:	e7fe      	b.n	800d1ba <pvPortMalloc+0x172>
	return pvReturn;
 800d1bc:	69fb      	ldr	r3, [r7, #28]
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3728      	adds	r7, #40	; 0x28
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	20004d78 	.word	0x20004d78
 800d1cc:	20004d8c 	.word	0x20004d8c
 800d1d0:	20004d7c 	.word	0x20004d7c
 800d1d4:	20004d70 	.word	0x20004d70
 800d1d8:	20004d80 	.word	0x20004d80
 800d1dc:	20004d84 	.word	0x20004d84

0800d1e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b086      	sub	sp, #24
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d04d      	beq.n	800d28e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d1f2:	2308      	movs	r3, #8
 800d1f4:	425b      	negs	r3, r3
 800d1f6:	697a      	ldr	r2, [r7, #20]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d200:	693b      	ldr	r3, [r7, #16]
 800d202:	685a      	ldr	r2, [r3, #4]
 800d204:	4b24      	ldr	r3, [pc, #144]	; (800d298 <vPortFree+0xb8>)
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4013      	ands	r3, r2
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d10a      	bne.n	800d224 <vPortFree+0x44>
	__asm volatile
 800d20e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d212:	f383 8811 	msr	BASEPRI, r3
 800d216:	f3bf 8f6f 	isb	sy
 800d21a:	f3bf 8f4f 	dsb	sy
 800d21e:	60fb      	str	r3, [r7, #12]
}
 800d220:	bf00      	nop
 800d222:	e7fe      	b.n	800d222 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d224:	693b      	ldr	r3, [r7, #16]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00a      	beq.n	800d242 <vPortFree+0x62>
	__asm volatile
 800d22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d230:	f383 8811 	msr	BASEPRI, r3
 800d234:	f3bf 8f6f 	isb	sy
 800d238:	f3bf 8f4f 	dsb	sy
 800d23c:	60bb      	str	r3, [r7, #8]
}
 800d23e:	bf00      	nop
 800d240:	e7fe      	b.n	800d240 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	685a      	ldr	r2, [r3, #4]
 800d246:	4b14      	ldr	r3, [pc, #80]	; (800d298 <vPortFree+0xb8>)
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4013      	ands	r3, r2
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d01e      	beq.n	800d28e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d11a      	bne.n	800d28e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	685a      	ldr	r2, [r3, #4]
 800d25c:	4b0e      	ldr	r3, [pc, #56]	; (800d298 <vPortFree+0xb8>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	43db      	mvns	r3, r3
 800d262:	401a      	ands	r2, r3
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d268:	f7fe fc80 	bl	800bb6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	685a      	ldr	r2, [r3, #4]
 800d270:	4b0a      	ldr	r3, [pc, #40]	; (800d29c <vPortFree+0xbc>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	4413      	add	r3, r2
 800d276:	4a09      	ldr	r2, [pc, #36]	; (800d29c <vPortFree+0xbc>)
 800d278:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d27a:	6938      	ldr	r0, [r7, #16]
 800d27c:	f000 f874 	bl	800d368 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d280:	4b07      	ldr	r3, [pc, #28]	; (800d2a0 <vPortFree+0xc0>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	3301      	adds	r3, #1
 800d286:	4a06      	ldr	r2, [pc, #24]	; (800d2a0 <vPortFree+0xc0>)
 800d288:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d28a:	f7fe fc7d 	bl	800bb88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d28e:	bf00      	nop
 800d290:	3718      	adds	r7, #24
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	20004d8c 	.word	0x20004d8c
 800d29c:	20004d7c 	.word	0x20004d7c
 800d2a0:	20004d88 	.word	0x20004d88

0800d2a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d2a4:	b480      	push	{r7}
 800d2a6:	b085      	sub	sp, #20
 800d2a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d2aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800d2ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d2b0:	4b27      	ldr	r3, [pc, #156]	; (800d350 <prvHeapInit+0xac>)
 800d2b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f003 0307 	and.w	r3, r3, #7
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d00c      	beq.n	800d2d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	3307      	adds	r3, #7
 800d2c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	f023 0307 	bic.w	r3, r3, #7
 800d2ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d2cc:	68ba      	ldr	r2, [r7, #8]
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	1ad3      	subs	r3, r2, r3
 800d2d2:	4a1f      	ldr	r2, [pc, #124]	; (800d350 <prvHeapInit+0xac>)
 800d2d4:	4413      	add	r3, r2
 800d2d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d2dc:	4a1d      	ldr	r2, [pc, #116]	; (800d354 <prvHeapInit+0xb0>)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d2e2:	4b1c      	ldr	r3, [pc, #112]	; (800d354 <prvHeapInit+0xb0>)
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	68ba      	ldr	r2, [r7, #8]
 800d2ec:	4413      	add	r3, r2
 800d2ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d2f0:	2208      	movs	r2, #8
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	1a9b      	subs	r3, r3, r2
 800d2f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f023 0307 	bic.w	r3, r3, #7
 800d2fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	4a15      	ldr	r2, [pc, #84]	; (800d358 <prvHeapInit+0xb4>)
 800d304:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d306:	4b14      	ldr	r3, [pc, #80]	; (800d358 <prvHeapInit+0xb4>)
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	2200      	movs	r2, #0
 800d30c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d30e:	4b12      	ldr	r3, [pc, #72]	; (800d358 <prvHeapInit+0xb4>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2200      	movs	r2, #0
 800d314:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	68fa      	ldr	r2, [r7, #12]
 800d31e:	1ad2      	subs	r2, r2, r3
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d324:	4b0c      	ldr	r3, [pc, #48]	; (800d358 <prvHeapInit+0xb4>)
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	4a0a      	ldr	r2, [pc, #40]	; (800d35c <prvHeapInit+0xb8>)
 800d332:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	685b      	ldr	r3, [r3, #4]
 800d338:	4a09      	ldr	r2, [pc, #36]	; (800d360 <prvHeapInit+0xbc>)
 800d33a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d33c:	4b09      	ldr	r3, [pc, #36]	; (800d364 <prvHeapInit+0xc0>)
 800d33e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d342:	601a      	str	r2, [r3, #0]
}
 800d344:	bf00      	nop
 800d346:	3714      	adds	r7, #20
 800d348:	46bd      	mov	sp, r7
 800d34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34e:	4770      	bx	lr
 800d350:	20001170 	.word	0x20001170
 800d354:	20004d70 	.word	0x20004d70
 800d358:	20004d78 	.word	0x20004d78
 800d35c:	20004d80 	.word	0x20004d80
 800d360:	20004d7c 	.word	0x20004d7c
 800d364:	20004d8c 	.word	0x20004d8c

0800d368 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d368:	b480      	push	{r7}
 800d36a:	b085      	sub	sp, #20
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d370:	4b28      	ldr	r3, [pc, #160]	; (800d414 <prvInsertBlockIntoFreeList+0xac>)
 800d372:	60fb      	str	r3, [r7, #12]
 800d374:	e002      	b.n	800d37c <prvInsertBlockIntoFreeList+0x14>
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	60fb      	str	r3, [r7, #12]
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	687a      	ldr	r2, [r7, #4]
 800d382:	429a      	cmp	r2, r3
 800d384:	d8f7      	bhi.n	800d376 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	685b      	ldr	r3, [r3, #4]
 800d38e:	68ba      	ldr	r2, [r7, #8]
 800d390:	4413      	add	r3, r2
 800d392:	687a      	ldr	r2, [r7, #4]
 800d394:	429a      	cmp	r2, r3
 800d396:	d108      	bne.n	800d3aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	685a      	ldr	r2, [r3, #4]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	685b      	ldr	r3, [r3, #4]
 800d3a0:	441a      	add	r2, r3
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	685b      	ldr	r3, [r3, #4]
 800d3b2:	68ba      	ldr	r2, [r7, #8]
 800d3b4:	441a      	add	r2, r3
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d118      	bne.n	800d3f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681a      	ldr	r2, [r3, #0]
 800d3c2:	4b15      	ldr	r3, [pc, #84]	; (800d418 <prvInsertBlockIntoFreeList+0xb0>)
 800d3c4:	681b      	ldr	r3, [r3, #0]
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d00d      	beq.n	800d3e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	685a      	ldr	r2, [r3, #4]
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	441a      	add	r2, r3
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	681a      	ldr	r2, [r3, #0]
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	601a      	str	r2, [r3, #0]
 800d3e4:	e008      	b.n	800d3f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d3e6:	4b0c      	ldr	r3, [pc, #48]	; (800d418 <prvInsertBlockIntoFreeList+0xb0>)
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	601a      	str	r2, [r3, #0]
 800d3ee:	e003      	b.n	800d3f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	681a      	ldr	r2, [r3, #0]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d3f8:	68fa      	ldr	r2, [r7, #12]
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d002      	beq.n	800d406 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d406:	bf00      	nop
 800d408:	3714      	adds	r7, #20
 800d40a:	46bd      	mov	sp, r7
 800d40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d410:	4770      	bx	lr
 800d412:	bf00      	nop
 800d414:	20004d70 	.word	0x20004d70
 800d418:	20004d78 	.word	0x20004d78

0800d41c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d41c:	b580      	push	{r7, lr}
 800d41e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800d420:	2201      	movs	r2, #1
 800d422:	4912      	ldr	r1, [pc, #72]	; (800d46c <MX_USB_DEVICE_Init+0x50>)
 800d424:	4812      	ldr	r0, [pc, #72]	; (800d470 <MX_USB_DEVICE_Init+0x54>)
 800d426:	f7fb fcf5 	bl	8008e14 <USBD_Init>
 800d42a:	4603      	mov	r3, r0
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d001      	beq.n	800d434 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d430:	f7f3 fbbe 	bl	8000bb0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800d434:	490f      	ldr	r1, [pc, #60]	; (800d474 <MX_USB_DEVICE_Init+0x58>)
 800d436:	480e      	ldr	r0, [pc, #56]	; (800d470 <MX_USB_DEVICE_Init+0x54>)
 800d438:	f7fb fd1c 	bl	8008e74 <USBD_RegisterClass>
 800d43c:	4603      	mov	r3, r0
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d001      	beq.n	800d446 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d442:	f7f3 fbb5 	bl	8000bb0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800d446:	490c      	ldr	r1, [pc, #48]	; (800d478 <MX_USB_DEVICE_Init+0x5c>)
 800d448:	4809      	ldr	r0, [pc, #36]	; (800d470 <MX_USB_DEVICE_Init+0x54>)
 800d44a:	f7fb fc53 	bl	8008cf4 <USBD_CDC_RegisterInterface>
 800d44e:	4603      	mov	r3, r0
 800d450:	2b00      	cmp	r3, #0
 800d452:	d001      	beq.n	800d458 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d454:	f7f3 fbac 	bl	8000bb0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800d458:	4805      	ldr	r0, [pc, #20]	; (800d470 <MX_USB_DEVICE_Init+0x54>)
 800d45a:	f7fb fd41 	bl	8008ee0 <USBD_Start>
 800d45e:	4603      	mov	r3, r0
 800d460:	2b00      	cmp	r3, #0
 800d462:	d001      	beq.n	800d468 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d464:	f7f3 fba4 	bl	8000bb0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d468:	bf00      	nop
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	200000b0 	.word	0x200000b0
 800d470:	20004d90 	.word	0x20004d90
 800d474:	20000018 	.word	0x20000018
 800d478:	2000009c 	.word	0x2000009c

0800d47c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800d480:	2200      	movs	r2, #0
 800d482:	4905      	ldr	r1, [pc, #20]	; (800d498 <CDC_Init_HS+0x1c>)
 800d484:	4805      	ldr	r0, [pc, #20]	; (800d49c <CDC_Init_HS+0x20>)
 800d486:	f7fb fc4f 	bl	8008d28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800d48a:	4905      	ldr	r1, [pc, #20]	; (800d4a0 <CDC_Init_HS+0x24>)
 800d48c:	4803      	ldr	r0, [pc, #12]	; (800d49c <CDC_Init_HS+0x20>)
 800d48e:	f7fb fc6d 	bl	8008d6c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d492:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800d494:	4618      	mov	r0, r3
 800d496:	bd80      	pop	{r7, pc}
 800d498:	2000586c 	.word	0x2000586c
 800d49c:	20004d90 	.word	0x20004d90
 800d4a0:	2000506c 	.word	0x2000506c

0800d4a4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800d4a8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b2:	4770      	bx	lr

0800d4b4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d4b4:	b480      	push	{r7}
 800d4b6:	b083      	sub	sp, #12
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	4603      	mov	r3, r0
 800d4bc:	6039      	str	r1, [r7, #0]
 800d4be:	71fb      	strb	r3, [r7, #7]
 800d4c0:	4613      	mov	r3, r2
 800d4c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800d4c4:	79fb      	ldrb	r3, [r7, #7]
 800d4c6:	2b23      	cmp	r3, #35	; 0x23
 800d4c8:	d84a      	bhi.n	800d560 <CDC_Control_HS+0xac>
 800d4ca:	a201      	add	r2, pc, #4	; (adr r2, 800d4d0 <CDC_Control_HS+0x1c>)
 800d4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d0:	0800d561 	.word	0x0800d561
 800d4d4:	0800d561 	.word	0x0800d561
 800d4d8:	0800d561 	.word	0x0800d561
 800d4dc:	0800d561 	.word	0x0800d561
 800d4e0:	0800d561 	.word	0x0800d561
 800d4e4:	0800d561 	.word	0x0800d561
 800d4e8:	0800d561 	.word	0x0800d561
 800d4ec:	0800d561 	.word	0x0800d561
 800d4f0:	0800d561 	.word	0x0800d561
 800d4f4:	0800d561 	.word	0x0800d561
 800d4f8:	0800d561 	.word	0x0800d561
 800d4fc:	0800d561 	.word	0x0800d561
 800d500:	0800d561 	.word	0x0800d561
 800d504:	0800d561 	.word	0x0800d561
 800d508:	0800d561 	.word	0x0800d561
 800d50c:	0800d561 	.word	0x0800d561
 800d510:	0800d561 	.word	0x0800d561
 800d514:	0800d561 	.word	0x0800d561
 800d518:	0800d561 	.word	0x0800d561
 800d51c:	0800d561 	.word	0x0800d561
 800d520:	0800d561 	.word	0x0800d561
 800d524:	0800d561 	.word	0x0800d561
 800d528:	0800d561 	.word	0x0800d561
 800d52c:	0800d561 	.word	0x0800d561
 800d530:	0800d561 	.word	0x0800d561
 800d534:	0800d561 	.word	0x0800d561
 800d538:	0800d561 	.word	0x0800d561
 800d53c:	0800d561 	.word	0x0800d561
 800d540:	0800d561 	.word	0x0800d561
 800d544:	0800d561 	.word	0x0800d561
 800d548:	0800d561 	.word	0x0800d561
 800d54c:	0800d561 	.word	0x0800d561
 800d550:	0800d561 	.word	0x0800d561
 800d554:	0800d561 	.word	0x0800d561
 800d558:	0800d561 	.word	0x0800d561
 800d55c:	0800d561 	.word	0x0800d561
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d560:	bf00      	nop
  }

  return (USBD_OK);
 800d562:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800d564:	4618      	mov	r0, r3
 800d566:	370c      	adds	r7, #12
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800d57a:	6879      	ldr	r1, [r7, #4]
 800d57c:	4805      	ldr	r0, [pc, #20]	; (800d594 <CDC_Receive_HS+0x24>)
 800d57e:	f7fb fbf5 	bl	8008d6c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800d582:	4804      	ldr	r0, [pc, #16]	; (800d594 <CDC_Receive_HS+0x24>)
 800d584:	f7fb fc10 	bl	8008da8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d588:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3708      	adds	r7, #8
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}
 800d592:	bf00      	nop
 800d594:	20004d90 	.word	0x20004d90

0800d598 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d598:	b480      	push	{r7}
 800d59a:	b087      	sub	sp, #28
 800d59c:	af00      	add	r7, sp, #0
 800d59e:	60f8      	str	r0, [r7, #12]
 800d5a0:	60b9      	str	r1, [r7, #8]
 800d5a2:	4613      	mov	r3, r2
 800d5a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800d5aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	371c      	adds	r7, #28
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b8:	4770      	bx	lr
	...

0800d5bc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	4603      	mov	r3, r0
 800d5c4:	6039      	str	r1, [r7, #0]
 800d5c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	2212      	movs	r2, #18
 800d5cc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800d5ce:	4b03      	ldr	r3, [pc, #12]	; (800d5dc <USBD_HS_DeviceDescriptor+0x20>)
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	370c      	adds	r7, #12
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr
 800d5dc:	200000cc 	.word	0x200000cc

0800d5e0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b083      	sub	sp, #12
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	6039      	str	r1, [r7, #0]
 800d5ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d5ec:	683b      	ldr	r3, [r7, #0]
 800d5ee:	2204      	movs	r2, #4
 800d5f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d5f2:	4b03      	ldr	r3, [pc, #12]	; (800d600 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	370c      	adds	r7, #12
 800d5f8:	46bd      	mov	sp, r7
 800d5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fe:	4770      	bx	lr
 800d600:	200000e0 	.word	0x200000e0

0800d604 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
 800d60a:	4603      	mov	r3, r0
 800d60c:	6039      	str	r1, [r7, #0]
 800d60e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d610:	79fb      	ldrb	r3, [r7, #7]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d105      	bne.n	800d622 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d616:	683a      	ldr	r2, [r7, #0]
 800d618:	4907      	ldr	r1, [pc, #28]	; (800d638 <USBD_HS_ProductStrDescriptor+0x34>)
 800d61a:	4808      	ldr	r0, [pc, #32]	; (800d63c <USBD_HS_ProductStrDescriptor+0x38>)
 800d61c:	f7fc fe0c 	bl	800a238 <USBD_GetString>
 800d620:	e004      	b.n	800d62c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d622:	683a      	ldr	r2, [r7, #0]
 800d624:	4904      	ldr	r1, [pc, #16]	; (800d638 <USBD_HS_ProductStrDescriptor+0x34>)
 800d626:	4805      	ldr	r0, [pc, #20]	; (800d63c <USBD_HS_ProductStrDescriptor+0x38>)
 800d628:	f7fc fe06 	bl	800a238 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d62c:	4b02      	ldr	r3, [pc, #8]	; (800d638 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3708      	adds	r7, #8
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	2000606c 	.word	0x2000606c
 800d63c:	0800deb8 	.word	0x0800deb8

0800d640 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	4603      	mov	r3, r0
 800d648:	6039      	str	r1, [r7, #0]
 800d64a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d64c:	683a      	ldr	r2, [r7, #0]
 800d64e:	4904      	ldr	r1, [pc, #16]	; (800d660 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800d650:	4804      	ldr	r0, [pc, #16]	; (800d664 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800d652:	f7fc fdf1 	bl	800a238 <USBD_GetString>
  return USBD_StrDesc;
 800d656:	4b02      	ldr	r3, [pc, #8]	; (800d660 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3708      	adds	r7, #8
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	2000606c 	.word	0x2000606c
 800d664:	0800ded0 	.word	0x0800ded0

0800d668 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b082      	sub	sp, #8
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	4603      	mov	r3, r0
 800d670:	6039      	str	r1, [r7, #0]
 800d672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d674:	683b      	ldr	r3, [r7, #0]
 800d676:	221a      	movs	r2, #26
 800d678:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d67a:	f000 f843 	bl	800d704 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d67e:	4b02      	ldr	r3, [pc, #8]	; (800d688 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800d680:	4618      	mov	r0, r3
 800d682:	3708      	adds	r7, #8
 800d684:	46bd      	mov	sp, r7
 800d686:	bd80      	pop	{r7, pc}
 800d688:	200000e4 	.word	0x200000e4

0800d68c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d68c:	b580      	push	{r7, lr}
 800d68e:	b082      	sub	sp, #8
 800d690:	af00      	add	r7, sp, #0
 800d692:	4603      	mov	r3, r0
 800d694:	6039      	str	r1, [r7, #0]
 800d696:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d698:	79fb      	ldrb	r3, [r7, #7]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d105      	bne.n	800d6aa <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d69e:	683a      	ldr	r2, [r7, #0]
 800d6a0:	4907      	ldr	r1, [pc, #28]	; (800d6c0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800d6a2:	4808      	ldr	r0, [pc, #32]	; (800d6c4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d6a4:	f7fc fdc8 	bl	800a238 <USBD_GetString>
 800d6a8:	e004      	b.n	800d6b4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d6aa:	683a      	ldr	r2, [r7, #0]
 800d6ac:	4904      	ldr	r1, [pc, #16]	; (800d6c0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800d6ae:	4805      	ldr	r0, [pc, #20]	; (800d6c4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d6b0:	f7fc fdc2 	bl	800a238 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6b4:	4b02      	ldr	r3, [pc, #8]	; (800d6c0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3708      	adds	r7, #8
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	2000606c 	.word	0x2000606c
 800d6c4:	0800dee4 	.word	0x0800dee4

0800d6c8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	6039      	str	r1, [r7, #0]
 800d6d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d6d4:	79fb      	ldrb	r3, [r7, #7]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d105      	bne.n	800d6e6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d6da:	683a      	ldr	r2, [r7, #0]
 800d6dc:	4907      	ldr	r1, [pc, #28]	; (800d6fc <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d6de:	4808      	ldr	r0, [pc, #32]	; (800d700 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d6e0:	f7fc fdaa 	bl	800a238 <USBD_GetString>
 800d6e4:	e004      	b.n	800d6f0 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d6e6:	683a      	ldr	r2, [r7, #0]
 800d6e8:	4904      	ldr	r1, [pc, #16]	; (800d6fc <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d6ea:	4805      	ldr	r0, [pc, #20]	; (800d700 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d6ec:	f7fc fda4 	bl	800a238 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d6f0:	4b02      	ldr	r3, [pc, #8]	; (800d6fc <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	3708      	adds	r7, #8
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}
 800d6fa:	bf00      	nop
 800d6fc:	2000606c 	.word	0x2000606c
 800d700:	0800def0 	.word	0x0800def0

0800d704 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d70a:	4b0f      	ldr	r3, [pc, #60]	; (800d748 <Get_SerialNum+0x44>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d710:	4b0e      	ldr	r3, [pc, #56]	; (800d74c <Get_SerialNum+0x48>)
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d716:	4b0e      	ldr	r3, [pc, #56]	; (800d750 <Get_SerialNum+0x4c>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d71c:	68fa      	ldr	r2, [r7, #12]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	4413      	add	r3, r2
 800d722:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2b00      	cmp	r3, #0
 800d728:	d009      	beq.n	800d73e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d72a:	2208      	movs	r2, #8
 800d72c:	4909      	ldr	r1, [pc, #36]	; (800d754 <Get_SerialNum+0x50>)
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f000 f814 	bl	800d75c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d734:	2204      	movs	r2, #4
 800d736:	4908      	ldr	r1, [pc, #32]	; (800d758 <Get_SerialNum+0x54>)
 800d738:	68b8      	ldr	r0, [r7, #8]
 800d73a:	f000 f80f 	bl	800d75c <IntToUnicode>
  }
}
 800d73e:	bf00      	nop
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	1fff7a10 	.word	0x1fff7a10
 800d74c:	1fff7a14 	.word	0x1fff7a14
 800d750:	1fff7a18 	.word	0x1fff7a18
 800d754:	200000e6 	.word	0x200000e6
 800d758:	200000f6 	.word	0x200000f6

0800d75c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d75c:	b480      	push	{r7}
 800d75e:	b087      	sub	sp, #28
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	4613      	mov	r3, r2
 800d768:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d76a:	2300      	movs	r3, #0
 800d76c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d76e:	2300      	movs	r3, #0
 800d770:	75fb      	strb	r3, [r7, #23]
 800d772:	e027      	b.n	800d7c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	0f1b      	lsrs	r3, r3, #28
 800d778:	2b09      	cmp	r3, #9
 800d77a:	d80b      	bhi.n	800d794 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	0f1b      	lsrs	r3, r3, #28
 800d780:	b2da      	uxtb	r2, r3
 800d782:	7dfb      	ldrb	r3, [r7, #23]
 800d784:	005b      	lsls	r3, r3, #1
 800d786:	4619      	mov	r1, r3
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	440b      	add	r3, r1
 800d78c:	3230      	adds	r2, #48	; 0x30
 800d78e:	b2d2      	uxtb	r2, r2
 800d790:	701a      	strb	r2, [r3, #0]
 800d792:	e00a      	b.n	800d7aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	0f1b      	lsrs	r3, r3, #28
 800d798:	b2da      	uxtb	r2, r3
 800d79a:	7dfb      	ldrb	r3, [r7, #23]
 800d79c:	005b      	lsls	r3, r3, #1
 800d79e:	4619      	mov	r1, r3
 800d7a0:	68bb      	ldr	r3, [r7, #8]
 800d7a2:	440b      	add	r3, r1
 800d7a4:	3237      	adds	r2, #55	; 0x37
 800d7a6:	b2d2      	uxtb	r2, r2
 800d7a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	011b      	lsls	r3, r3, #4
 800d7ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d7b0:	7dfb      	ldrb	r3, [r7, #23]
 800d7b2:	005b      	lsls	r3, r3, #1
 800d7b4:	3301      	adds	r3, #1
 800d7b6:	68ba      	ldr	r2, [r7, #8]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d7be:	7dfb      	ldrb	r3, [r7, #23]
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	75fb      	strb	r3, [r7, #23]
 800d7c4:	7dfa      	ldrb	r2, [r7, #23]
 800d7c6:	79fb      	ldrb	r3, [r7, #7]
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d3d3      	bcc.n	800d774 <IntToUnicode+0x18>
  }
}
 800d7cc:	bf00      	nop
 800d7ce:	bf00      	nop
 800d7d0:	371c      	adds	r7, #28
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d8:	4770      	bx	lr
	...

0800d7dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08a      	sub	sp, #40	; 0x28
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d7e4:	f107 0314 	add.w	r3, r7, #20
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	601a      	str	r2, [r3, #0]
 800d7ec:	605a      	str	r2, [r3, #4]
 800d7ee:	609a      	str	r2, [r3, #8]
 800d7f0:	60da      	str	r2, [r3, #12]
 800d7f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4a1d      	ldr	r2, [pc, #116]	; (800d870 <HAL_PCD_MspInit+0x94>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d134      	bne.n	800d868 <HAL_PCD_MspInit+0x8c>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d7fe:	2300      	movs	r3, #0
 800d800:	613b      	str	r3, [r7, #16]
 800d802:	4b1c      	ldr	r3, [pc, #112]	; (800d874 <HAL_PCD_MspInit+0x98>)
 800d804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d806:	4a1b      	ldr	r2, [pc, #108]	; (800d874 <HAL_PCD_MspInit+0x98>)
 800d808:	f043 0302 	orr.w	r3, r3, #2
 800d80c:	6313      	str	r3, [r2, #48]	; 0x30
 800d80e:	4b19      	ldr	r3, [pc, #100]	; (800d874 <HAL_PCD_MspInit+0x98>)
 800d810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d812:	f003 0302 	and.w	r3, r3, #2
 800d816:	613b      	str	r3, [r7, #16]
 800d818:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800d81a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800d81e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d820:	2302      	movs	r3, #2
 800d822:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d824:	2300      	movs	r3, #0
 800d826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d828:	2303      	movs	r3, #3
 800d82a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d82c:	230c      	movs	r3, #12
 800d82e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d830:	f107 0314 	add.w	r3, r7, #20
 800d834:	4619      	mov	r1, r3
 800d836:	4810      	ldr	r0, [pc, #64]	; (800d878 <HAL_PCD_MspInit+0x9c>)
 800d838:	f7f4 f9d0 	bl	8001bdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d83c:	2300      	movs	r3, #0
 800d83e:	60fb      	str	r3, [r7, #12]
 800d840:	4b0c      	ldr	r3, [pc, #48]	; (800d874 <HAL_PCD_MspInit+0x98>)
 800d842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d844:	4a0b      	ldr	r2, [pc, #44]	; (800d874 <HAL_PCD_MspInit+0x98>)
 800d846:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d84a:	6313      	str	r3, [r2, #48]	; 0x30
 800d84c:	4b09      	ldr	r3, [pc, #36]	; (800d874 <HAL_PCD_MspInit+0x98>)
 800d84e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d854:	60fb      	str	r3, [r7, #12]
 800d856:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800d858:	2200      	movs	r2, #0
 800d85a:	2105      	movs	r1, #5
 800d85c:	204d      	movs	r0, #77	; 0x4d
 800d85e:	f7f4 f8d8 	bl	8001a12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d862:	204d      	movs	r0, #77	; 0x4d
 800d864:	f7f4 f8f1 	bl	8001a4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d868:	bf00      	nop
 800d86a:	3728      	adds	r7, #40	; 0x28
 800d86c:	46bd      	mov	sp, r7
 800d86e:	bd80      	pop	{r7, pc}
 800d870:	40040000 	.word	0x40040000
 800d874:	40023800 	.word	0x40023800
 800d878:	40020400 	.word	0x40020400

0800d87c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d890:	4619      	mov	r1, r3
 800d892:	4610      	mov	r0, r2
 800d894:	f7fb fb71 	bl	8008f7a <USBD_LL_SetupStage>
}
 800d898:	bf00      	nop
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}

0800d8a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	460b      	mov	r3, r1
 800d8aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d8b2:	78fa      	ldrb	r2, [r7, #3]
 800d8b4:	6879      	ldr	r1, [r7, #4]
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	00db      	lsls	r3, r3, #3
 800d8ba:	4413      	add	r3, r2
 800d8bc:	009b      	lsls	r3, r3, #2
 800d8be:	440b      	add	r3, r1
 800d8c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d8c4:	681a      	ldr	r2, [r3, #0]
 800d8c6:	78fb      	ldrb	r3, [r7, #3]
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	f7fb fbab 	bl	8009024 <USBD_LL_DataOutStage>
}
 800d8ce:	bf00      	nop
 800d8d0:	3708      	adds	r7, #8
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b082      	sub	sp, #8
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
 800d8de:	460b      	mov	r3, r1
 800d8e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d8e8:	78fa      	ldrb	r2, [r7, #3]
 800d8ea:	6879      	ldr	r1, [r7, #4]
 800d8ec:	4613      	mov	r3, r2
 800d8ee:	00db      	lsls	r3, r3, #3
 800d8f0:	4413      	add	r3, r2
 800d8f2:	009b      	lsls	r3, r3, #2
 800d8f4:	440b      	add	r3, r1
 800d8f6:	334c      	adds	r3, #76	; 0x4c
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	78fb      	ldrb	r3, [r7, #3]
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	f7fb fc44 	bl	800918a <USBD_LL_DataInStage>
}
 800d902:	bf00      	nop
 800d904:	3708      	adds	r7, #8
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}

0800d90a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d90a:	b580      	push	{r7, lr}
 800d90c:	b082      	sub	sp, #8
 800d90e:	af00      	add	r7, sp, #0
 800d910:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d918:	4618      	mov	r0, r3
 800d91a:	f7fb fd78 	bl	800940e <USBD_LL_SOF>
}
 800d91e:	bf00      	nop
 800d920:	3708      	adds	r7, #8
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}

0800d926 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d926:	b580      	push	{r7, lr}
 800d928:	b084      	sub	sp, #16
 800d92a:	af00      	add	r7, sp, #0
 800d92c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d92e:	2301      	movs	r3, #1
 800d930:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	68db      	ldr	r3, [r3, #12]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d102      	bne.n	800d940 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d93a:	2300      	movs	r3, #0
 800d93c:	73fb      	strb	r3, [r7, #15]
 800d93e:	e008      	b.n	800d952 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	68db      	ldr	r3, [r3, #12]
 800d944:	2b02      	cmp	r3, #2
 800d946:	d102      	bne.n	800d94e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d948:	2301      	movs	r3, #1
 800d94a:	73fb      	strb	r3, [r7, #15]
 800d94c:	e001      	b.n	800d952 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d94e:	f7f3 f92f 	bl	8000bb0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d958:	7bfa      	ldrb	r2, [r7, #15]
 800d95a:	4611      	mov	r1, r2
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7fb fd18 	bl	8009392 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fb fcc0 	bl	80092ee <USBD_LL_Reset>
}
 800d96e:	bf00      	nop
 800d970:	3710      	adds	r7, #16
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
	...

0800d978 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d986:	4618      	mov	r0, r3
 800d988:	f7fb fd13 	bl	80093b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	6812      	ldr	r2, [r2, #0]
 800d99a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d99e:	f043 0301 	orr.w	r3, r3, #1
 800d9a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	6a1b      	ldr	r3, [r3, #32]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d005      	beq.n	800d9b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d9ac:	4b04      	ldr	r3, [pc, #16]	; (800d9c0 <HAL_PCD_SuspendCallback+0x48>)
 800d9ae:	691b      	ldr	r3, [r3, #16]
 800d9b0:	4a03      	ldr	r2, [pc, #12]	; (800d9c0 <HAL_PCD_SuspendCallback+0x48>)
 800d9b2:	f043 0306 	orr.w	r3, r3, #6
 800d9b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d9b8:	bf00      	nop
 800d9ba:	3708      	adds	r7, #8
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}
 800d9c0:	e000ed00 	.word	0xe000ed00

0800d9c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b082      	sub	sp, #8
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d9d2:	4618      	mov	r0, r3
 800d9d4:	f7fb fd03 	bl	80093de <USBD_LL_Resume>
}
 800d9d8:	bf00      	nop
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	460b      	mov	r3, r1
 800d9ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d9f2:	78fa      	ldrb	r2, [r7, #3]
 800d9f4:	4611      	mov	r1, r2
 800d9f6:	4618      	mov	r0, r3
 800d9f8:	f7fb fd5b 	bl	80094b2 <USBD_LL_IsoOUTIncomplete>
}
 800d9fc:	bf00      	nop
 800d9fe:	3708      	adds	r7, #8
 800da00:	46bd      	mov	sp, r7
 800da02:	bd80      	pop	{r7, pc}

0800da04 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da04:	b580      	push	{r7, lr}
 800da06:	b082      	sub	sp, #8
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
 800da0c:	460b      	mov	r3, r1
 800da0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da16:	78fa      	ldrb	r2, [r7, #3]
 800da18:	4611      	mov	r1, r2
 800da1a:	4618      	mov	r0, r3
 800da1c:	f7fb fd17 	bl	800944e <USBD_LL_IsoINIncomplete>
}
 800da20:	bf00      	nop
 800da22:	3708      	adds	r7, #8
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da36:	4618      	mov	r0, r3
 800da38:	f7fb fd6d 	bl	8009516 <USBD_LL_DevConnected>
}
 800da3c:	bf00      	nop
 800da3e:	3708      	adds	r7, #8
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800da52:	4618      	mov	r0, r3
 800da54:	f7fb fd6a 	bl	800952c <USBD_LL_DevDisconnected>
}
 800da58:	bf00      	nop
 800da5a:	3708      	adds	r7, #8
 800da5c:	46bd      	mov	sp, r7
 800da5e:	bd80      	pop	{r7, pc}

0800da60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	2b01      	cmp	r3, #1
 800da6e:	d140      	bne.n	800daf2 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800da70:	4a22      	ldr	r2, [pc, #136]	; (800dafc <USBD_LL_Init+0x9c>)
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	4a20      	ldr	r2, [pc, #128]	; (800dafc <USBD_LL_Init+0x9c>)
 800da7c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800da80:	4b1e      	ldr	r3, [pc, #120]	; (800dafc <USBD_LL_Init+0x9c>)
 800da82:	4a1f      	ldr	r2, [pc, #124]	; (800db00 <USBD_LL_Init+0xa0>)
 800da84:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 800da86:	4b1d      	ldr	r3, [pc, #116]	; (800dafc <USBD_LL_Init+0x9c>)
 800da88:	2206      	movs	r2, #6
 800da8a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800da8c:	4b1b      	ldr	r3, [pc, #108]	; (800dafc <USBD_LL_Init+0x9c>)
 800da8e:	2202      	movs	r2, #2
 800da90:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800da92:	4b1a      	ldr	r3, [pc, #104]	; (800dafc <USBD_LL_Init+0x9c>)
 800da94:	2200      	movs	r2, #0
 800da96:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800da98:	4b18      	ldr	r3, [pc, #96]	; (800dafc <USBD_LL_Init+0x9c>)
 800da9a:	2202      	movs	r2, #2
 800da9c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800da9e:	4b17      	ldr	r3, [pc, #92]	; (800dafc <USBD_LL_Init+0x9c>)
 800daa0:	2200      	movs	r2, #0
 800daa2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800daa4:	4b15      	ldr	r3, [pc, #84]	; (800dafc <USBD_LL_Init+0x9c>)
 800daa6:	2200      	movs	r2, #0
 800daa8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800daaa:	4b14      	ldr	r3, [pc, #80]	; (800dafc <USBD_LL_Init+0x9c>)
 800daac:	2200      	movs	r2, #0
 800daae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800dab0:	4b12      	ldr	r3, [pc, #72]	; (800dafc <USBD_LL_Init+0x9c>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800dab6:	4b11      	ldr	r3, [pc, #68]	; (800dafc <USBD_LL_Init+0x9c>)
 800dab8:	2200      	movs	r2, #0
 800daba:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800dabc:	4b0f      	ldr	r3, [pc, #60]	; (800dafc <USBD_LL_Init+0x9c>)
 800dabe:	2200      	movs	r2, #0
 800dac0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800dac2:	480e      	ldr	r0, [pc, #56]	; (800dafc <USBD_LL_Init+0x9c>)
 800dac4:	f7f4 fb9c 	bl	8002200 <HAL_PCD_Init>
 800dac8:	4603      	mov	r3, r0
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d001      	beq.n	800dad2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800dace:	f7f3 f86f 	bl	8000bb0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800dad2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dad6:	4809      	ldr	r0, [pc, #36]	; (800dafc <USBD_LL_Init+0x9c>)
 800dad8:	f7f5 fdf3 	bl	80036c2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800dadc:	2280      	movs	r2, #128	; 0x80
 800dade:	2100      	movs	r1, #0
 800dae0:	4806      	ldr	r0, [pc, #24]	; (800dafc <USBD_LL_Init+0x9c>)
 800dae2:	f7f5 fda7 	bl	8003634 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800dae6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800daea:	2101      	movs	r1, #1
 800daec:	4803      	ldr	r0, [pc, #12]	; (800dafc <USBD_LL_Init+0x9c>)
 800daee:	f7f5 fda1 	bl	8003634 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	2000626c 	.word	0x2000626c
 800db00:	40040000 	.word	0x40040000

0800db04 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db0c:	2300      	movs	r3, #0
 800db0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db10:	2300      	movs	r3, #0
 800db12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800db1a:	4618      	mov	r0, r3
 800db1c:	f7f4 fc8d 	bl	800243a <HAL_PCD_Start>
 800db20:	4603      	mov	r3, r0
 800db22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db24:	7bfb      	ldrb	r3, [r7, #15]
 800db26:	4618      	mov	r0, r3
 800db28:	f000 f942 	bl	800ddb0 <USBD_Get_USB_Status>
 800db2c:	4603      	mov	r3, r0
 800db2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db30:	7bbb      	ldrb	r3, [r7, #14]
}
 800db32:	4618      	mov	r0, r3
 800db34:	3710      	adds	r7, #16
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}

0800db3a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800db3a:	b580      	push	{r7, lr}
 800db3c:	b084      	sub	sp, #16
 800db3e:	af00      	add	r7, sp, #0
 800db40:	6078      	str	r0, [r7, #4]
 800db42:	4608      	mov	r0, r1
 800db44:	4611      	mov	r1, r2
 800db46:	461a      	mov	r2, r3
 800db48:	4603      	mov	r3, r0
 800db4a:	70fb      	strb	r3, [r7, #3]
 800db4c:	460b      	mov	r3, r1
 800db4e:	70bb      	strb	r3, [r7, #2]
 800db50:	4613      	mov	r3, r2
 800db52:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db54:	2300      	movs	r3, #0
 800db56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db58:	2300      	movs	r3, #0
 800db5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800db62:	78bb      	ldrb	r3, [r7, #2]
 800db64:	883a      	ldrh	r2, [r7, #0]
 800db66:	78f9      	ldrb	r1, [r7, #3]
 800db68:	f7f5 f95e 	bl	8002e28 <HAL_PCD_EP_Open>
 800db6c:	4603      	mov	r3, r0
 800db6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800db70:	7bfb      	ldrb	r3, [r7, #15]
 800db72:	4618      	mov	r0, r3
 800db74:	f000 f91c 	bl	800ddb0 <USBD_Get_USB_Status>
 800db78:	4603      	mov	r3, r0
 800db7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800db7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b084      	sub	sp, #16
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
 800db8e:	460b      	mov	r3, r1
 800db90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800db92:	2300      	movs	r3, #0
 800db94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800db96:	2300      	movs	r3, #0
 800db98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dba0:	78fa      	ldrb	r2, [r7, #3]
 800dba2:	4611      	mov	r1, r2
 800dba4:	4618      	mov	r0, r3
 800dba6:	f7f5 f9a7 	bl	8002ef8 <HAL_PCD_EP_Close>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbae:	7bfb      	ldrb	r3, [r7, #15]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	f000 f8fd 	bl	800ddb0 <USBD_Get_USB_Status>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbba:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	3710      	adds	r7, #16
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b084      	sub	sp, #16
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
 800dbcc:	460b      	mov	r3, r1
 800dbce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dbde:	78fa      	ldrb	r2, [r7, #3]
 800dbe0:	4611      	mov	r1, r2
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	f7f5 fa7f 	bl	80030e6 <HAL_PCD_EP_SetStall>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dbec:	7bfb      	ldrb	r3, [r7, #15]
 800dbee:	4618      	mov	r0, r3
 800dbf0:	f000 f8de 	bl	800ddb0 <USBD_Get_USB_Status>
 800dbf4:	4603      	mov	r3, r0
 800dbf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dbf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b084      	sub	sp, #16
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	6078      	str	r0, [r7, #4]
 800dc0a:	460b      	mov	r3, r1
 800dc0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dc12:	2300      	movs	r3, #0
 800dc14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc1c:	78fa      	ldrb	r2, [r7, #3]
 800dc1e:	4611      	mov	r1, r2
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7f5 fac4 	bl	80031ae <HAL_PCD_EP_ClrStall>
 800dc26:	4603      	mov	r3, r0
 800dc28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dc2a:	7bfb      	ldrb	r3, [r7, #15]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f000 f8bf 	bl	800ddb0 <USBD_Get_USB_Status>
 800dc32:	4603      	mov	r3, r0
 800dc34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dc36:	7bbb      	ldrb	r3, [r7, #14]
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3710      	adds	r7, #16
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b085      	sub	sp, #20
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	460b      	mov	r3, r1
 800dc4a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dc52:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dc54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	da0b      	bge.n	800dc74 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dc5c:	78fb      	ldrb	r3, [r7, #3]
 800dc5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc62:	68f9      	ldr	r1, [r7, #12]
 800dc64:	4613      	mov	r3, r2
 800dc66:	00db      	lsls	r3, r3, #3
 800dc68:	4413      	add	r3, r2
 800dc6a:	009b      	lsls	r3, r3, #2
 800dc6c:	440b      	add	r3, r1
 800dc6e:	333e      	adds	r3, #62	; 0x3e
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	e00b      	b.n	800dc8c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800dc74:	78fb      	ldrb	r3, [r7, #3]
 800dc76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dc7a:	68f9      	ldr	r1, [r7, #12]
 800dc7c:	4613      	mov	r3, r2
 800dc7e:	00db      	lsls	r3, r3, #3
 800dc80:	4413      	add	r3, r2
 800dc82:	009b      	lsls	r3, r3, #2
 800dc84:	440b      	add	r3, r1
 800dc86:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800dc8a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	3714      	adds	r7, #20
 800dc90:	46bd      	mov	sp, r7
 800dc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc96:	4770      	bx	lr

0800dc98 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	460b      	mov	r3, r1
 800dca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dca4:	2300      	movs	r3, #0
 800dca6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dca8:	2300      	movs	r3, #0
 800dcaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dcb2:	78fa      	ldrb	r2, [r7, #3]
 800dcb4:	4611      	mov	r1, r2
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7f5 f891 	bl	8002dde <HAL_PCD_SetAddress>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dcc0:	7bfb      	ldrb	r3, [r7, #15]
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f000 f874 	bl	800ddb0 <USBD_Get_USB_Status>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dccc:	7bbb      	ldrb	r3, [r7, #14]
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	3710      	adds	r7, #16
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b086      	sub	sp, #24
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	60f8      	str	r0, [r7, #12]
 800dcde:	607a      	str	r2, [r7, #4]
 800dce0:	603b      	str	r3, [r7, #0]
 800dce2:	460b      	mov	r3, r1
 800dce4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dce6:	2300      	movs	r3, #0
 800dce8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dcea:	2300      	movs	r3, #0
 800dcec:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dcf4:	7af9      	ldrb	r1, [r7, #11]
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	687a      	ldr	r2, [r7, #4]
 800dcfa:	f7f5 f9aa 	bl	8003052 <HAL_PCD_EP_Transmit>
 800dcfe:	4603      	mov	r3, r0
 800dd00:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd02:	7dfb      	ldrb	r3, [r7, #23]
 800dd04:	4618      	mov	r0, r3
 800dd06:	f000 f853 	bl	800ddb0 <USBD_Get_USB_Status>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd0e:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	3718      	adds	r7, #24
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}

0800dd18 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b086      	sub	sp, #24
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	607a      	str	r2, [r7, #4]
 800dd22:	603b      	str	r3, [r7, #0]
 800dd24:	460b      	mov	r3, r1
 800dd26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd28:	2300      	movs	r3, #0
 800dd2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dd36:	7af9      	ldrb	r1, [r7, #11]
 800dd38:	683b      	ldr	r3, [r7, #0]
 800dd3a:	687a      	ldr	r2, [r7, #4]
 800dd3c:	f7f5 f926 	bl	8002f8c <HAL_PCD_EP_Receive>
 800dd40:	4603      	mov	r3, r0
 800dd42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dd44:	7dfb      	ldrb	r3, [r7, #23]
 800dd46:	4618      	mov	r0, r3
 800dd48:	f000 f832 	bl	800ddb0 <USBD_Get_USB_Status>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dd50:	7dbb      	ldrb	r3, [r7, #22]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3718      	adds	r7, #24
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b082      	sub	sp, #8
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
 800dd62:	460b      	mov	r3, r1
 800dd64:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd6c:	78fa      	ldrb	r2, [r7, #3]
 800dd6e:	4611      	mov	r1, r2
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7f5 f956 	bl	8003022 <HAL_PCD_EP_GetRxCount>
 800dd76:	4603      	mov	r3, r0
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}

0800dd80 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800dd88:	4b03      	ldr	r3, [pc, #12]	; (800dd98 <USBD_static_malloc+0x18>)
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	370c      	adds	r7, #12
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd94:	4770      	bx	lr
 800dd96:	bf00      	nop
 800dd98:	20006778 	.word	0x20006778

0800dd9c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b083      	sub	sp, #12
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]

}
 800dda4:	bf00      	nop
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ddb0:	b480      	push	{r7}
 800ddb2:	b085      	sub	sp, #20
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ddba:	2300      	movs	r3, #0
 800ddbc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ddbe:	79fb      	ldrb	r3, [r7, #7]
 800ddc0:	2b03      	cmp	r3, #3
 800ddc2:	d817      	bhi.n	800ddf4 <USBD_Get_USB_Status+0x44>
 800ddc4:	a201      	add	r2, pc, #4	; (adr r2, 800ddcc <USBD_Get_USB_Status+0x1c>)
 800ddc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddca:	bf00      	nop
 800ddcc:	0800dddd 	.word	0x0800dddd
 800ddd0:	0800dde3 	.word	0x0800dde3
 800ddd4:	0800dde9 	.word	0x0800dde9
 800ddd8:	0800ddef 	.word	0x0800ddef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800dddc:	2300      	movs	r3, #0
 800ddde:	73fb      	strb	r3, [r7, #15]
    break;
 800dde0:	e00b      	b.n	800ddfa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800dde2:	2303      	movs	r3, #3
 800dde4:	73fb      	strb	r3, [r7, #15]
    break;
 800dde6:	e008      	b.n	800ddfa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800dde8:	2301      	movs	r3, #1
 800ddea:	73fb      	strb	r3, [r7, #15]
    break;
 800ddec:	e005      	b.n	800ddfa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ddee:	2303      	movs	r3, #3
 800ddf0:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf2:	e002      	b.n	800ddfa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	73fb      	strb	r3, [r7, #15]
    break;
 800ddf8:	bf00      	nop
  }
  return usb_status;
 800ddfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	3714      	adds	r7, #20
 800de00:	46bd      	mov	sp, r7
 800de02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de06:	4770      	bx	lr

0800de08 <__libc_init_array>:
 800de08:	b570      	push	{r4, r5, r6, lr}
 800de0a:	4d0d      	ldr	r5, [pc, #52]	; (800de40 <__libc_init_array+0x38>)
 800de0c:	4c0d      	ldr	r4, [pc, #52]	; (800de44 <__libc_init_array+0x3c>)
 800de0e:	1b64      	subs	r4, r4, r5
 800de10:	10a4      	asrs	r4, r4, #2
 800de12:	2600      	movs	r6, #0
 800de14:	42a6      	cmp	r6, r4
 800de16:	d109      	bne.n	800de2c <__libc_init_array+0x24>
 800de18:	4d0b      	ldr	r5, [pc, #44]	; (800de48 <__libc_init_array+0x40>)
 800de1a:	4c0c      	ldr	r4, [pc, #48]	; (800de4c <__libc_init_array+0x44>)
 800de1c:	f000 f82e 	bl	800de7c <_init>
 800de20:	1b64      	subs	r4, r4, r5
 800de22:	10a4      	asrs	r4, r4, #2
 800de24:	2600      	movs	r6, #0
 800de26:	42a6      	cmp	r6, r4
 800de28:	d105      	bne.n	800de36 <__libc_init_array+0x2e>
 800de2a:	bd70      	pop	{r4, r5, r6, pc}
 800de2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800de30:	4798      	blx	r3
 800de32:	3601      	adds	r6, #1
 800de34:	e7ee      	b.n	800de14 <__libc_init_array+0xc>
 800de36:	f855 3b04 	ldr.w	r3, [r5], #4
 800de3a:	4798      	blx	r3
 800de3c:	3601      	adds	r6, #1
 800de3e:	e7f2      	b.n	800de26 <__libc_init_array+0x1e>
 800de40:	0800df58 	.word	0x0800df58
 800de44:	0800df58 	.word	0x0800df58
 800de48:	0800df58 	.word	0x0800df58
 800de4c:	0800df5c 	.word	0x0800df5c

0800de50 <memcpy>:
 800de50:	440a      	add	r2, r1
 800de52:	4291      	cmp	r1, r2
 800de54:	f100 33ff 	add.w	r3, r0, #4294967295
 800de58:	d100      	bne.n	800de5c <memcpy+0xc>
 800de5a:	4770      	bx	lr
 800de5c:	b510      	push	{r4, lr}
 800de5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de66:	4291      	cmp	r1, r2
 800de68:	d1f9      	bne.n	800de5e <memcpy+0xe>
 800de6a:	bd10      	pop	{r4, pc}

0800de6c <memset>:
 800de6c:	4402      	add	r2, r0
 800de6e:	4603      	mov	r3, r0
 800de70:	4293      	cmp	r3, r2
 800de72:	d100      	bne.n	800de76 <memset+0xa>
 800de74:	4770      	bx	lr
 800de76:	f803 1b01 	strb.w	r1, [r3], #1
 800de7a:	e7f9      	b.n	800de70 <memset+0x4>

0800de7c <_init>:
 800de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7e:	bf00      	nop
 800de80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de82:	bc08      	pop	{r3}
 800de84:	469e      	mov	lr, r3
 800de86:	4770      	bx	lr

0800de88 <_fini>:
 800de88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8a:	bf00      	nop
 800de8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de8e:	bc08      	pop	{r3}
 800de90:	469e      	mov	lr, r3
 800de92:	4770      	bx	lr
